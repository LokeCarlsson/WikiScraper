<!DOCTYPE html>/n<html class="client-nojs" lang="en" dir="ltr">/n<head>/n<meta charset="UTF-8"/>/n<title>Comparison of programming languages (basic instructions) - Wikipedia</title>/n<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>/n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Comparison_of_programming_languages_(basic_instructions)","wgTitle":"Comparison of programming languages (basic instructions)","wgCurRevisionId":804419604,"wgRevisionId":804419604,"wgArticleId":14513019,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles needing additional references from February 2009","All articles needing additional references","All articles with unsourced statements","Articles with unsourced statements from December 2011","Programming constructs","Programming language comparisons"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Comparison_of_programming_languages_(basic_instructions)","wgRelevantArticleId":14513019,"wgRequestId":"WfB5YgpAICgAAH5UJXEAAAAO","wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":{"toolbar":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":false,"wgPopupsShouldSendModuleToUser":true,"wgPopupsConflictsWithNavPopupGadget":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":false,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q5155959","wgCentralAuthMobileDomain":false,"wgCodeMirrorEnabled":false,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":false});mw.loader.state({"ext.gadget.charinsert-styles":"ready","ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","skins.vector.styles.experimental.print":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {/nmw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*//n/n});mw.loader.load(["ext.cite.a11y","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.interface","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});</script>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cskins.vector.styles.experimental.print%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>/n<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>/n<meta name="ResourceLoaderDynamicStyles" content=""/>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.charinsert-styles&amp;only=styles&amp;skin=vector"/>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>/n<meta name="generator" content="MediaWiki 1.31.0-wmf.4"/>/n<meta name="referrer" content="origin-when-cross-origin"/>/n<link rel="alternate" href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Comparison_of_programming_languages_(basic_instructions)"/>/n<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit"/>/n<link rel="edit" title="Edit this page" href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit"/>/n<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>/n<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>/n<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>/n<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>/n<link rel="license" href="//creativecommons.org/licenses/by-sa/3.0/"/>/n<link rel="canonical" href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(basic_instructions)"/>/n<link rel="dns-prefetch" href="//login.wikimedia.org"/>/n<link rel="dns-prefetch" href="//meta.wikimedia.org" />/n<!--[if lt IE 9]><script src="/w/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1"></script><![endif]-->/n</head>/n<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Comparison_of_programming_languages_basic_instructions rootpage-Comparison_of_programming_languages_basic_instructions vector-experimental-print-styles vector-nav-directionality skin-vector action-view">		<div id="mw-page-base" class="noprint"></div>/n		<div id="mw-head-base" class="noprint"></div>/n		<div id="content" class="mw-body" role="main">/n			<a id="top"></a>/n/n							<div id="siteNotice" class="mw-body-content"><!-- CentralNotice --></div>/n						<div class="mw-indicators mw-body-content">/n</div>/n			<h1 id="firstHeading" class="firstHeading" lang="en">Comparison of programming languages (basic instructions)</h1>/n									<div id="bodyContent" class="mw-body-content">/n									<div id="siteSub" class="noprint">From Wikipedia, the free encyclopedia</div>/n								<div id="contentSub"></div>/n												<div id="jump-to-nav" class="mw-jump">/n					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>/n				</div>/n				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><table class="plainlinks metadata ambox ambox-content ambox-Refimprove" role="presentation">/n<tr>/n<td class="mbox-image">/n<div style="width:52px"><a href="/wiki/File:Question_book-new.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" data-file-width="512" data-file-height="399" /></a></div>/n</td>/n<td class="mbox-text">/n<div class="mbox-text-span">This article <b>needs additional citations for <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="//en.wikipedia.org/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit">improve this article</a> by <a href="/wiki/Help:Introduction_to_referencing_with_Wiki_Markup/1" title="Help:Introduction to referencing with Wiki Markup/1">adding citations to reliable sources</a>. Unsourced material may be challenged and removed.</span> <small><i>(February 2009)</i></small> <small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></div>/n</td>/n</tr>/n</table>/n<table class="vertical-navbox nowraplinks" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%">/n<tr>/n<th style="padding:0.2em 0.4em 0.2em;font-size:145%;line-height:1.2em"><a href="/wiki/Comparison_of_programming_languages" title="Comparison of programming languages">Programming language comparisons</a></th>/n</tr>/n<tr>/n<td style="padding:0 0.1em 0.4em;text-align: left">/n<ul>/n<li><a href="/wiki/Comparison_of_programming_languages" title="Comparison of programming languages">General comparison</a></li>/n<li><a href="/wiki/Assignment_(computer_science)#Notation" title="Assignment (computer science)">Assignment</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(syntax)" title="Comparison of programming languages (syntax)">Basic syntax</a></li>/n<li><a class="mw-selflink selflink">Basic instructions</a></li>/n<li><a href="/wiki/Comment_(computer_programming)#Comparison" title="Comment (computer programming)">Comments</a></li>/n<li>Control flow/n<ul>/n<li><a href="/wiki/Foreach_loop#Language_support" title="Foreach loop">Foreach loops</a></li>/n<li><a href="/wiki/While_loop#Demonstrating_while_loops" title="While loop">While loops</a></li>/n<li><a href="/wiki/For_loop#Timeline_of_the_for-loop_syntax_in_various_programming_languages" title="For loop">For loops</a></li>/n<li><a href="/wiki/Do_while_loop#Demonstrating_do_while_loops" title="Do while loop">Do-while</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Exception_handling_syntax" title="Exception handling syntax">Exception handling</a></li>/n<li><a href="/wiki/Enumerated_type#Pascal_and_syntactically_similar_languages" title="Enumerated type">Enumerated types</a></li>/n<li><a href="/wiki/Anonymous_function#Examples" title="Anonymous function">Anonymous functions</a></li>/n<li><a href="/wiki/%3F:" title="?:">Conditional expressions</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(functional_instructions)" class="mw-redirect" title="Comparison of programming languages (functional instructions)">Functional instructions</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(array)" title="Comparison of programming languages (array)">Arrays</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(associative_arrays)" class="mw-redirect" title="Comparison of programming languages (associative arrays)">Associative arrays</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(strings)" title="Comparison of programming languages (strings)">String operations</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(string_functions)" title="Comparison of programming languages (string functions)">String functions</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(higher-order_functions)" class="mw-redirect" title="Comparison of programming languages (higher-order functions)">Higher-order functions</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_by_type_system" title="Comparison of programming languages by type system">Type systems</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(list_comprehension)" title="Comparison of programming languages (list comprehension)">List comprehension</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(object-oriented_programming)" title="Comparison of programming languages (object-oriented programming)">Object-oriented programming</a></li>/n<li><a href="/wiki/Constructor_(object-oriented_programming)" title="Constructor (object-oriented programming)">Object-oriented constructors</a></li>/n<li><a href="/wiki/Comparison_of_programming_languages_(operators)" class="mw-redirect" title="Comparison of programming languages (operators)">Operators</a></li>/n</ul>/n</td>/n</tr>/n<tr>/n<td style="padding:0 0.1em 0.4em;text-align: left">/n<ul>/n<li><a href="/wiki/Evaluation_strategy" title="Evaluation strategy">Evaluation strategy</a></li>/n<li><a href="https://en.wikibooks.org/wiki/Computer_Programming/Hello_world" class="extiw" title="b:Computer Programming/Hello world">List of "Hello World" programs</a></li>/n</ul>/n</td>/n</tr>/n<tr>/n<td style="padding:0 0.1em 0.4em;text-align: left">/n<ul>/n<li><a href="/wiki/Comparision_of_programming_languages_with_dependent_types" class="mw-redirect" title="Comparision of programming languages with dependent types">Languages with dependent types</a></li>/n<li><a href="/wiki/Comparison_of_type_systems" title="Comparison of type systems">Comparison of type systems</a></li>/n</ul>/n</td>/n</tr>/n<tr>/n<td style="padding:0 0.1em 0.4em;text-align: left">/n<hr />/n<div class="NavFrame collapsed" style="border: none; padding: 0;">/n<div class="NavHead" style="font-size: 105%; background: transparent; text-align: left;">Comparison of individual languages</div>/n<ul class="NavContent" style="text-align: left; font-size: 105%; margin-top: 0; margin-bottom: 0; line-height: inherit;">/n<li style="line-height: inherit; margin: 0"><a href="/wiki/ALGOL_58#ALGOL_58.27s_influence_on_ALGOL_60" title="ALGOL 58">ALGOL 58's influence on ALGOL 60</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/ALGOL_60#Comparisons_with_other_languages" title="ALGOL 60">ALGOL 60: Comparisons with other languages</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Comparison_of_ALGOL_68_and_C%2B%2B" title="Comparison of ALGOL 68 and C++">Comparison of ALGOL 68 and C++</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/ALGOL_68#Comparisons_with_other_languages" title="ALGOL 68">ALGOL 68: Comparisons with other languages</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Compatibility_of_C_and_C%2B%2B" title="Compatibility of C and C++">Compatibility of C and C++</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Comparison_of_Pascal_and_Delphi" title="Comparison of Pascal and Delphi">Comparison of Pascal and Borland Delphi</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Comparison_of_Object_Pascal_and_C" title="Comparison of Object Pascal and C">Comparison of Object Pascal and C</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Comparison_of_Pascal_and_C" title="Comparison of Pascal and C">Comparison of Pascal and C</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Comparison_of_Java_and_C%2B%2B" title="Comparison of Java and C++">Comparison of Java and C++</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Comparison_of_C_Sharp_and_Java" title="Comparison of C Sharp and Java">Comparison of C# and Java</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Comparison_of_C_Sharp_and_Visual_Basic_.NET" title="Comparison of C Sharp and Visual Basic .NET">Comparison of C# and Visual Basic .NET</a></li>/n<li style="line-height: inherit; margin: 0"><a href="/wiki/Comparison_of_Visual_Basic_and_Visual_Basic_.NET" title="Comparison of Visual Basic and Visual Basic .NET">Comparison of Visual Basic and Visual Basic .NET</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<td style="text-align:right;font-size:115%">/n<div class="plainlinks hlist navbar mini">/n<ul>/n<li class="nv-view"><a href="/wiki/Template:Programming_language_comparisons" title="Template:Programming language comparisons"><abbr title="View this template">v</abbr></a></li>/n<li class="nv-talk"><a href="/wiki/Template_talk:Programming_language_comparisons" title="Template talk:Programming language comparisons"><abbr title="Discuss this template">t</abbr></a></li>/n<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Programming_language_comparisons&amp;action=edit"><abbr title="Edit this template">e</abbr></a></li>/n</ul>/n</div>/n</td>/n</tr>/n</table>/n<p><b>Comparison of programming languages</b> is a common topic of discussion among <a href="/wiki/Software_engineer" title="Software engineer">software engineers</a>. Basic instructions of several <a href="/wiki/Programming_language" title="Programming language">programming languages</a> are compared here.</p>/n<p></p>/n<div id="toc" class="toc">/n<div class="toctitle">/n<h2>Contents</h2>/n</div>/n<ul>/n<li class="toclevel-1 tocsection-1"><a href="#Conventions_of_this_article"><span class="tocnumber">1</span> <span class="toctext">Conventions of this article</span></a></li>/n<li class="toclevel-1 tocsection-2"><a href="#Type_identifiers"><span class="tocnumber">2</span> <span class="toctext">Type identifiers</span></a>/n<ul>/n<li class="toclevel-2 tocsection-3"><a href="#Integers"><span class="tocnumber">2.1</span> <span class="toctext">Integers</span></a></li>/n<li class="toclevel-2 tocsection-4"><a href="#Floating_point"><span class="tocnumber">2.2</span> <span class="toctext">Floating point</span></a></li>/n<li class="toclevel-2 tocsection-5"><a href="#Complex_numbers"><span class="tocnumber">2.3</span> <span class="toctext">Complex numbers</span></a></li>/n<li class="toclevel-2 tocsection-6"><a href="#Other_variable_types"><span class="tocnumber">2.4</span> <span class="toctext">Other variable types</span></a></li>/n</ul>/n</li>/n<li class="toclevel-1 tocsection-7"><a href="#Derived_types"><span class="tocnumber">3</span> <span class="toctext">Derived types</span></a>/n<ul>/n<li class="toclevel-2 tocsection-8"><a href="#Array"><span class="tocnumber">3.1</span> <span class="toctext">Array</span></a></li>/n<li class="toclevel-2 tocsection-9"><a href="#Other_types"><span class="tocnumber">3.2</span> <span class="toctext">Other types</span></a></li>/n</ul>/n</li>/n<li class="toclevel-1 tocsection-10"><a href="#Variable_and_constant_declarations"><span class="tocnumber">4</span> <span class="toctext">Variable and constant declarations</span></a></li>/n<li class="toclevel-1 tocsection-11"><a href="#Control_flow"><span class="tocnumber">5</span> <span class="toctext">Control flow</span></a>/n<ul>/n<li class="toclevel-2 tocsection-12"><a href="#Conditional_statements"><span class="tocnumber">5.1</span> <span class="toctext">Conditional statements</span></a></li>/n<li class="toclevel-2 tocsection-13"><a href="#Loop_statements"><span class="tocnumber">5.2</span> <span class="toctext">Loop statements</span></a></li>/n<li class="toclevel-2 tocsection-14"><a href="#Exceptions"><span class="tocnumber">5.3</span> <span class="toctext">Exceptions</span></a></li>/n<li class="toclevel-2 tocsection-15"><a href="#Other_control_flow_statements"><span class="tocnumber">5.4</span> <span class="toctext">Other control flow statements</span></a></li>/n</ul>/n</li>/n<li class="toclevel-1 tocsection-16"><a href="#Functions"><span class="tocnumber">6</span> <span class="toctext">Functions</span></a></li>/n<li class="toclevel-1 tocsection-17"><a href="#Type_conversions"><span class="tocnumber">7</span> <span class="toctext">Type conversions</span></a></li>/n<li class="toclevel-1 tocsection-18"><a href="#Standard_stream_I.2FO"><span class="tocnumber">8</span> <span class="toctext">Standard stream I/O</span></a></li>/n<li class="toclevel-1 tocsection-19"><a href="#Reading_command-line_arguments"><span class="tocnumber">9</span> <span class="toctext">Reading command-line arguments</span></a></li>/n<li class="toclevel-1 tocsection-20"><a href="#Execution_of_commands"><span class="tocnumber">10</span> <span class="toctext">Execution of commands</span></a></li>/n<li class="toclevel-1 tocsection-21"><a href="#References"><span class="tocnumber">11</span> <span class="toctext">References</span></a></li>/n</ul>/n</div>/n<p></p>/n<h2><span class="mw-headline" id="Conventions_of_this_article">Conventions of this article</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=1" title="Edit section: Conventions of this article">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>The <b>bold</b> is the literal code. The non-bold is interpreted by the reader. Statements in <a href="/wiki/Guillemets" class="mw-redirect" title="Guillemets">guillemets</a> («&#160;…&#160;») are optional. <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> indicates a necessary indent (with whitespace).</p>/n<div style="clear:both;"></div>/n<h2><span class="mw-headline" id="Type_identifiers">Type identifiers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=2" title="Edit section: Type identifiers">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<h3><span class="mw-headline" id="Integers"><a href="/wiki/Integer_(computer_science)" title="Integer (computer science)">Integers</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=3" title="Edit section: Integers">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="wikitable">/n<tr>/n<th rowspan="2"></th>/n<th colspan="2">8 bit (<a href="/wiki/Byte" title="Byte">byte</a>)</th>/n<th colspan="2">16 bit (<a href="/wiki/Short_integer" class="mw-redirect" title="Short integer">short integer</a>)</th>/n<th colspan="2">32 bit</th>/n<th colspan="2">64 bit (<a href="/wiki/Long_integer" class="mw-redirect" title="Long integer">long integer</a>)</th>/n<th colspan="2">Word size</th>/n<th rowspan="2">Arbitrarily precise (<a href="/wiki/Arbitrary-precision_arithmetic" title="Arbitrary-precision arithmetic">bignum</a>)</th>/n</tr>/n<tr>/n<th>Signed</th>/n<th>Unsigned</th>/n<th>Signed</th>/n<th>Unsigned</th>/n<th>Signed</th>/n<th>Unsigned</th>/n<th>Signed</th>/n<th>Unsigned</th>/n<th>Signed</th>/n<th>Unsigned</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-0" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt>range -2**7 .. 2**7 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup></td>/n<td><tt>range 0 .. 2**8 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup> or <tt>mod 2**8</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod"><a href="#endnote_Ada_mod">[k]</a></sup></td>/n<td><tt>range -2**15 .. 2**15 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup></td>/n<td><tt>range 0 .. 2**16 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup> or <tt>mod 2**16</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod"><a href="#endnote_Ada_mod">[k]</a></sup></td>/n<td><tt>range -2**31 .. 2**31 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup></td>/n<td><tt>range 0 .. 2**32 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup> or <tt>mod 2**32</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod"><a href="#endnote_Ada_mod">[k]</a></sup></td>/n<td><tt>range -2**63 .. 2**63 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup></td>/n<td><tt>mod 2**64</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod"><a href="#endnote_Ada_mod">[k]</a></sup></td>/n<td><tt>Integer</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup></td>/n<td><tt>range 0 .. 2**Integer'<wbr />Size - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range"><a href="#endnote_Ada_range">[j]</a></sup> or <tt>mod Integer'<wbr />Size</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod"><a href="#endnote_Ada_mod">[k]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td rowspan="2"><a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a> (variable-width)</td>/n<td rowspan="2"><tt>short short int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>short int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>long int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>long long int</tt> <sup class="reference plainlinks nourlexpansion" id="ref_a68"><a href="#endnote_a68">[a]</a></sup><sup class="reference plainlinks nourlexpansion" id="ref_a68g"><a href="#endnote_a68g">[g]</a></sup></td>/n</tr>/n<tr>/n<td colspan="2" align="center"><tt>bytes</tt> &amp; <tt>bits</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> (<a href="/wiki/C99" title="C99">C99</a> fixed-width)</td>/n<td rowspan="2"><tt>int8_t</tt></td>/n<td rowspan="2"><tt>uint8_t</tt></td>/n<td rowspan="2"><tt>int16_t</tt></td>/n<td rowspan="2"><tt>uint16_t</tt></td>/n<td rowspan="2"><tt>int32_t</tt></td>/n<td rowspan="2"><tt>uint32_t</tt></td>/n<td rowspan="2"><tt>int64_t</tt></td>/n<td rowspan="2"><tt>uint64_t</tt></td>/n<td rowspan="4"><tt>int</tt></td>/n<td rowspan="4"><tt>unsigned int</tt></td>/n<td rowspan="5" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/C%2B%2B" title="C++">C++</a> (<a href="/wiki/C%2B%2B11" title="C++11">C++11</a> fixed-width)</td>/n</tr>/n<tr>/n<td><a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> (<a href="/wiki/C99" title="C99">C99</a> variable-width)</td>/n<td rowspan="2"><tt>signed char</tt></td>/n<td rowspan="2"><tt>unsigned char</tt></td>/n<td rowspan="2"><tt>short</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2"><tt>unsigned short</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2"><tt>long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2"><tt>unsigned long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2"><tt>long long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n<td rowspan="2"><tt>unsigned long long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup></td>/n</tr>/n<tr>/n<td><a href="/wiki/C%2B%2B" title="C++">C++</a> (<a href="/wiki/C%2B%2B11" title="C++11">C++11</a> variable-width)</td>/n</tr>/n<tr>/n<td><a href="/wiki/Objective-C" title="Objective-C">Objective-C</a> (<a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a>)</td>/n<td><tt>signed char <b><br />/nor<br /></b> int8_t</tt></td>/n<td><tt>unsigned char <b><br />/nor<br /></b> uint8_t</tt></td>/n<td><tt>short <b><br />/nor<br /></b> int16_t</tt></td>/n<td><tt>unsigned short <b><br />/nor<br /></b> uint16_t</tt></td>/n<td><tt>int <b><br />/nor<br /></b> int32_t</tt></td>/n<td><tt>unsigned int <b><br />/nor<br /></b> uint32_t</tt></td>/n<td><tt>long long <b><br />/nor<br /></b> int64_t</tt></td>/n<td><tt>unsigned long long <b><br />/nor<br /></b> uint64_t</tt></td>/n<td><tt>NSInteger <b><br />/nor<br /></b> long</tt></td>/n<td><tt>NSUInteger <b><br />/nor<br /></b> unsigned long</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></td>/n<td><tt>sbyte</tt></td>/n<td><tt>byte</tt></td>/n<td rowspan="2"><tt>short</tt></td>/n<td><tt>ushort</tt></td>/n<td rowspan="2"><tt>int</tt></td>/n<td><tt>uint</tt></td>/n<td rowspan="2"><tt>long</tt></td>/n<td><tt>ulong</tt></td>/n<td><tt>IntPtr</tt></td>/n<td><tt>UIntPtr</tt></td>/n<td><tt>System.Numerics<wbr />.BigInteger</tt><br />/n(.NET 4.0)</td>/n</tr>/n<tr>/n<td><a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a></td>/n<td><tt>byte</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>char</tt><sup class="reference plainlinks nourlexpansion" id="ref_Java_char"><a href="#endnote_Java_char">[b]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>java.math<wbr />.BigInteger</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Go_(programming_language)" title="Go (programming language)">Go</a></td>/n<td><tt>int8</tt></td>/n<td><tt>uint8</tt> or <tt>byte</tt></td>/n<td><tt>int16</tt></td>/n<td><tt>uint16</tt></td>/n<td><tt>int32</tt></td>/n<td><tt>uint32</tt></td>/n<td><tt>int64</tt></td>/n<td><tt>uint64</tt></td>/n<td><tt>int</tt></td>/n<td><tt>uint</tt></td>/n<td><tt>big.Int</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Swift_(programming_language)" title="Swift (programming language)">Swift</a></td>/n<td><tt>Int8</tt></td>/n<td><tt>UInt8</tt></td>/n<td><tt>Int16</tt></td>/n<td><tt>UInt16</tt></td>/n<td><tt>Int32</tt></td>/n<td><tt>UInt32</tt></td>/n<td><tt>Int64</tt></td>/n<td><tt>UInt64</tt></td>/n<td><tt>Int</tt></td>/n<td><tt>UInt</tt></td>/n<td></td>/n</tr>/n<tr>/n<td><a href="/wiki/D_(programming_language)" title="D (programming language)">D</a></td>/n<td><tt>byte</tt></td>/n<td><tt>ubyte</tt></td>/n<td><tt>short</tt></td>/n<td><tt>ushort</tt></td>/n<td><tt>int</tt></td>/n<td><tt>uint</tt></td>/n<td><tt>long</tt></td>/n<td><tt>ulong</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>BigInt</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a><sup id="cite_ref-HyperSpec_2-0" class="reference"><a href="#cite_note-HyperSpec-2">[2]</a></sup></td>/n<td><tt>(integer -128 127)</tt></td>/n<td><tt>(integer 0 255)</tt></td>/n<td><tt>(integer -32768 32767)</tt></td>/n<td><tt>(integer 0 65536)</tt></td>/n<td><tt>(integer -2147483648 2147483647)</tt></td>/n<td><tt>(integer 0 4294967296)</tt></td>/n<td><tt>(integer -9223372036854775808 9223372036854775807)</tt></td>/n<td><tt>(integer 0 18446744073709551616)</tt></td>/n<td></td>/n<td></td>/n<td><tt>bignum</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td><a href="/wiki/ISLISP" title="ISLISP">ISLISP</a><sup id="cite_ref-Specification_3-0" class="reference"><a href="#cite_note-Specification-3">[3]</a></sup></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td><tt>bignum</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a> (<a href="/wiki/Free_Pascal" title="Free Pascal">FPC</a>)</td>/n<td><tt>shortint</tt></td>/n<td><tt>byte</tt></td>/n<td><tt>smallint</tt></td>/n<td><tt>word</tt></td>/n<td><tt>longint</tt></td>/n<td><tt>longword</tt></td>/n<td><tt>int64</tt></td>/n<td><tt>qword</tt></td>/n<td><tt>integer</tt></td>/n<td><tt>cardinal</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>Byte</tt></td>/n<td><tt>Integer</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Long</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2" colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="1" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a></td>/n<td><tt>SByte</tt></td>/n<td><tt>Short</tt></td>/n<td><tt>UShort</tt></td>/n<td><tt>Integer</tt></td>/n<td><tt>UInteger</tt></td>/n<td><tt>Long</tt></td>/n<td><tt>ULong</tt></td>/n<td><tt>System.Numerics<wbr />.BigInteger</tt><br />/n(.NET 4.0)</td>/n</tr>/n<tr>/n<td><a href="/wiki/FreeBasic" class="mw-redirect" title="FreeBasic">FreeBasic</a></td>/n<td><tt>Byte</tt> or <tt>Integer&lt;8&gt;</tt></td>/n<td><tt>UByte</tt> or <tt>UInteger&lt;8&gt;</tt></td>/n<td><tt>Short</tt> or <tt>Integer&lt;16&gt;</tt></td>/n<td><tt>UShort</tt> or <tt>UInteger&lt;16&gt;</tt></td>/n<td><tt>Long</tt> or <tt>Integer&lt;32&gt;</tt></td>/n<td><tt>ULong</tt> or <tt>UInteger&lt;32&gt;</tt></td>/n<td><tt>LongInt</tt> or <tt>Integer&lt;64&gt;</tt></td>/n<td><tt>ULongInt</tt> or <tt>UInteger&lt;64&gt;</tt></td>/n<td><tt>Integer</tt></td>/n<td><tt>UInteger</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> 2.x</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>int</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>long</tt></td>/n</tr>/n<tr>/n<td>Python 3.x</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>int</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/S-Lang_(programming_language)" class="mw-redirect" title="S-Lang (programming language)">S-Lang</a></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/Fortran" title="Fortran">Fortran</a></td>/n<td><tt>INTEGER<wbr />(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_Kinds"><a href="#endnote_Kinds">[f]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>INTEGER<wbr />(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_Kinds"><a href="#endnote_Kinds">[f]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>INTEGER<wbr />(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_Kinds"><a href="#endnote_Kinds">[f]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>INTEGER<wbr />(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_Kinds"><a href="#endnote_Kinds">[f]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td><a href="/wiki/PHP" title="PHP">PHP</a></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>int</tt> <sup class="reference plainlinks nourlexpansion" id="ref_PHP_32.2F64_bit_long"><a href="#endnote_PHP_32.2F64_bit_long">[m]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>int</tt> <sup class="reference plainlinks nourlexpansion" id="ref_PHP_32.2F64_bit_long"><a href="#endnote_PHP_32.2F64_bit_long">[m]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><sup class="reference plainlinks nourlexpansion" id="ref_PHP_bignum"><a href="#endnote_PHP_bignum">[e]</a></sup></td>/n</tr>/n<tr>/n<td><a href="/wiki/Perl" title="Perl">Perl</a> 5</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_scalars"><a href="#endnote_scalars">[d]</a></sup></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_scalars"><a href="#endnote_scalars">[d]</a></sup></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_scalars"><a href="#endnote_scalars">[d]</a></sup></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_scalars"><a href="#endnote_scalars">[d]</a></sup></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_scalars"><a href="#endnote_scalars">[d]</a></sup></td>/n<td><tt>Math::BigInt</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Perl_6" title="Perl 6">Perl 6</a></td>/n<td><tt>int8</tt></td>/n<td><tt>uint8</tt></td>/n<td><tt>int16</tt></td>/n<td><tt>uint16</tt></td>/n<td><tt>int32</tt></td>/n<td><tt>uint32</tt></td>/n<td><tt>int64</tt></td>/n<td><tt>uint64</tt></td>/n<td><tt>Int</tt></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Fixnum</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Bignum</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a><sup class="reference plainlinks nourlexpansion" id="ref_Erlang_int"><a href="#endnote_Erlang_int">[n]</a></sup></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td>integer()</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td>integer()<sup class="reference plainlinks nourlexpansion" id="ref_Erlang_arb"><a href="#endnote_Erlang_arb">[o]</a></sup></td>/n</tr>/n<tr>/n<td><a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a></td>/n<td><tt>Byte</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Short</tt></td>/n<td><tt>Char</tt><sup class="reference plainlinks nourlexpansion" id="ref_Scala_Char"><a href="#endnote_Scala_Char">[l]</a></sup></td>/n<td><tt>Int</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Long</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>scala.math.BigInt</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Seed7" title="Seed7">Seed7</a></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>integer</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>bigInteger</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>SmallInteger</tt><sup class="reference plainlinks nourlexpansion" id="ref_Smalltalk"><a href="#endnote_Smalltalk">[i]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>LargeInteger</tt><sup class="reference plainlinks nourlexpansion" id="ref_Smalltalk"><a href="#endnote_Smalltalk">[i]</a></sup></td>/n</tr>/n<tr>/n<td><a href="/wiki/Windows_PowerShell" class="mw-redirect" title="Windows PowerShell">Windows PowerShell</a></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/OCaml" title="OCaml">OCaml</a></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>int32</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>int64</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>int <b><br />/nor<br /></b> nativeint</tt></td>/n<td></td>/n<td><tt>open Big_int;;<br />/nbig_int</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a></td>/n<td><tt>sbyte</tt></td>/n<td><tt>byte</tt></td>/n<td><tt>int16</tt></td>/n<td><tt>uint16</tt></td>/n<td><tt>int32</tt> or <tt>int</tt></td>/n<td><tt>uint32</tt></td>/n<td><tt>uint64</tt></td>/n<td><tt>nativeint</tt></td>/n<td><tt>unativeint</tt></td>/n<td><tt>bigint</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Word8.word</tt></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Int32.int</tt></td>/n<td><tt>Word32.word</tt></td>/n<td><tt>Int64.int</tt></td>/n<td><tt>Word64.word</tt></td>/n<td><tt>int</tt></td>/n<td><tt>word</tt></td>/n<td><tt>LargeInt.int</tt> or<br />/n<tt>IntInf.int</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> (<a href="/wiki/Glasgow_Haskell_Compiler" title="Glasgow Haskell Compiler">GHC</a>)</td>/n<td>«<tt>import Int</tt>»<br />/n<tt>Int8</tt></td>/n<td>«<tt>import Word</tt>»<br />/n<tt>Word8</tt></td>/n<td>«<tt>import Int</tt>»<br />/n<tt>Int16</tt></td>/n<td>«<tt>import Word</tt>»<br />/n<tt>Word16</tt></td>/n<td>«<tt>import Int</tt>»<br />/n<tt>Int32</tt></td>/n<td>«<tt>import Word</tt>»<br />/n<tt>Word32</tt></td>/n<td>«<tt>import Int</tt>»<br />/n<tt>Int64</tt></td>/n<td>«<tt>import Word</tt>»<br />/n<tt>Word64</tt></td>/n<td><tt>Int</tt></td>/n<td>«<tt>import Word</tt>»<br />/n<tt>Word</tt></td>/n<td><tt>Integer</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a></td>/n<td><tt>INTEGER_8</tt></td>/n<td><tt>NATURAL_8</tt></td>/n<td><tt>INTEGER_16</tt></td>/n<td><tt>NATURAL_16</tt></td>/n<td><tt>INTEGER_32</tt></td>/n<td><tt>NATURAL_32</tt></td>/n<td><tt>INTEGER_64</tt></td>/n<td><tt>NATURAL_64</tt></td>/n<td><tt>INTEGER</tt></td>/n<td><tt>NATURAL</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/COBOL" title="COBOL">COBOL</a><sup class="reference plainlinks nourlexpansion" id="ref_Cobol"><a href="#endnote_Cobol">[h]</a></sup></td>/n<td><tt>BINARY-CHAR «SIGNED»</tt></td>/n<td><tt>BINARY-CHAR UNSIGNED</tt></td>/n<td><tt>BINARY-SHORT «SIGNED»</tt></td>/n<td><tt>BINARY-SHORT UNSIGNED</tt></td>/n<td><tt>BINARY-LONG «SIGNED»</tt></td>/n<td><tt>BINARY-LONG UNSIGNED</tt></td>/n<td><tt>BINARY-DOUBLE «SIGNED»</tt></td>/n<td><tt>BINARY-DOUBLE UNSIGNED</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><a href="/wiki/Mathematica" class="mw-redirect" title="Mathematica">Mathematica</a></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Integer</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Wolfram_Language" title="Wolfram Language">Wolfram Language</a></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Integer</tt></td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_a68"><b><a href="#ref_a68">^a</a></b></span> The <u>standard</u> constants <tt>int shorts</tt> and <tt>int lengths</tt> can be used to determine how many '<tt>short</tt>'s and '<tt>long</tt>'s can be usefully prefixed to '<tt>short int</tt>' and '<tt>long int</tt>'. The actually size of the '<tt>short int</tt>', '<tt>int</tt>' and '<tt>long int</tt>' is available as constants <tt>short max int</tt>, <tt>max int</tt> and <tt>long max int</tt> etc.<br />/n<span class="citation wikicite" id="endnote_Java_char"><b><a href="#ref_Java_char">^b</a></b></span> Commonly used for characters.<br />/n<span class="citation wikicite" id="endnote_CInt"><b><a href="#ref_CInt">^c</a></b></span> The ALGOL 68, C and C++ languages do not specify the exact width of the integer types <tt>short</tt>, <tt>int</tt>, <tt>long</tt>, and (C99, C++11) <tt>long long</tt>, so they are implementation-dependent. In C and C++ <tt>short</tt>, <tt>long</tt>, and <tt>long long</tt> types are required to be at least 16, 32, and 64 bits wide, respectively, but can be more. The <tt>int</tt> type is required to be at least as wide as <tt>short</tt> and at most as wide as <tt>long</tt>, and is typically the width of the word size on the processor of the machine (i.e. on a 32-bit machine it is often 32 bits wide; on 64-bit machines it is often 64 bits wide). C99 and C++11<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (December 2011)">citation needed</span></a></i>]</sup> also define the <tt>[u]intN_t</tt> exact-width types in the <a href="/wiki/Stdint.h" class="mw-redirect" title="Stdint.h">stdint.h</a> header. See<a href="/wiki/C_syntax#Integral_types" title="C syntax">C syntax#Integral types</a> for more information.<br />/n<span class="citation wikicite" id="endnote_scalars"><b><a href="#ref_scalars">^d</a></b></span> Perl 5 does not have distinct types. Integers, floating point numbers, strings, etc. are all considered "scalars".<br />/n<span class="citation wikicite" id="endnote_PHP_bignum"><b><a href="#ref_PHP_bignum">^e</a></b></span> PHP has two arbitrary-precision libraries. The BCMath library just uses strings as datatype. The GMP library uses an internal "resource" type.<br />/n<span class="citation wikicite" id="endnote_Kinds"><b><a href="#ref_Kinds">^f</a></b></span> The value of "n" is provided by the <tt>SELECTED_INT_KIND</tt><sup id="cite_ref-fortranwiki.org_4-0" class="reference"><a href="#cite_note-fortranwiki.org-4">[4]</a></sup> intrinsic function.<br />/n<span class="citation wikicite" id="endnote_a68g"><b><a href="#ref_a68g">^g</a></b></span> <a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a>G's run time option <i><tt>--precision "number"</tt></i> can set precision for <tt>long long int</tt>s to the required "number" significant digits. The <u>standard</u> constants <i><tt>long long int width</tt></i> and <i><tt>long long max int</tt></i> can be used to determine actual precision.<br />/n<span class="citation wikicite" id="endnote_Cobol"><b><a href="#ref_Cobol">^h</a></b></span> <a href="/wiki/COBOL" title="COBOL">COBOL</a> allows the specification of a required precision and will automatically select an available type capable of representing the specified precision. "<tt>PIC S9999</tt>", for example, would require a signed variable of four decimal digits precision. If specified as a binary field, this would select a 16-bit signed type on most platforms.<br />/n<span class="citation wikicite" id="endnote_Smalltalk"><b><a href="#ref_Smalltalk">^i</a></b></span> <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> automatically chooses an appropriate representation for integral numbers. Typically, two representations are present, one for integers fitting the native word size minus any tag bit (SmallInteger) and one supporting arbitrary sized integers (LargeInteger). Arithmetic operations support polymorphic arguments and return the result in the most appropriate compact representation.<br />/n<span class="citation wikicite" id="endnote_Ada_range"><b><a href="#ref_Ada_range">^j</a></b></span> <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> range types are checked for boundary violations at run-time (as well as at compile-time for static expressions). Run-time boundary violations raise a "constraint error" exception. Ranges are not restricted to powers of two. Commonly predefined Integer subtypes are: Positive (<tt>range 1 .. Integer'Last</tt>) and Natural (<tt>range 0 .. Integer'Last</tt>). <tt>Short_Short_Integer</tt> (8 bits), <tt>Short_Integer</tt> (16 bits) and <tt>Long_Integer</tt> (64 bits) are also commonly predefined, but not required by the Ada standard. Run time checks can be disabled if performance is more important than integrity checks.<br />/n<span class="citation wikicite" id="endnote_Ada_mod"><b><a href="#ref_Ada_mod">^k</a></b></span> <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> modulo types implement modulo arithmetic in all operations, i.e. no range violations are possible. Modulos are not restricted to powers of two.<br />/n<span class="citation wikicite" id="endnote_Scala_char"><b><a href="#ref_Scala_char">^l</a></b></span> Commonly used for characters like Java's char.<br />/n<span class="citation wikicite" id="endnote_PHP_32.2F64_bit_long"><b><a href="#ref_PHP_32.2F64_bit_long">^m</a></b></span> <tt>int</tt> in PHP has the same width as <tt>long</tt> type in C has on that system <sup class="reference plainlinks nourlexpansion" id="ref_CInt"><a href="#endnote_CInt">[c]</a></sup>.<br />/n<span class="citation wikicite" id="endnote_Erlang_int"><b><a href="#ref_Erlang_int">^n</a></b></span> <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a> is dynamically typed. The type identifiers are usually used to specify types of record fields and the argument and return types of functions.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5">[5]</a></sup><br />/n<span class="citation wikicite" id="endnote_Erlang_arb"><b><a href="#ref_Erlang_arb">^o</a></b></span> When it exceeds one word.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6">[6]</a></sup></p>/n<h3><span class="mw-headline" id="Floating_point"><a href="/wiki/Floating_point" class="mw-redirect" title="Floating point">Floating point</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=4" title="Edit section: Floating point">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="wikitable">/n<tr>/n<th></th>/n<th><a href="/wiki/Single_precision" class="mw-redirect" title="Single precision">Single precision</a></th>/n<th><a href="/wiki/Double_precision" class="mw-redirect" title="Double precision">Double precision</a></th>/n<th>Other precision</th>/n<th>Processor dependent</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-1" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt>Float</tt></td>/n<td><tt>Long_Float</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>ALGOL 68</td>/n<td><tt>real</tt><sup class="reference plainlinks nourlexpansion" id="ref_a68"><a href="#endnote_a68">[a]</a></sup></td>/n<td><tt>long real</tt><sup class="reference plainlinks nourlexpansion" id="ref_a68"><a href="#endnote_a68">[a]</a></sup></td>/n<td><tt>short real</tt>, <tt>long long real</tt>, etc.<sup class="reference plainlinks nourlexpansion" id="ref_a68g"><a href="#endnote_a68g">[d]</a></sup></td>/n</tr>/n<tr>/n<td>C</td>/n<td rowspan="3"><tt>float</tt><sup class="reference plainlinks nourlexpansion" id="ref_lax_floats"><a href="#endnote_lax_floats">[b]</a></sup></td>/n<td rowspan="5"><tt>double</tt></td>/n<td rowspan="3"><tt>long double</tt><sup class="reference plainlinks nourlexpansion" id="ref_C-long-double"><a href="#endnote_C-long-double">[f]</a></sup></td>/n</tr>/n<tr>/n<td>C++ (STL)</td>/n</tr>/n<tr>/n<td>Objective-C (Cocoa)</td>/n<td><tt>CGFloat</tt></td>/n</tr>/n<tr>/n<td>C#</td>/n<td rowspan="2"><tt>float</tt></td>/n<td rowspan="3" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Java</td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt>float32</tt></td>/n<td><tt>float64</tt></td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt>Float<b><br /></b>Float32</tt></td>/n<td><tt>Double<b><br /></b>Float64</tt></td>/n<td><tt>Float80</tt><sup class="reference plainlinks nourlexpansion" id="ref_Swift-long-double"><a href="#endnote_Swift-long-double">[g]</a></sup></td>/n<td><tt>CGFloat</tt></td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt>float</tt></td>/n<td><tt>double</tt></td>/n<td></td>/n<td><tt>real</tt></td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td><tt>single-float</tt></td>/n<td><tt>double-float</tt></td>/n<td><tt>float, short-float, long-float</tt></td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Pascal (Free Pascal)</td>/n<td><tt>single</tt></td>/n<td><tt>double</tt></td>/n<td></td>/n<td><tt>real</tt></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td rowspan="3"><tt>Single</tt></td>/n<td rowspan="3"><tt>Double</tt></td>/n<td rowspan="3" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n</tr>/n<tr>/n<td>Xojo</td>/n</tr>/n<tr>/n<td>Python</td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>float</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>JavaScript</td>/n<td><tt>Number</tt><sup id="cite_ref-Javascript_numbers_7-0" class="reference"><a href="#cite_note-Javascript_numbers-7">[7]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td colspan="2"><tt>REAL(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_real_inds"><a href="#endnote_real_inds">[c]</a></sup></td>/n<td></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td></td>/n<td><tt>float</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Perl</td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td><tt>num32</tt></td>/n<td><tt>num64</tt></td>/n<td></td>/n<td><tt>Num</tt></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Float</tt></td>/n<td rowspan="4" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Scala</td>/n<td><tt>Float</tt></td>/n<td><tt>Double</tt></td>/n</tr>/n<tr>/n<td>Seed7</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>float</tt></td>/n</tr>/n<tr>/n<td>Smalltalk</td>/n<td><tt>Float</tt></td>/n<td><tt>Double</tt></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>float</tt></td>/n<td rowspan="3" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>F#</td>/n<td><tt>float32</tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n<td><tt>real</tt></td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td><tt>Float</tt></td>/n<td><tt>Double</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Eiffel</td>/n<td><tt>REAL_32</tt></td>/n<td><tt>REAL_64</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td><tt>FLOAT-BINARY-7</tt><sup class="reference plainlinks nourlexpansion" id="ref_Cobol_ieee"><a href="#endnote_Cobol_ieee">[e]</a></sup></td>/n<td><tt>FLOAT-BINARY-34</tt><sup class="reference plainlinks nourlexpansion" id="ref_Cobol_ieee"><a href="#endnote_Cobol_ieee">[e]</a></sup></td>/n<td><tt>FLOAT-SHORT</tt>, <tt>FLOAT-LONG</tt>, <tt>FLOAT-EXTENDED</tt></td>/n</tr>/n<tr>/n<td>Mathematica</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n<td><tt>Real</tt></td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_a68_real"><b><a href="#ref_a68_real">^a</a></b></span> The <u>standard</u> constants <tt>real shorts</tt> and <tt>real lengths</tt> can be used to determine how many '<tt>short</tt>'s and '<tt>long</tt>'s can be usefully prefixed to '<tt>short real</tt>' and '<tt>long real</tt>'. The actually size of the '<tt>short real</tt>', '<tt>real</tt>' and '<tt>long real</tt>' is available as constants <tt>short max real</tt>, <tt>max real</tt> and <tt>long max real</tt> etc. With the constants <tt>short small real</tt>, <tt>small real</tt> and <tt>long small real</tt> available for each type's <a href="/wiki/Machine_epsilon" title="Machine epsilon">machine epsilon</a>.<br />/n<span class="citation wikicite" id="endnote_lax_floats"><b><a href="#ref_lax_floats">^b</a></b></span> declarations of single precision often are not honored<br />/n<span class="citation wikicite" id="endnote_real_kinds"><b><a href="#ref_real_kinds">^c</a></b></span> The value of "n" is provided by the <tt>SELECTED_REAL_KIND</tt><sup id="cite_ref-ReferenceA_8-0" class="reference"><a href="#cite_note-ReferenceA-8">[8]</a></sup> intrinsic function.<br />/n<span class="citation wikicite" id="endnote_a68g-real"><b><a href="#ref_a68g-real">^d</a></b></span> <a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a>G's run time option <i><tt>--precision "number"</tt></i> can set precision for <tt>long long real</tt>s to the required "number" significant digits. The <u>standard</u> constants <tt>long long real width</tt> and '<tt>long long max real</tt> can be used to determine actual precision.<br />/n<span class="citation wikicite" id="endnote_Cobol-ieee"><b><a href="#ref_Cobol-ieee">^e</a></b></span> These IEEE floating-point types will be introduced in the next COBOL standard.<br />/n<span class="citation wikicite" id="endnote_C-long-double"><b><a href="#ref_C-long-double">^f</a></b></span> Same size as '<tt>double</tt>' on many implementations.<br />/n<span class="citation wikicite" id="endnote_Swift-long-double"><b><a href="#ref_Swift-long-double">^g</a></b></span> Swift supports 80-bit <a href="/wiki/Extended_precision#Language_support" title="Extended precision">extended precision</a> floating point type, equivalent to <tt>long double</tt> in C languages.</p>/n<h3><span class="mw-headline" id="Complex_numbers"><a href="/wiki/Complex_number" title="Complex number">Complex numbers</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=5" title="Edit section: Complex numbers">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="wikitable">/n<tr>/n<th></th>/n<th>Integer</th>/n<th>Single precision</th>/n<th>Double precision</th>/n<th>Half and Quadruple precision etc.</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-2" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Complex</tt><sup class="reference plainlinks nourlexpansion" id="ref_generic_type"><a href="#endnote_generic_type">[b]</a></sup></td>/n<td><tt>Complex</tt><sup class="reference plainlinks nourlexpansion" id="ref_generic_type"><a href="#endnote_generic_type">[b]</a></sup></td>/n<td><tt>Complex</tt><sup class="reference plainlinks nourlexpansion" id="ref_generic_type"><a href="#endnote_generic_type">[b]</a></sup></td>/n</tr>/n<tr>/n<td>ALGOL 68</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>compl</tt></td>/n<td><tt>long compl</tt> etc.</td>/n<td><tt>short compl</tt> etc. &amp; <tt>long long compl</tt> etc.</td>/n</tr>/n<tr>/n<td>C (C99) <sup id="cite_ref-9" class="reference"><a href="#cite_note-9">[9]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>float complex</tt></td>/n<td><tt>double complex</tt></td>/n<td rowspan="7" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>C++ (STL)</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>std::complex&lt;float&gt;</tt></td>/n<td><tt>std::complex&lt;double&gt;</tt></td>/n</tr>/n<tr>/n<td>C#</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>System.Numerics.Complex</tt><br />/n(.NET 4.0)</td>/n</tr>/n<tr>/n<td>Java</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Go</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>complex64</tt></td>/n<td><tt>complex128</tt></td>/n</tr>/n<tr>/n<td>D</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>cfloat</tt></td>/n<td><tt>cdouble</tt></td>/n</tr>/n<tr>/n<td>Objective-C</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td>(complex integer)</td>/n<td>(complex single-float)</td>/n<td>(complex double-float)</td>/n<td>complex</td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td></td>/n<td></td>/n<td></td>/n<td rowspan="4" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Pascal</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>System.Numerics.Complex</tt><br />/n(.NET 4.0)</td>/n</tr>/n<tr>/n<td>Perl</td>/n<td></td>/n<td></td>/n<td><tt>Math::Complex</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td></td>/n<td><tt>complex64</tt></td>/n<td><tt>complex128</tt></td>/n<td><tt>Complex</tt></td>/n</tr>/n<tr>/n<td>Python</td>/n<td></td>/n<td></td>/n<td><tt>complex</tt></td>/n<td rowspan="15" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>JavaScript</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td></td>/n<td colspan="2"><tt>COMPLEX(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_complex_kinds"><a href="#endnote_complex_kinds">[a]</a></sup></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><tt>Complex</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Complex</tt></td>/n</tr>/n<tr>/n<td>Scala</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Seed7</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>complex</tt></td>/n</tr>/n<tr>/n<td>Smalltalk</td>/n<td><tt>Complex</tt></td>/n<td><tt>Complex</tt></td>/n<td><tt>Complex</tt></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Complex.t</tt></td>/n</tr>/n<tr>/n<td>F#</td>/n<td></td>/n<td></td>/n<td><tt>System.Numerics.Complex</tt><br />/n(.NET 4.0)</td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Complex.Complex Float</tt></td>/n<td><tt>Complex.Complex Double</tt></td>/n</tr>/n<tr>/n<td>Eiffel</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Mathematica</td>/n<td><tt>Complex</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Complex</tt></td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_complex_kinds"><b><a href="#ref_complex_kinds">^a</a></b></span> The value of "n" is provided by the <tt>SELECTED_REAL_KIND</tt><sup id="cite_ref-ReferenceA_8-1" class="reference"><a href="#cite_note-ReferenceA-8">[8]</a></sup> intrinsic function.</p>/n<p><span class="citation wikicite" id="endnote_generic_type"><b><a href="#ref_generic_type">^b</a></b></span> Generic type which can be instantiated with any base floating point type.</p>/n<h3><span class="mw-headline" id="Other_variable_types">Other variable types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=6" title="Edit section: Other variable types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="wikitable">/n<tr>/n<th rowspan="2"></th>/n<th colspan="2">Text</th>/n<th rowspan="2"><a href="/wiki/Boolean_datatype" class="mw-redirect" title="Boolean datatype">Boolean</a></th>/n<th rowspan="2"><a href="/wiki/Enumerated_type" title="Enumerated type">Enumeration</a></th>/n<th rowspan="2"><a href="/wiki/Object_(computer_science)" title="Object (computer science)">Object</a>/<a href="/wiki/Top_type" title="Top type">Universal</a></th>/n</tr>/n<tr>/n<th><a href="/wiki/Character_(computing)" title="Character (computing)">Character</a></th>/n<th><a href="/wiki/String_(computer_science)" title="String (computer science)">String</a><sup class="reference plainlinks nourlexpansion" id="ref_string"><a href="#endnote_string">[a]</a></sup></th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-3" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt>Character</tt></td>/n<td><tt>String <b>&amp;</b> Bounded_String <b>&amp;</b> Unbounded_String</tt></td>/n<td><tt>Boolean</tt></td>/n<td><tt>(<b>item<sub>1</sub></b>, <b>item<sub>2</sub></b>, <b>...</b>)</tt></td>/n<td><tt>tagged null record</tt></td>/n</tr>/n<tr>/n<td>ALGOL 68</td>/n<td><tt>char</tt></td>/n<td><tt>string <b>&amp;</b> bytes</tt></td>/n<td><tt>bool <b>&amp;</b> bits</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A - <a rel="nofollow" class="external text" href="http://rosettacode.org/wiki/Enumerations#ALGOL_68">User defined</a></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td rowspan="2"><tt>char<b><br /></b>wchar_t</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>bool</tt><sup class="reference plainlinks nourlexpansion" id="ref_int_bool"><a href="#endnote_int_bool">[b]</a></sup></td>/n<td rowspan="3"><tt><b>enum</b> «name» <b>{</b>item<sub>1</sub><b>,</b> item<sub>2</sub><b>,</b> ... <b>};</b></tt></td>/n<td rowspan="2"><tt><a href="/wiki/Void_type" title="Void type">void</a> <a href="/wiki/Pointer_(computer_programming)" title="Pointer (computer programming)">*</a></tt></td>/n</tr>/n<tr>/n<td>C++ (STL)</td>/n<td><code><a href="/wiki/Std::string" class="mw-redirect" title="Std::string">«<tt>std::<b>»</b><code>string</code></tt></a></code></td>/n</tr>/n<tr>/n<td>Objective-C</td>/n<td><tt>unichar</tt></td>/n<td><tt>NSString *</tt></td>/n<td><tt>BOOL</tt></td>/n<td><tt>id</tt></td>/n</tr>/n<tr>/n<td>C#</td>/n<td rowspan="2"><tt>char</tt></td>/n<td><tt>string</tt></td>/n<td><tt>bool</tt></td>/n<td rowspan="2"><tt><b>enum</b> name <b>{</b>item<sub>1</sub><b>,</b> item<sub>2</sub><b>,</b> ... <b>}</b></tt></td>/n<td><tt>object</tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td><tt>String</tt></td>/n<td><tt>boolean</tt></td>/n<td><tt>Object</tt></td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt>byte<b><br /></b>rune</tt></td>/n<td><tt>string</tt></td>/n<td><tt>bool</tt></td>/n<td><tt>const (</tt>/n<dl>/n<dd><tt><b>item<sub>1</sub></b> = iota<b><br />/nitem<sub>2</sub><br />/n...</b></tt></dd>/n</dl>/n<tt>)</tt></td>/n<td><tt>interface{}</tt></td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt>Character</tt></td>/n<td><tt>String</tt></td>/n<td><tt>Bool</tt></td>/n<td><tt><b>enum</b> name <b>{ case</b> item<sub>1</sub><b>,</b> item<sub>2</sub><b>,</b> ... <b>}</b></tt></td>/n<td><tt>Any</tt></td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt>char</tt></td>/n<td><tt>string</tt></td>/n<td><tt>bool</tt></td>/n<td><tt>enum <b>name</b> {<b>item<sub>1</sub></b>, <b>item<sub>2</sub></b>, <b>...</b> }</tt></td>/n<td><tt>std.variant.Variant</tt></td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Pascal (ISO)</td>/n<td rowspan="2"><tt>char</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>boolean</tt></td>/n<td rowspan="2"><tt>(<b>item<sub>1</sub></b>, <b>item<sub>2</sub></b>, <b>...</b>)</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Object Pascal (Delphi)</td>/n<td><tt>string</tt></td>/n<td><tt>variant</tt></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="3"><tt>String</tt></td>/n<td rowspan="3"><tt>Boolean</tt></td>/n<td rowspan="3"><tt>Enum <b>name</b></tt>/n<dl>/n<dd><tt><b>item<sub>1</sub><br />/nitem<sub>2</sub><br />/n...</b></tt></dd>/n</dl>/n<tt>End Enum</tt></td>/n<td><tt><a href="/wiki/Variant_type" title="Variant type">Variant</a></tt></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td><tt>Char</tt></td>/n<td><tt>Object</tt></td>/n</tr>/n<tr>/n<td>Xojo</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>Object or Variant</tt></td>/n</tr>/n<tr>/n<td>Python</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_string_as_char"><a href="#endnote_string_as_char">[d]</a></sup></td>/n<td><tt>str</tt></td>/n<td><tt>bool</tt></td>/n<td></td>/n<td><tt>object</tt></td>/n</tr>/n<tr>/n<td>JavaScript</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_string_as_char"><a href="#endnote_string_as_char">[d]</a></sup></td>/n<td><tt>String</tt></td>/n<td><tt>Boolean</tt></td>/n<td></td>/n<td><tt>Object</tt></td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td><tt>CHARACTER(LEN = *)</tt></td>/n<td><tt>CHARACTER(LEN =&#160;:), allocatable</tt></td>/n<td><tt>LOGICAL(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_logical_kinds"><a href="#endnote_logical_kinds">[f]</a></sup></td>/n<td></td>/n<td><tt>CLASS(*)</tt></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_string_as_char"><a href="#endnote_string_as_char">[d]</a></sup></td>/n<td><tt>string</tt></td>/n<td><tt>bool</tt></td>/n<td></td>/n<td>(type declaration omitted)</td>/n</tr>/n<tr>/n<td>Perl</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_string_as_char"><a href="#endnote_string_as_char">[d]</a></sup></td>/n<td></td>/n<td></td>/n<td></td>/n<td><tt>UNIVERSAL</tt></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td><tt>Char</tt></td>/n<td><tt>Str</tt></td>/n<td><tt>Bool</tt></td>/n<td><tt>enum <b>name</b> &lt;<b>item<sub>1</sub> item<sub>2</sub> ...</b>&gt; <b>or<br /></b> enum <b>name</b> &lt;&lt;:<b>item<sub>1</sub></b>(<b>value</b>) :<b>item<sub>2</sub></b>(<b>value</b>) <b>...</b>&gt;&gt;</tt></td>/n<td><tt>Mu</tt></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_string_as_char"><a href="#endnote_string_as_char">[d]</a></sup></td>/n<td><tt>String</tt></td>/n<td><tt>Object</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ruby.27s_bool"><a href="#endnote_Ruby.27s_bool">[c]</a></sup></td>/n<td></td>/n<td><tt>Object</tt></td>/n</tr>/n<tr>/n<td>Scala</td>/n<td><tt>Char</tt></td>/n<td><tt>String</tt></td>/n<td><tt>Boolean</tt></td>/n<td><tt>object <b>name</b> extends Enumeration {</tt>/n<dl>/n<dd><tt>val <b>item<sub>1</sub></b>, <b>item<sub>2</sub></b>, <b>...</b> = Value</tt></dd>/n</dl>/n<tt>}</tt></td>/n<td><tt>Any</tt></td>/n</tr>/n<tr>/n<td>Seed7</td>/n<td><tt>char</tt></td>/n<td><tt>string</tt></td>/n<td><tt>boolean</tt></td>/n<td><tt><b>const type</b>: name <b>is new enum</b></tt>/n<dl>/n<dd><tt>item<sub>1</sub><b>,</b><br />/nitem<sub>2</sub><b>,</b><br />/n...</tt></dd>/n</dl>/n<tt><b>end enum;</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td rowspan="3"><tt>char</tt></td>/n<td rowspan="3"><tt>string</tt></td>/n<td rowspan="3"><tt>bool</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_enum"><a href="#endnote_enum">[e]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>F#</td>/n<td><tt>type <b>name</b> = <b>item<sub>1</sub></b> = <b>value</b> | <b>item<sub>2</sub> = value</b> |</tt> ...</td>/n<td><tt>obj</tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_enum"><a href="#endnote_enum">[e]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td><tt>Char</tt></td>/n<td><tt>String</tt></td>/n<td><tt>Bool</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_enum"><a href="#endnote_enum">[e]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Eiffel</td>/n<td><tt>CHARACTER</tt></td>/n<td><tt>STRING</tt></td>/n<td><tt>BOOLEAN</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>ANY</tt></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td><tt>PIC X</tt></td>/n<td><tt>PIC X(<b>string length</b>) <b>or</b> PIC&#160;X«X...»</tt></td>/n<td><tt>PIC 1«(<b>number of digits</b>)» <b>or</b> PIC&#160;1«1...»</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>OBJECT REFERENCE</tt></td>/n</tr>/n<tr>/n<td>Mathematica</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_string_as_char"><a href="#endnote_string_as_char">[d]</a></sup></td>/n<td><tt>String</tt></td>/n<td></td>/n<td></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_string"><b><a href="#ref_string">^a</a></b></span> specifically, strings of arbitrary length and automatically managed.<br />/n<span class="citation wikicite" id="endnote_int_bool"><b><a href="#ref_int_bool">^b</a></b></span> This language represents a boolean as an integer where false is represented as a value of zero and true by a non-zero value.<br />/n<span class="citation wikicite" id="endnote_Ruby.27s_bool"><b><a href="#ref_Ruby.27s_bool">^c</a></b></span> All values evaluate to either true or false. Everything in <b><tt>TrueClass</tt></b> evaluates to true and everything in <b><tt>FalseClass</tt></b> evaluates to false.<br />/n<span class="citation wikicite" id="endnote_string_as_char"><b><a href="#ref_string_as_char">^d</a></b></span> This language does not have a separate character type. Characters are represented as strings of length 1.<br />/n<span class="citation wikicite" id="endnote_enum"><b><a href="#ref_enum">^e</a></b></span> Enumerations in this language are algebraic types with only nullary constructors<br />/n<span class="citation wikicite" id="endnote_logical_kinds"><b><a href="#ref_logical_kinds">^f</a></b></span> The value of "n" is provided by the <tt>SELECTED_INT_KIND</tt><sup id="cite_ref-fortranwiki.org_4-1" class="reference"><a href="#cite_note-fortranwiki.org-4">[4]</a></sup> intrinsic function.</p>/n<h2><span class="mw-headline" id="Derived_types">Derived types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=7" title="Edit section: Derived types">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<h3><span class="mw-headline" id="Array"><a href="/wiki/Array_data_type" title="Array data type">Array</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=8" title="Edit section: Array">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<div role="note" class="hatnote navigation-not-searchable">Further information: <a href="/wiki/Comparison_of_programming_languages_(array)" title="Comparison of programming languages (array)">Comparison of programming languages (array)</a></div>/n<table class="wikitable">/n<tr valign="top">/n<th rowspan="2"></th>/n<th colspan="2">fixed size array</th>/n<th colspan="2">dynamic size array</th>/n</tr>/n<tr valign="top">/n<th>one-dimensional array</th>/n<th><a href="/wiki/Array_data_structure" title="Array data structure">multi-dimensional array</a></th>/n<th>one-dimensional array</th>/n<th><a href="/wiki/Array_data_structure" title="Array data structure">multi-dimensional array</a></th>/n</tr>/n<tr valign="top">/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-4" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><b>array (</b>&lt;first&gt; <b>..</b> &lt;last&gt;<b>) of</b> &lt;type&gt;</tt><br />/nor<br />/n<b>array (</b>&lt;discrete_type&gt;<b>) of</b> &lt;type&gt;</td>/n<td><tt><b>array (</b>&lt;first<sub>1</sub>&gt; <b>..</b> &lt;last<sub>1</sub>&gt;<b>,</b> &lt;first<sub>2</sub>&gt; <b>..</b> &lt;last<sub>2</sub>&gt;<b>,</b> ...<b>) of</b> &lt;type&gt;<br />/nor<br />/n<b>array (</b>&lt;discrete_type<sub>1</sub>&gt;<b>,</b> &lt;discrete_type<sub>2</sub>&gt;<b>,</b> ...<b>) of</b> &lt;type&gt;</tt></td>/n<td><tt><b>array (</b>&lt;discrete_type&gt; <b>range &lt;&gt;) of</b> &lt;type&gt;</tt></td>/n<td><tt><b>array (</b>&lt;discrete_type<sub>1</sub>&gt; <b>range &lt;&gt;,</b> &lt;discrete_type<sub>2</sub>&gt; <b>range &lt;&gt;,</b> ...<b>) of</b> &lt;type&gt;</tt></td>/n</tr>/n<tr valign="top">/n<td>ALGOL 68</td>/n<td><tt>[<i>first</i>:<i>last</i>]<b><wbr />«modename»</b></tt><br />/nor simply:<br />/n<tt>[<i>size</i>]<b><wbr />«modename»</b></tt></td>/n<td><tt>[<i>first<sub>1</sub></i>:<i>last<sub>1</sub></i>, <i>first<sub>2</sub></i>:<i>last<sub>2</sub></i>]<b><wbr />«modename»</b></tt><br />/nor<br />/n<tt>[<i>first<sub>1</sub></i>:<i>last<sub>1</sub></i>][<i>first<sub>2</sub></i>:<i>last<sub>2</sub></i>]<b><wbr />«modename»</b></tt><br />/netc.</td>/n<td><tt><b>flex</b>[<i>first</i>:<i>last</i>]<b><wbr />«modename»</b></tt><br />/nor simply:<br />/n<tt><b>flex</b>[<i>size</i>]<b><wbr />«modename»</b></tt></td>/n<td><tt><b>flex</b>[<i>first<sub>1</sub></i>:<i>last<sub>1</sub></i>, <i>first<sub>2</sub></i>:<i>last<sub>2</sub></i>]<b><wbr />«modename»</b></tt><br />/nor<br />/n<tt><b>flex</b>[<i>first<sub>1</sub></i>:<i>last<sub>1</sub></i>]<wbr /><b>flex</b>[<i>first<sub>2</sub></i>:<i>last<sub>2</sub></i>]<b><wbr />«modename»</b> etc.</tt></td>/n</tr>/n<tr valign="top">/n<td>C (C99)</td>/n<td><tt>type name<b>[</b>size<b>]</b><sup class="reference plainlinks nourlexpansion" id="ref_C.27s_array"><a href="#endnote_C.27s_array">[a]</a></sup></tt></td>/n<td><tt>type name<b>[</b>size<sub>1</sub><b>][</b>size<sub>2</sub><b>]</b><sup class="reference plainlinks nourlexpansion" id="ref_C.27s_array"><a href="#endnote_C.27s_array">[a]</a></sup></tt></td>/n<td><tt>type <b>*</b>name</tt><br />/nor within a block:<br />/n<tt>int n = ...; type name<b>[</b>n<b>]</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>C++ (STL)</td>/n<td colspan="1"><tt><b><a href="/wiki/Std::array" class="mw-redirect" title="Std::array">«std::»array</a>&lt;</b>type, size<b>&gt;</b></tt>(C++11)</td>/n<td></td>/n<td colspan="2"><tt><b><a href="/wiki/Std::vector" class="mw-redirect" title="Std::vector">«std::»vector</a>&lt;</b>type<b>&gt;</b></tt></td>/n</tr>/n<tr valign="top">/n<td>C#</td>/n<td><tt>type<b>[]</b></tt></td>/n<td><tt>type<b>[,,</b>...<b>]</b></tt></td>/n<td><tt><b>System<wbr />.Collections<wbr />.ArrayList</b><br />/nor<br />/n<b>System<wbr />.Collections<wbr />.Generic<wbr />.List<wbr />&lt;</b>type<b>&gt;</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Java</td>/n<td><tt>type<b>[]</b><sup class="reference plainlinks nourlexpansion" id="ref_Java.27s_array"><a href="#endnote_Java.27s_array">[b]</a></sup></tt></td>/n<td><tt>type<b>[][]</b>...<sup class="reference plainlinks nourlexpansion" id="ref_Java.27s_array"><a href="#endnote_Java.27s_array">[b]</a></sup></tt></td>/n<td><tt><b>ArrayList</b> or <b>ArrayList&lt;</b>type<b>&gt;</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>D</td>/n<td><tt>type<b>[</b>size<b>]</b></tt></td>/n<td><tt>type<b>[</b>size<sub>1</sub><b>][</b>size<sub>2</sub><b>]</b></tt></td>/n<td><tt>type<b>[]</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Go</td>/n<td><tt><b>[</b>size<b>]</b>type</tt></td>/n<td><tt><b>[</b>size<sub>1</sub><b>][</b>size<sub>2</sub><b>]</b>...type</tt></td>/n<td><tt><b>[]type</b></tt></td>/n<td><tt><b>[][]type</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Swift</td>/n<td></td>/n<td></td>/n<td><tt><b>[</b>type<b>]</b></tt> or <tt><b>Array&lt;</b>type<b>&gt;</b></tt></td>/n<td><tt><b>[[</b>type<b>]]</b></tt> or <tt><b>Array&lt;Array&lt;</b>type<b>&gt;&gt;</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Objective-C</td>/n<td><tt><b>NSArray</b></tt></td>/n<td></td>/n<td><tt><b>NSMutableArray</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>JavaScript</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td colspan="2"><tt><b>Array</b></tt><sup class="reference plainlinks nourlexpansion" id="ref_JavaScript.27s_array"><a href="#endnote_JavaScript.27s_array">[d]</a></sup></td>/n</tr>/n<tr valign="top">/n<td>Common Lisp</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Scheme</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>ISLISP</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Pascal</td>/n<td rowspan="2"><tt><b>array[</b>first<b>..</b>last<b>] of</b> type<sup class="reference plainlinks nourlexpansion" id="ref_subrange"><a href="#endnote_subrange">[c]</a></sup></tt></td>/n<td rowspan="2"><tt><b>array[</b>first<sub>1</sub><b>..</b>last<sub>1</sub><b>] of array[</b>first<sub>2</sub><b>..</b>last<sub>2</sub><b>]</b> ... <b>of</b> type <sup class="reference plainlinks nourlexpansion" id="ref_subrange"><a href="#endnote_subrange">[c]</a></sup><br /></tt>/n<p>or<br />/n<tt><b>array[</b>first<sub>1</sub><b>..</b>last<sub>1</sub><b>,</b> first<sub>2</sub><b>..</b>last<sub>2</sub><b>,</b> ...<b>] of</b> type</tt> <sup class="reference plainlinks nourlexpansion" id="ref_subrange"><a href="#endnote_subrange">[c]</a></sup></p>/n</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td>Object Pascal (Delphi)</td>/n<td><tt><b>array of</b> type</tt></td>/n<td><tt><b>array of array</b> ... <b>of</b> type</tt></td>/n</tr>/n<tr valign="top">/n<td>Visual Basic</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Visual Basic .NET</td>/n<td></td>/n<td></td>/n<td><tt><b>System<wbr />.Collections<wbr />.ArrayList</b><br />/nor<br />/n<b>System<wbr />.Collections<wbr />.Generic<wbr />.List<wbr />(Of</b> type<b>)</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Python</td>/n<td></td>/n<td></td>/n<td><tt><b>list</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>S-Lang</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Fortran</td>/n<td><tt>type<b>&#160;::</b> name<b>(</b>size<b>)</b></tt></td>/n<td><tt>type<b>&#160;::</b> name<b>(</b>size<b><sub>1</sub>,</b> size<b><sub>2</sub>,...)</b></tt></td>/n<td><tt>type<b>, ALLOCATABLE&#160;::</b> name<b>(:)</b></tt></td>/n<td><tt>type<b>, ALLOCATABLE&#160;::</b> name<b>(:,:,...)</b></tt></td>/n</tr>/n<tr valign="top">/n<td>PHP</td>/n<td></td>/n<td></td>/n<td><tt><b>array</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Perl</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Perl 6</td>/n<td></td>/n<td></td>/n<td><tt><b>Array[</b>type<b>]</b> or <b>Array of</b> type</tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Ruby</td>/n<td></td>/n<td></td>/n<td><tt><b>Array</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Scala</td>/n<td><tt><b>Array[</b>type<b>]</b></tt></td>/n<td><tt><b>Array[</b>...<b>[Array[</b>type<b>]]</b>...<b>]</b></tt></td>/n<td><tt><b>ArrayBuffer[</b>type<b>]</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Seed7</td>/n<td><tt><b>array</b> type<br />/nor<br />/n<b>array [</b>idxType<b>]</b> type</tt></td>/n<td><tt><b>array array</b> type<br />/nor<br />/n<b>array [</b>idxType<b>] array [</b>idxType<b>]</b> type</tt></td>/n<td><tt><b>array</b> type<br />/nor<br />/n<b>array [</b>idxType<b>]</b> type</tt></td>/n<td><tt><b>array array</b> type<br />/nor<br />/n<b>array [</b>idxType<b>] array [</b>idxType<b>]</b> type</tt></td>/n</tr>/n<tr valign="top">/n<td>Smalltalk</td>/n<td><tt><b>Array</b></tt></td>/n<td></td>/n<td><tt><b>OrderedCollection</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Windows PowerShell</td>/n<td><tt>type<b>[]</b></tt></td>/n<td><tt>type<b>[,,</b>...<b>]</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>OCaml</td>/n<td><tt>type <b>array</b></tt></td>/n<td><tt>type <b>array</b> ... <b>array</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>F#</td>/n<td><tt>type <b>[]</b> or type <b>array</b></tt></td>/n<td><tt>type <b>[,,</b>...<b>]</b></tt></td>/n<td><tt><b>System<wbr />.Collections<wbr />.ArrayList</b><br />/nor<br />/n<b>System<wbr />.Collections<wbr />.Generic<wbr />.List<wbr />&lt;</b>type<b>&gt;</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Standard ML</td>/n<td><tt>type <b>vector</b> or type <b>array</b></tt></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Haskell (GHC)</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>COBOL</td>/n<td><tt>level-number type <b>OCCURS</b> size «<b>TIMES</b>»<b>.</b></tt></td>/n<td><tt>one-dimensional array definition...</tt></td>/n<td><tt>level-number type <b>OCCURS</b> min-size <b>TO</b> max-size «<b>TIMES</b>» <b>DEPENDING</b> «<b>ON</b>» size<b>.</b></tt><sup class="reference plainlinks nourlexpansion" id="ref_COBOL_DEPENDING_ON_clause"><a href="#endnote_COBOL_DEPENDING_ON_clause">[e]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_C.27s_array"><b><a href="#ref_C.27s_array">^a</a></b></span> In most expressions (except the <tt>sizeof</tt> and <tt>&amp;</tt> operators), values of array types in C are automatically converted to a pointer of its first argument. See <a href="/wiki/C_syntax#Arrays" title="C syntax">C syntax#Arrays</a> for further details of syntax and pointer operations.<br />/n<span class="citation wikicite" id="endnote_Java.27s_array"><b><a href="#ref_Java.27s_array">^b</a></b></span> The C-like "type <b><tt>x[]</tt></b>" works in Java, however "type<b><tt>[] x</tt></b>" is the preferred form of array declaration.<br />/n<span class="citation wikicite" id="endnote_subrange"><b><a href="#ref_subrange">^c</a></b></span> Subranges are used to define the bounds of the array.<br />/n<span class="citation wikicite" id="endnote_JavaScript.27s_array"><b><a href="#ref_JavaScript.27s_array">^d</a></b></span> JavaScript's array are a special kind of object.<br />/n<span class="citation wikicite" id="endnote_COBOL_DEPENDING_ON_clause"><b><a href="#ref_COBOL_DEPENDING_ON_clause">^e</a></b></span> The <code>DEPENDING ON</code> clause in COBOL does not create a 'true' variable length array and will always allocate the maximum size of the array.</p>/n<h3><span class="mw-headline" id="Other_types">Other types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=9" title="Edit section: Other types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="wikitable">/n<tr>/n<th rowspan="2"></th>/n<th colspan="2">Simple composite types</th>/n<th rowspan="2"><a href="/wiki/Algebraic_data_type" title="Algebraic data type">Algebraic data types</a></th>/n<th rowspan="2"><a href="/wiki/Union_(computer_science)" class="mw-redirect" title="Union (computer science)">Unions</a></th>/n</tr>/n<tr>/n<th><a href="/wiki/Record_(computer_science)" title="Record (computer science)">Records</a></th>/n<th><a href="/wiki/Tuple" title="Tuple">Tuple</a> expression</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-5" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><b>type</b> identifier <b>is</b> «<b>abstract</b>» «<b>tagged</b>» «<b>limited</b>» [<b>record</b></tt>/n<dl>/n<dd><tt>fieldname<sub>1</sub> <b>:</b> type<b>;</b></tt></dd>/n<dd><tt>fieldname<sub>2</sub> <b>:</b> type<b>;</b></tt></dd>/n</dl>/n<tt>...<br /></tt>/n<p><tt><b>end record</b> | <b>null record</b>]</tt></p>/n</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td>Any combination of records, unions and enumerations (as well as references to those, enabling recursive types).</td>/n<td><tt><b>type</b> identifier <b>(</b>variation <b>:</b> discrete_type<b>) is record</b></tt>/n<dl>/n<dd><tt><b>case</b> variation <b>is</b></tt>/n<dl>/n<dd><tt><b>when</b> choice_list<sub>1</sub> <b>=&gt;</b></tt>/n<dl>/n<dd><tt>fieldname<sub>1</sub> <b>:</b> type<b>;</b></tt></dd>/n<dd><tt>...</tt></dd>/n</dl>/n</dd>/n</dl>/n<dl>/n<dd><tt><b>when</b> choice_list<sub>2</sub> <b>=&gt;</b></tt>/n<dl>/n<dd><tt>fieldname<sub>2</sub> <b>:</b> type<b>;</b></tt></dd>/n<dd><tt>...</tt></dd>/n</dl>/n</dd>/n</dl>/n<dl>/n<dd><tt>...</tt></dd>/n</dl>/n<tt><b>end case;</b></tt></dd>/n</dl>/n<tt><b>end record</b></tt></td>/n</tr>/n<tr>/n<td>ALGOL 68</td>/n<td><tt><b>struct</b> (<b>modename</b> <i>«fieldname»</i>, <b>...</b>);</tt></td>/n<td colspan="2" align="center">Required types and operators can be <a href="/wiki/User-defined_function" title="User-defined function">user defined</a></td>/n<td><tt><b>union</b> (<b>modename</b>, <b>...</b>);</tt></td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td rowspan="2"><tt><b>struct</b> «name» <b>{</b>type name<b>;</b>...<b>};</b></tt></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="3" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="3"><tt><b>union {</b>type name<b>;</b>...<b>};</b></tt></td>/n</tr>/n<tr>/n<td>Objective-C</td>/n</tr>/n<tr>/n<td>C++</td>/n<td><tt><b>struct</b> «name» <b>{</b>type name<b>;</b>...<b>};</b><sup class="reference plainlinks nourlexpansion" id="ref_C.2B.2B.27s_struct"><a href="#endnote_C.2B.2B.27s_struct">[b]</a></sup></tt></td>/n<td><tt><a href="/wiki/C%2B%2B11#Tuple_types" title="C++11">«std::»tuple</a>&lt;type<sub>1</sub>..type<sub>n</sub>&gt;</tt></td>/n</tr>/n<tr>/n<td>C#</td>/n<td><tt><b>struct</b> name <b>{</b>type name<b>;</b>...<b>}</b></tt></td>/n<td></td>/n<td></td>/n<td rowspan="3" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Java</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_just_classes"><a href="#endnote_just_classes">[a]</a></sup></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>JavaScript</td>/n<td></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt><b>struct</b> name <b>{</b>type name<b>;</b>...<b>}</b></tt></td>/n<td></td>/n<td><tt><b>std.variant.Algebraic</b>!(type,...)</tt></td>/n<td><tt><b>union {</b>type name<b>;</b>...<b>}</b></tt></td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt><b>struct {</b></tt>/n<dl>/n<dd><tt>«name» type<b><br /></b>...</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt><b>struct</b> name <b>{</b></tt>/n<dl>/n<dd><tt><b>var</b> name «<b>:</b> type»<b><br /></b>...</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n<td><tt><b>(</b>«name<sub>1</sub><b>:</b>» val<sub>1</sub><b>,</b> «name<sub>2</sub><b>:</b>» val<sub>2</sub><b>,</b> «name<sub>3</sub><b>:</b>» val<sub>3</sub><b>,</b> ... <b>)</b></tt></td>/n<td><tt><b>enum</b> name <b>{ case</b> Foo«<b>(</b>types<b>)</b>» <b>case</b> Bar «<b>(</b>types<b>)</b>» ... <b>}</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td></td>/n<td rowspan="3"><tt><b>(cons</b> val<sub>1</sub> val<sub>2</sub><b>)</b><sup class="reference plainlinks nourlexpansion" id="ref_pair_only"><a href="#endnote_pair_only">[c]</a></sup></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Pascal</td>/n<td><tt><b>record</b></tt>/n<dl>/n<dd><tt>name<b>:</b> type<b>;</b><br />/n...</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>record</b></tt>/n<dl>/n<dd><tt><b>case</b> type <b>of</b><br />/nvalue<b>: (</b>types<b>);</b><br />/n...</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td><tt><b>Structure</b> name</tt>/n<dl>/n<dd><tt><b>Dim</b> name <b>As</b> type<br />/n...</tt></dd>/n</dl>/n<tt><b>End Structure</b></tt></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Python</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_just_classes"><a href="#endnote_just_classes">[a]</a></sup></td>/n<td><tt>«<b>(</b>»val<sub>1</sub><b>,</b> val<sub>2</sub><b>,</b> val<sub>3</sub><b>,</b> ... «<b>)</b>»</tt></td>/n<td></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt><b>struct {</b>name [=value], ...<b>}</b></tt></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td><b>TYPE</b> name/n<dl>/n<dd>type<b>&#160;::</b> name<br />/n...</dd>/n</dl>/n<b>END TYPE</b></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_just_classes"><a href="#endnote_just_classes">[a]</a></sup></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Perl</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_Perl.27s_records"><a href="#endnote_Perl.27s_records">[d]</a></sup></td>/n<td></td>/n<td></td>/n<td rowspan="3" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A<sup class="reference plainlinks nourlexpansion" id="ref_just_classes"><a href="#endnote_just_classes">[a]</a></sup></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><code class="mw-highlight" id="" style="" dir="ltr"><span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">})</span></code></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Scala</td>/n<td><tt><b>case class</b> name<b>(</b>«<b>var</b>» name<b>:</b> type<b>,</b> ...<b>)</b></tt></td>/n<td><tt><b>(</b>val<sub>1</sub><b>,</b> val<sub>2</sub><b>,</b> val<sub>3</sub><b>,</b> ... <b>)</b></tt></td>/n<td><tt><b>abstract class</b> name<br /></tt>/n<p><tt><b>case class</b> Foo<b>(</b>«parameters»<b>) extends</b> name<br />/n<b>case class</b> Bar<b>(</b>«parameters»<b>) extends</b> name<br />/n...<br /></tt> or<br />/n<tt><b>abstract class</b> name<br />/n<b>case object</b> Foo <b>extends</b> name<br />/n<b>case object</b> Bar <b>extends</b> name<br />/n...<br /></tt> or combination of case classes and case objects</p>/n</td>/n<td></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td rowspan="2"><tt><b>type</b> name <b>= {</b>«<b>mutable</b>» name <b>:</b> type<b>;</b>...<b>}</b></tt></td>/n<td rowspan="2"><tt>«<b>(</b>»val<sub>1</sub><b>,</b> val<sub>2</sub><b>,</b> val<sub>3</sub><b>,</b> ... «<b>)</b>»</tt></td>/n<td rowspan="2"><tt><b>type</b> name <b>=</b> Foo «<b>of</b> type» <b>|</b> Bar «<b>of</b> type» <b>|</b> ...</tt></td>/n<td rowspan="4" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>F#</td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td><tt><b>type</b> name <b>= {</b>name <b>:</b> type<b>,</b>...<b>}</b></tt></td>/n<td rowspan="2"><tt><b>(</b>val<sub>1</sub><b>,</b> val<sub>2</sub><b>,</b> val<sub>3</sub><b>,</b> ... <b>)</b></tt></td>/n<td><tt><b>datatype</b> name <b>=</b> Foo «<b>of</b> type» <b>|</b> Bar «<b>of</b> type» <b>|</b> ...</tt></td>/n</tr>/n<tr>/n<td>Haskell</td>/n<td><tt><b>data</b> Name <b>=</b> Constr <b>{</b>name <b>::</b> type<b>,</b>...<b>}</b></tt></td>/n<td><tt><b>data</b> Name <b>=</b> Foo «types» <b>|</b> Bar «types» <b>|</b> ...</tt></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td><tt>level-number name type clauses<b>.</b><br /></tt>/n<p><tt>&#160;&#160;level-number+n name type clauses<b>.</b><br />/n&#160;&#160;...</tt></p>/n</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>name <b>REDEFINES</b> variable type<b>.</b></tt></td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_just_classes"><b><a href="#ref_just_classes">^a</a></b></span> Only classes are supported.<br />/n<span class="citation wikicite" id="endnote_C.2B.2B.27s_struct"><b><a href="#ref_C.2B.2B.27s_struct">^b</a></b></span> <code>struct</code>s in C++ are actually classes, but have default public visibility and <i>are</i> also <a href="/wiki/Plain_old_data_structure" class="mw-redirect" title="Plain old data structure">POD</a> objects. C++11 extended this further, to make classes act identically to POD objects in many more cases.<br />/n<span class="citation wikicite" id="endnote_pair_only"><b><a href="#ref_pair_only">^c</a></b></span> pair only<br />/n<span class="citation wikicite" id="endnote_Perl.27s_records"><b><a href="#ref_Perl.27s_records">^d</a></b></span> Although Perl doesn't have records, because Perl's type system allows different data types to be in an array, "hashes" (associative arrays) that don't have a variable index would effectively be the same as records.<br />/n<span class="citation wikicite" id="endnote_enum"><b><a href="#ref_enum">^e</a></b></span> Enumerations in this language are algebraic types with only nullary constructors</p>/n<h2><span class="mw-headline" id="Variable_and_constant_declarations">Variable and constant declarations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=10" title="Edit section: Variable and constant declarations">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<table class="wikitable">/n<tr>/n<th></th>/n<th>variable</th>/n<th>constant</th>/n<th>type synonym</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-6" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt>identifier <b>:</b> type «<b>:=</b> initial_value»<sup class="reference plainlinks nourlexpansion" id="ref_Ada_declaration"><a href="#endnote_Ada_declaration">[e]</a></sup></tt></td>/n<td><tt>identifier <b>: constant</b> type <b>:=</b> final_value</tt></td>/n<td><tt><b>subtype</b> identifier <b>is</b> type</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a></td>/n<td><tt><b>modename</b> <i>name</i> «<b>:=</b> initial_value»;</tt></td>/n<td><tt><b>modename</b> <i>name</i> <b>=</b> value;</tt></td>/n<td><tt><b><a href="/wiki/Typedef" title="Typedef">mode</a></b> <b>synonym</b> = <b>modename</b>;</tt></td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td rowspan="3"><tt>type name «<b>=</b> initial_value»<b>;</b></tt></td>/n<td rowspan="2"><tt><b>enum{</b> name <b>=</b> value <b>};</b></tt></td>/n<td rowspan="3"><tt><b><a href="/wiki/Typedef" title="Typedef">typedef</a></b> type synonym<b>;</b></tt></td>/n</tr>/n<tr>/n<td>Objective-C</td>/n</tr>/n<tr>/n<td>C++</td>/n<td><tt><b>const</b> type name <b>=</b> value<b>;</b></tt></td>/n</tr>/n<tr>/n<td>C#</td>/n<td><tt>type name «<b>=</b> initial_value»<b>;</b> or<br />/n<b>var</b> name <b>=</b> value<b>;</b></tt></td>/n<td><tt><b>const</b> type name <b>=</b> value<b>;</b> or<br />/n<b>readonly</b> type name <b>=</b> value<b>;</b></tt></td>/n<td><tt><b>using</b> synonym <b>=</b> type<b>;</b></tt></td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt>type name «<b>=</b> initial_value»<b>;</b> or<br />/n<b>auto</b> name <b>=</b> value<b>;</b></tt></td>/n<td><tt><b>const</b> type name <b>=</b> value<b>;</b> or<br />/n<b>immutable</b> type name <b>=</b> value<b>;</b></tt></td>/n<td><tt><b>alias</b> type synonym<b>;</b></tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td><tt>type name «<b>=</b> initial_value»<b>;</b></tt></td>/n<td><tt><b>final</b> type name <b>=</b> value<b>;</b></tt></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>JavaScript</td>/n<td><tt><b>var</b> name «<b>=</b> initial_value»<b>;</b></tt></td>/n<td><tt><b>const</b> name <b>=</b> value<b>;</b></tt></td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt><b>var</b> name type «<b>=</b> initial_value» or<br />/nname <b>:=</b> initial_value</tt></td>/n<td><tt><b>const</b> name «type» <b>=</b> value</tt></td>/n<td><tt><b>type</b> synonym type</tt></td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt><b>var</b> name «<b>:</b> type» «<b>=</b> initial_value»</tt></td>/n<td><tt><b>let</b> name «<b>:</b> type» <b>=</b> value</tt></td>/n<td><tt><b>typealias</b> synonym <b>=</b> type</tt></td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td><tt><b>(defparameter</b> name initial_value<b>)</b> or<br />/n<b>(defvar</b> name initial_value<b>)</b> or<br />/n<b>(setf (symbol-value '</b>symbol<b>)</b> initial_value<b>)</b></tt></td>/n<td><tt><b>(defconstant</b> name value<b>)</b></tt></td>/n<td><tt><b>(deftype</b> synonym <b>() '</b>type<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td><tt><b>(define</b> name initial_value<b>)</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td><tt><b>(defglobal</b> name initial_value<b>)</b> or<br />/n<b>(defdynamic</b> name initial_value<b>)</b></tt></td>/n<td><tt><b>(defconstant</b> name value<b>)</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><tt>Pascal<sup class="reference plainlinks nourlexpansion" id="ref_Pascal.27s_declarations"><a href="#endnote_Pascal.27s_declarations">[a]</a></sup></tt></td>/n<td><tt>name<b>:</b> type «<b>=</b> initial_value»</tt></td>/n<td><tt>name <b>=</b> value</tt></td>/n<td><tt>synonym <b>=</b> type</tt></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td><tt><b>Dim</b> name <b>As</b> type</tt></td>/n<td rowspan="3"><tt><b>Const</b> name <b>As</b> type <b>=</b> value</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td><tt><b>Dim</b> name <b>As</b> type«<b>=</b> initial_value»</tt></td>/n<td><tt><b>Imports</b> synonym <b>=</b> type</tt></td>/n</tr>/n<tr>/n<td>Xojo</td>/n<td><tt><b>Dim</b> name <b>As</b> type«<b>=</b> initial_value»</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Python</td>/n<td rowspan="2"><tt>name <b>=</b> initial_value</tt></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>synonym <b>=</b> type<sup class="reference plainlinks nourlexpansion" id="ref_variable_types"><a href="#endnote_variable_types">[b]</a></sup></tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/CoffeeScript" title="CoffeeScript">CoffeeScript</a></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt>name <b>=</b> initial_value<b>;</b></tt></td>/n<td></td>/n<td><tt><b>typedef struct {...}</b> typename</tt></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td>type name</td>/n<td><tt>type<b>, PARAMETER&#160;::</b> name <b>=</b> value</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td><tt><b>$</b>name <b>=</b> initial_value<b>;</b></tt></td>/n<td><tt><b>define("</b>name<b>",</b> value<b>);</b><br />/n<b>const</b> name <b>=</b> value (5.3+)</tt></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Perl</td>/n<td><tt>«<b>my</b>» <b>$</b>name «<b>=</b> initial_value<b>»;</b><sup class="reference plainlinks nourlexpansion" id="ref_Perl.27s_my_keyword"><a href="#endnote_Perl.27s_my_keyword">[c]</a></sup></tt></td>/n<td><tt><b>use constant</b> name <b>=&gt;</b> value<b>;</b></tt></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td><tt>«<b>my</b> «type»» $name «<b>=</b> initial_value<b>»;</b><sup class="reference plainlinks nourlexpansion" id="ref_Perl.27s_my_keyword"><a href="#endnote_Perl.27s_my_keyword">[c]</a></sup></tt></td>/n<td><tt>«<b>my</b> «type»» <b>constant</b> name <b>=</b> value<b>;</b></tt></td>/n<td><tt><b>::</b>synonym <b>::=</b> type</tt></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><tt>name <b>=</b> initial_value</tt></td>/n<td><tt>Name <b>=</b> value</tt></td>/n<td><tt>synonym <b>=</b> type<sup class="reference plainlinks nourlexpansion" id="ref_variable_types"><a href="#endnote_variable_types">[b]</a></sup></tt></td>/n</tr>/n<tr>/n<td>Scala</td>/n<td><tt><b>var</b> name«<b>:</b> type» <b>=</b> initial_value</tt></td>/n<td><tt><b>val</b> name«<b>:</b> type» <b>=</b> value</tt></td>/n<td><tt><b>type</b> synonym <b>=</b> type</tt></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td><tt>«<b>[</b>type<b>]</b>» <b>$</b>name <b>=</b> initial_value</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Bash shell</td>/n<td><tt>name<b>=</b>initial_value</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td><tt><b>let</b> name «<b>:</b> type <b>ref</b>» <b>= ref</b> value<sup class="reference plainlinks nourlexpansion" id="ref_ML_ref"><a href="#endnote_ML_ref">[d]</a></sup></tt></td>/n<td rowspan="2"><tt><b>let</b> name «<b>:</b> type» <b>=</b> value</tt></td>/n<td rowspan="3"><tt><b>type</b> synonym <b>=</b> type</tt></td>/n</tr>/n<tr>/n<td>F#</td>/n<td><tt><b>let mutable</b> name «<b>:</b> type» <b>=</b> value</tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td><tt><b>val</b> name «<b>:</b> type <b>ref</b>» <b>= ref</b> value<sup class="reference plainlinks nourlexpansion" id="ref_ML_ref"><a href="#endnote_ML_ref">[d]</a></sup></tt></td>/n<td><tt><b>val</b> name «<b>:</b> type» <b>=</b> value</tt></td>/n</tr>/n<tr>/n<td>Haskell</td>/n<td></td>/n<td><tt>«name<b>::</b>type<b>;</b>» name <b>=</b> value</tt></td>/n<td><tt><b>type</b> Synonym <b>=</b> type</tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a></td>/n<td><tt><b>VARIABLE</b> name</tt> (in some systems use <tt>value <b>VARIABLE</b> name</tt> instead)</td>/n<td><tt>value <b>CONSTANT</b> name</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td><tt>level-number name type clauses<b>.</b></tt></td>/n<td><tt>«<b>0</b>»<b>1</b> name <b>CONSTANT</b> «<b>AS</b>» value<b>.</b></tt></td>/n<td><tt>level-number name type clauses «<b>IS</b>» <b>TYPEDEF.</b></tt></td>/n</tr>/n<tr>/n<td>Mathematica</td>/n<td><tt>name<b>=</b>initialvalue</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_Pascal.27s_declarations"><b><a href="#ref_Pascal.27s_declarations">^a</a></b></span> Pascal has declaration blocks. See <a href="/wiki/Comparison_of_programming_languages_(basic_instructions)#Functions" title="Comparison of programming languages (basic instructions)">Comparison of programming languages (basic instructions)#Functions</a>.<br />/n<span class="citation wikicite" id="endnote_variable_types"><b><a href="#ref_variable_types">^b</a></b></span> Types are just regular objects, so you can just assign them.<br />/n<span class="citation wikicite" id="endnote_Perl.27s_my_keyword"><b><a href="#ref_Perl.27s_my_keyword">^c</a></b></span> In Perl, the "my" keyword scopes the variable into the block.<br />/n<span class="citation wikicite" id="endnote_ML_ref"><b><a href="#ref_ML_ref">^d</a></b></span> Technically, this does not declare <i>name</i> to be a mutable variable—in ML, all names can only be bound once; rather, it declares <i>name</i> to point to a "reference" data structure, which is a simple mutable cell. The data structure can then be read and written to using the <tt>!</tt> and <tt>:=</tt> operators, respectively.<br />/n<span class="citation wikicite" id="endnote_Ada_declaration"><b><a href="#ref_Ada_declaration">^[e]</a></b></span> If no initial value is given, an invalid value is automatically assigned (which will trigger a run-time exception if it used before a valid value has been assigned). While this behaviour can be suppressed it is recommended in the interest of predictability. If no invalid value can be found for a type (for example in case of an unconstraint integer type), a valid, yet predictable value is chosen instead.</p>/n<h2><span class="mw-headline" id="Control_flow"><a href="/wiki/Control_flow" title="Control flow">Control flow</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=11" title="Edit section: Control flow">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<h3><span class="mw-headline" id="Conditional_statements"><a href="/wiki/Conditional_(programming)" class="mw-redirect" title="Conditional (programming)">Conditional</a> statements</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=12" title="Edit section: Conditional statements">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="wikitable">/n<tr valign="top">/n<th></th>/n<th>if</th>/n<th>else if</th>/n<th><a href="/wiki/Switch_statement" title="Switch statement">select case</a></th>/n<th><a href="/wiki/Conditional_(programming)#If_expressions" class="mw-redirect" title="Conditional (programming)">conditional expression</a></th>/n</tr>/n<tr valign="top">/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-7" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td rowspan="2"><tt><b>if</b> condition <b>then</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt>«<b>else</b></tt>/n<dl>/n<dd><tt>statements»</tt></dd>/n</dl>/n<tt><b>end if</b></tt></td>/n<td rowspan="2"><tt><b>if</b> condition<sub>1</sub> <b>then</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt><b>elsif</b> condition<sub>2</sub> <b>then</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt>...<br />/n«<b>else</b></tt>/n<dl>/n<dd><tt>statements»</tt></dd>/n</dl>/n<tt><b>end if</b></tt></td>/n<td><tt><b>case</b> expression <b>is</b></tt>/n<dl>/n<dd><tt><b>when</b> value_list<sub>1</sub> <b>=&gt;</b> statements</tt></dd>/n<dd><tt><b>when</b> value_list<sub>2</sub> <b>=&gt;</b> statements</tt></dd>/n</dl>/n<tt>...</tt>/n<dl>/n<dd><tt>«<b>when others =&gt;</b> statements»</tt></dd>/n</dl>/n<tt><b>end case</b></tt></td>/n<td><tt><b>(if</b> condition<sub>1</sub> <b>then</b></tt>/n<dl>/n<dd><tt>expression<sub>1</sub></tt></dd>/n</dl>/n<tt>«<b>elsif</b> condition<sub>2</sub> <b>then</b></tt>/n<dl>/n<dd><tt>expression<sub>2</sub>»</tt></dd>/n</dl>/n<tt>...<br />/n<b>else</b></tt>/n<dl>/n<dd><tt>expression<sub>n</sub></tt></dd>/n</dl>/n<tt><b>)</b><br />/n<b>(case</b> expression <b>is</b></tt>/n<dl>/n<dd><tt><b>when</b> value_list<sub>1</sub> <b>=&gt;</b> expression<sub>1</sub></tt></dd>/n<dd><tt><b>when</b> value_list<sub>2</sub> <b>=&gt;</b> expression<sub>2</sub></tt></dd>/n</dl>/n<tt>...</tt>/n<dl>/n<dd><tt>«<b>when others =&gt;</b> expression<sub>n</sub>»</tt></dd>/n</dl>/n<tt><b>)</b></tt></td>/n</tr>/n<tr valign="top">/n<td><a href="/wiki/Seed7" title="Seed7">Seed7</a></td>/n<td><tt><b>case</b> expression <b>of</b><br />/n<b>when</b> set1 <b>:</b> statements<br />/n...<br />/n«<b>otherwise:</b> statements»<br />/n<b>end case</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td><a href="/wiki/Modula-2" title="Modula-2">Modula-2</a></td>/n<td><tt><b>if</b> condition <b>then</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt>«<b>else</b></tt>/n<dl>/n<dd><tt>statements»</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td><tt><b>if</b> condition<sub>1</sub> <b>then</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt><b>elsif</b> condition<sub>2</sub> <b>then</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt>...<br />/n«<b>else</b></tt>/n<dl>/n<dd><tt>statements»</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td rowspan="1"><tt><b>case</b> expression <b>of</b><br />/ncaseLabelList <b>:</b> statements <b>|</b><br />/n...<br />/n«<b>else</b> statements»<br />/n<b>end</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td rowspan="2"><a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a> &amp; "brief form"</td>/n<td><tt><b>if</b> condition <b>then</b> statements «<b>else</b> statements» <b>fi</b></tt></td>/n<td><tt><b>if</b> condition <b>then</b> statements <b>elif</b> condition <b>then</b> statements <b>fi</b></tt></td>/n<td><tt><b>case</b> switch <b>in</b> statements, statements«,... <b>out</b> statements» <b>esac</b></tt></td>/n<td rowspan="2">/n<pre>/n( condition | valueIfTrue | valueIfFalse )/n</pre></td>/n</tr>/n<tr valign="top">/n<td>/n<pre>/n( condition | statements «| statements» )/n</pre></td>/n<td>/n<pre>/n( condition | statements |: condition |  statements )/n</pre></td>/n<td>/n<pre>/n( variable | statements,... «| statements» )/n</pre></td>/n</tr>/n<tr valign="top">/n<td>C (C99)</td>/n<td rowspan="9"><tt><b>if (</b>condition<b>) {</b>instructions<b>}</b><br />/n«<b>else {</b>instructions<b>}</b>»</tt></td>/n<td rowspan="8"><tt><b>if (</b>condition<b>) {</b>instructions<b>}<br />/nelse if (</b>condition<b>) {</b>instructions<b>}</b><br />/n...<br />/n«<b>else {</b>instructions<b>}</b>»</tt></td>/n<td rowspan="7"><tt><b>switch (</b>variable<b>) {</b></tt>/n<dl>/n<dd><tt><b>case</b> case1<b>:</b> instructions «<b>break;</b>»<br />/n...<br />/n«<b>default:</b> instructions»</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n<td rowspan="8"><tt>condition <b><a href="/wiki/%3F:" title="?:">?</a></b> valueIfTrue <b><a href="/wiki/%3F:" title="?:">:</a></b> valueIfFalse</tt></td>/n</tr>/n<tr valign="top">/n<td>Objective-C</td>/n</tr>/n<tr valign="top">/n<td>C++ (STL)</td>/n</tr>/n<tr valign="top">/n<td>D</td>/n</tr>/n<tr valign="top">/n<td>Java</td>/n</tr>/n<tr valign="top">/n<td>JavaScript</td>/n</tr>/n<tr valign="top">/n<td>PHP</td>/n</tr>/n<tr valign="top">/n<td>C#</td>/n<td><tt><b>switch (</b>variable<b>) {</b></tt>/n<dl>/n<dd><tt><b>case</b> case1<b>:</b> instructions<b>;</b> «jump statement<b>;</b>»<br />/n...<br />/n«<b>default:</b> instructions<b>;</b> «jump statement<b>;</b>»»</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Windows PowerShell</td>/n<td><tt><b>if (</b>condition<b>) {</b> instructions <b>}<br />/nelseif (</b>condition<b>) {</b> instructions <b>}</b><br />/n...<br />/n«<b>else {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>switch (</b>variable<b>) {</b> case1 <b>{</b> instructions «<b>break;</b>» <b>}</b> ... «<b>default {</b> instructions <b>}</b>»<b>}</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Go</td>/n<td><tt><b>if</b> condition <b>{</b>instructions<b>}</b><br />/n«<b>else {</b>instructions<b>}</b>»</tt></td>/n<td><tt><b>if</b> condition <b>{</b>instructions<b>}<br />/nelse if</b> condition <b>{</b>instructions<b>}</b><br />/n...<br />/n«<b>else {</b>instructions<b>}</b>»<br />/nor<br />/n<b>switch {</b></tt>/n<dl>/n<dd><tt><b>case</b> condition<b>:</b> instructions<br />/n...<br />/n«<b>default:</b> instructions»</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n<td><tt><b>switch</b> variable <b>{</b></tt>/n<dl>/n<dd><tt><b>case</b> case1<b>:</b> instructions<br />/n...<br />/n«<b>default:</b> instructions»</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Swift</td>/n<td><tt><b>if</b> condition <b>{</b>instructions<b>}</b><br />/n«<b>else {</b>instructions<b>}</b>»</tt></td>/n<td><tt><b>if</b> condition <b>{</b>instructions<b>}<br />/nelse if</b> condition <b>{</b>instructions<b>}</b><br />/n...<br />/n«<b>else {</b>instructions<b>}</b>»<br /></tt></td>/n<td><tt><b>switch</b> variable <b>{</b></tt>/n<dl>/n<dd><tt><b>case</b> case1<b>:</b> instructions<br />/n...<br />/n«<b>default:</b> instructions»</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Perl</td>/n<td><tt><b>if (</b>condition<b>) {</b>instructions<b>}</b><br />/n«<b>else {</b>instructions<b>}</b>»<br />/nor<br />/n<b>unless (</b>notcondition<b>) {</b>instructions<b>}</b><br />/n«<b>else {</b>instructions<b>}</b>»</tt></td>/n<td><tt><b>if (</b>condition<b>) {</b>instructions<b>}<br />/nelsif (</b>condition<b>) {</b>instructions<b>}</b><br />/n...<br />/n«<b>else {</b>instructions<b>}</b>»<br />/nor<br />/n<b>unless (</b>notcondition<b>) {</b>instructions<b>}<br />/nelsif (</b>condition<b>) {</b>instructions<b>}</b><br />/n...<br />/n«<b>else {</b>instructions<b>}</b>»</tt></td>/n<td><tt><b>use feature "switch";</b><br />/n...<br />/n<b>given (</b>variable<b>) {</b></tt>/n<dl>/n<dd><tt><b>when (</b>case1<b>) {</b> instructions <b>}</b><br />/n...<br />/n«<b>default {</b> instructions <b>}</b>»</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n<td><tt>condition <b><a href="/wiki/%3F:" title="?:">?</a></b> valueIfTrue <b><a href="/wiki/%3F:" title="?:">:</a></b> valueIfFalse</tt></td>/n</tr>/n<tr valign="top">/n<td>Perl 6</td>/n<td><tt><b>if</b> condition <b>{</b>instructions<b>}</b><br />/n«<b>else {</b>instructions<b>}</b>»<br />/nor<br />/n<b>unless</b> notcondition <b>{</b>instructions<b>}</b></tt></td>/n<td><tt><b>if</b> condition <b>{</b>instructions<b>}<br />/nelsif</b> condition <b>{</b>instructions<b>}</b><br />/n...<br />/n«<b>else {</b>instructions<b>}</b></tt></td>/n<td><tt><b>given</b> variable <b>{</b></tt>/n<dl>/n<dd><tt><b>when</b> case1 <b>{</b> instructions <b>}</b><br />/n...<br />/n«<b>default {</b> instructions <b>}</b>»</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n<td><tt>condition <b><a href="/wiki/%3F:" title="?:">??</a></b> valueIfTrue <b>!!</b> valueIfFalse</tt></td>/n</tr>/n<tr valign="top">/n<td>Ruby</td>/n<td><tt><b>if</b> condition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>«<b>else</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n</td>/n<td><tt><b>if</b> condition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>elsif</b> condition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>...<br />/n«<b>else</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td><tt><b>case</b> variable<br />/n<b>when</b> case1<br /></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>...<br />/n«<b>else</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td><tt>condition <b><a href="/wiki/%3F:" title="?:">?</a></b> valueIfTrue <b><a href="/wiki/%3F:" title="?:">:</a></b> valueIfFalse</tt></td>/n</tr>/n<tr valign="top">/n<td>Scala</td>/n<td><tt><b>if (</b>condition<b>) {</b>instructions<b>}</b><br />/n«<b>else {</b>instructions<b>}</b>»</tt></td>/n<td><tt><b>if (</b>condition<b>) {</b>instructions<b>}<br />/nelse if (</b>condition<b>) {</b>instructions<b>}</b><br />/n...<br />/n«<b>else {</b>instructions<b>}</b>»</tt></td>/n<td><tt>expression <b>match {</b></tt>/n<dl>/n<dd><tt><b>case</b> pattern1 <b>=&gt;</b> expression<br />/n<b>case</b> pattern2 <b>=&gt;</b> expression<br />/n...<br />/n«<b>case _ =&gt;</b> expression»</tt></dd>/n</dl>/n<tt><b>}</b><sup class="reference plainlinks nourlexpansion" id="ref_pattern_matching"><a href="#endnote_pattern_matching">[b]</a></sup></tt></td>/n<td><tt><b>if (</b>condition<b>)</b> valueIfTrue <b>else</b> valueIfFalse</tt></td>/n</tr>/n<tr valign="top">/n<td>Smalltalk</td>/n<td><tt>condition <b>ifTrue:</b></tt>/n<dl>/n<dd><tt>trueBlock</tt></dd>/n</dl>/n<tt>«<b>ifFalse:</b></tt>/n<dl>/n<dd><tt>falseBlock»</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td></td>/n<td></td>/n<td><tt>condition <b>ifTrue:</b> trueBlock <b>ifFalse:</b> falseBlock</tt></td>/n</tr>/n<tr valign="top">/n<td>Common Lisp</td>/n<td><tt><b>(when</b> condition<br /></tt>/n<dl>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(unless</b> condition<br /></tt>/n<dl>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(if</b> condition<b><br /></b></tt>/n<dl>/n<dd><tt><b>(progn</b> instructions<b>)</b></tt></dd>/n<dd><tt>«<b>(progn</b> instructions<b>)</b>»<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(cond (</b>condition1 instructions<b>)<br /></b></tt>/n<dl>/n<dd><tt><b>(</b>condition2 instructions<b>)</b></tt></dd>/n<dd><tt>...</tt></dd>/n<dd><tt>«<b>(t</b> instructions<b>)</b>»<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(case</b> expression</tt>/n<dl>/n<dd><tt><b>(</b>case1 instructions<b>)</b></tt></dd>/n<dd><tt><b>(</b>case2 instructions<b>)</b></tt></dd>/n<dd><tt>...</tt></dd>/n<dd><tt>«<b>(otherwise</b> instructions<b>)</b>»<b>)</b></tt></dd>/n</dl>/n</td>/n<td rowspan="2"><tt><b>(if</b> condition valueIfTrue valueIfFalse<b>)</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Scheme</td>/n<td><tt><b>(when</b> conditioninstructions<b>)</b> or<br />/n<b>(if</b> condition <b>(begin</b> instructions<b>)</b> «<b>(begin</b> instructions<b>)</b>»<b>)</b></tt></td>/n<td><tt><b>(cond (</b>condition1 instructions<b>) (</b>condition2 instructions<b>)</b> ... «<b>(else</b> instructions<b>)</b>»<b>)</b></tt></td>/n<td><tt><b>(case (</b>variable<b>) ((</b>case1<b>)</b> instructions<b>) ((</b>case2<b>)</b> instructions<b>)</b> ... «<b>(else</b> instructions<b>)</b>»<b>)</b></tt></td>/n</tr>/n<tr valign="top">/n<td>ISLISP</td>/n<td><tt><b>(if</b> condition<b><br /></b></tt>/n<dl>/n<dd><tt><b>(progn</b> instructions<b>)</b></tt></dd>/n<dd><tt>«<b>(progn</b> instructions<b>)</b>»<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(cond (</b>condition1 instructions<b>)<br /></b></tt>/n<dl>/n<dd><tt><b>(</b>condition2 instructions<b>)</b></tt></dd>/n<dd><tt>...</tt></dd>/n<dd><tt>«<b>(t</b> instructions<b>)</b>»<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(case</b> expression</tt>/n<dl>/n<dd><tt><b>(</b>case1 instructions<b>)</b></tt></dd>/n<dd><tt><b>(</b>case2 instructions<b>)</b></tt></dd>/n<dd><tt>...</tt></dd>/n<dd><tt>«<b>(t</b> instructions<b>)</b>»<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(if</b> condition valueIfTrue valueIfFalse<b>)</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Pascal</td>/n<td><tt><b>if</b> condition <b>then begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b><br />/n«<b>else begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b>»<sup class="reference plainlinks nourlexpansion" id="ref_pascal_semicolon"><a href="#endnote_pascal_semicolon">[c]</a></sup></tt></td>/n<td><tt><b>if</b> condition <b>then begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end<br />/nelse if</b> condition <b>then begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b><br />/n...<br />/n«<b>else begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b>»<sup class="reference plainlinks nourlexpansion" id="ref_pascal_semicolon"><a href="#endnote_pascal_semicolon">[c]</a></sup></tt></td>/n<td><tt><b>case</b> variable <b>of</b></tt>/n<dl>/n<dd><tt>case1<b>:</b> instructions<br />/n...<br />/n«<b>else:</b> instructions»</tt></dd>/n</dl>/n<tt><b>end</b><sup class="reference plainlinks nourlexpansion" id="ref_pascal_semicolon"><a href="#endnote_pascal_semicolon">[c]</a></sup></tt></td>/n</tr>/n<tr valign="top">/n<td>Visual Basic</td>/n<td rowspan="3"><tt><b>If</b> condition <b>Then</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>«<b>Else</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt><b>End If</b></tt></td>/n<td rowspan="3"><tt><b>If</b> condition <b>Then</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>ElseIf</b> condition <b>Then</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>...<br />/n«<b>Else</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt><b>End If</b></tt></td>/n<td rowspan="3"><tt><b>Select Case</b> variable<br />/n<b>Case</b> case1</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>...<br />/n«<b>Case Else</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt><b>End Select</b></tt></td>/n<td><tt><b><a href="/wiki/IIf" title="IIf">IIf</a>(</b>condition<b>,</b> valueIfTrue<b>,</b> valueIfFalse<b>)</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Visual Basic .NET</td>/n<td rowspan="2"><tt><b>If(</b>condition<b>,</b> valueIfTrue<b>,</b> valueIfFalse<b>)</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Xojo</td>/n</tr>/n<tr valign="top">/n<td>Python <sup class="reference plainlinks nourlexpansion" id="ref_python_indent"><a href="#endnote_python_indent">[a]</a></sup></td>/n<td><tt><b>if</b> condition <b>:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n«<b>else:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»</tt></td>/n<td><tt><b>if</b> condition <b>:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n<b>elif</b> condition <b>:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n...<br />/n«<b>else:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»</tt></td>/n<td></td>/n<td><tt>valueIfTrue <b>if</b> condition <b>else</b> valueIfFalse</tt><br />/n(Python 2.5+)</td>/n</tr>/n<tr valign="top">/n<td>S-Lang</td>/n<td><tt><b>if (</b>condition<b>) {</b> instructions <b>}</b> «<b>else {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>if (</b>condition<b>) {</b> instructions <b>} else if (</b>condition<b>) {</b> instructions <b>}</b> ... «<b>else {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>switch (</b>variable<b>) { case</b> case1<b>:</b> instructions <b>} { case</b> case2<b>:</b> instructions <b>}</b> ...</tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Fortran</td>/n<td><tt><b>IF (</b>condition<b>) THEN</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>ELSE</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>ENDIF</b></tt></td>/n<td><tt><b>IF (</b>condition<b>) THEN</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>ELSEIF (</b>condition<b>) THEN</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>...<br />/nELSE</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>ENDIF</b></tt></td>/n<td><tt><b>SELECT CASE(</b>variable<b>)</b></tt>/n<dl>/n<dd><tt><b>CASE (</b>case1<b>)</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>...<br />/nCASE DEFAULT</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n</dd>/n</dl>/n<tt><b>END SELECT</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Forth</td>/n<td><tt>condition <b>IF</b> instructions « <b>ELSE</b> instructions» <b>THEN</b></tt></td>/n<td><tt>condition <b>IF</b> instructions <b>ELSE</b> condition <b>IF</b> instructions <b>THEN THEN</b></tt></td>/n<td><tt>value <b>CASE</b><br />/ncase <b>OF</b> instructions <b>ENDOF</b><br />/ncase <b>OF</b> instructions <b>ENDOF</b><br />/n&#160;&#160;&#160;&#160;&#160;default instructions<br />/n<b>ENDCASE</b></tt></td>/n<td><tt>condition <b>IF</b> valueIfTrue <b>ELSE</b> valueIfFalse <b>THEN</b></tt></td>/n</tr>/n<tr valign="top">/n<td>OCaml</td>/n<td><tt><b>if</b> condition <b>then begin</b> instructions <b>end</b> «<b>else begin</b> instructions <b>end</b>»</tt></td>/n<td><tt><b>if</b> condition <b>then begin</b> instructions <b>end else if</b> condition <b>then begin</b> instructions <b>end</b> ... «<b>else begin</b> instructions <b>end</b>»</tt></td>/n<td rowspan="2"><tt><b>match</b> value <b>with</b></tt>/n<dl>/n<dd><tt>pattern1 <b>-&gt;</b> expression<b><br />/n|</b> pattern2 <b>-&gt;</b> expression<br />/n...<br />/n«<b>| _ -&gt;</b> expression»<sup class="reference plainlinks nourlexpansion" id="ref_pattern_matching"><a href="#endnote_pattern_matching">[b]</a></sup></tt></dd>/n</dl>/n</td>/n<td rowspan="4"><tt><b>if</b> condition <b>then</b> valueIfTrue <b>else</b> valueIfFalse</tt></td>/n</tr>/n<tr valign="top">/n<td>F#</td>/n<td><tt><b>if</b> condition <b>then</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n«<b>else</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»</tt></td>/n<td><tt><b>if</b> condition <b>then</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n<b>elif</b> condition <b>then</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n...<br />/n«<b>else</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»</tt></td>/n</tr>/n<tr valign="top">/n<td>Standard ML</td>/n<td><tt><b>if</b> condition <b>then</b> «<b>(</b>»instructions «<b>)</b>»<br />/n<b>else</b> «<b>(</b>» instructions «<b>)</b>»</tt></td>/n<td><tt><b>if</b> condition <b>then</b> «<b>(</b>»instructions «<b>)</b>»<br />/n<b>else if</b> condition <b>then</b> «<b>(</b>» instructions «<b>)</b>»<br />/n...<br />/n<b>else</b> «<b>(</b>» instructions «<b>)</b>»</tt></td>/n<td><tt><b>case</b> value <b>of</b></tt>/n<dl>/n<dd><tt>pattern1 <b>=&gt;</b> expression<b><br />/n|</b> pattern2 <b>=&gt;</b> expression<br />/n...<br />/n«<b>| _ =&gt;</b> expression»<sup class="reference plainlinks nourlexpansion" id="ref_pattern_matching"><a href="#endnote_pattern_matching">[b]</a></sup></tt></dd>/n</dl>/n</td>/n</tr>/n<tr valign="top">/n<td>Haskell (GHC)</td>/n<td><tt><b>if</b> condition <b>then</b> expression <b>else</b> expression</tt><br />/nor<br />/n<tt><b>when</b> condition <b>(do</b> instructions<b>)</b></tt><br />/nor<br />/n<tt><b>unless</b> notcondition <b>(do</b> instructions<b>)</b></tt></td>/n<td><tt>result <b>|</b> condition <b>=</b> expression</tt>/n<dl>/n<dd><tt><b>|</b> condition <b>=</b> expression<br />/n<b>| otherwise =</b> expression</tt></dd>/n</dl>/n</td>/n<td><tt><b>case</b> value <b>of {</b></tt>/n<dl>/n<dd><tt>pattern1 <b>-&gt;</b> expression<b>;<br /></b>pattern2 <b>-&gt;</b>expression<b>;</b><br />/n...<br />/n«<b>_ -&gt;</b> expression»</tt></dd>/n</dl>/n<tt><b>}</b><sup class="reference plainlinks nourlexpansion" id="ref_pattern_matching"><a href="#endnote_pattern_matching">[b]</a></sup></tt></td>/n</tr>/n<tr valign="top">/n<td>Bash shell</td>/n<td>/n<div class="poem">/n<p><tt><b>if</b> condition-command; <b>then</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>expression<br />/n«<b>else</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>expression»<br />/n<b>fi</b></tt></p>/n</div>/n</td>/n<td>/n<div class="poem">/n<p><tt><b>if</b> condition-command; <b>then</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>expression<br />/n<b>elif</b> condition-command; <b>then</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>expression<br />/n«<b>else</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>expression»<br />/n<b>fi</b></tt></p>/n</div>/n</td>/n<td>/n<div class="poem">/n<p><tt><b>case</b> "$variable" <b>in</b><br />/n"$condition1" )<br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>command...<br /></tt></p>/n<dl>/n<dd>/n<dl>/n<dt><tt><br /></tt></dt>/n</dl>/n</dd>/n</dl>/n<p><tt>"$condition2" )<br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>command...<br /></tt></p>/n<dl>/n<dd>/n<dl>/n<dt><tt><br /></tt></dt>/n</dl>/n</dd>/n</dl>/n<p><tt><b>esac</b></tt></p>/n</div>/n</td>/n<td></td>/n</tr>/n<tr valign="top">/n<td rowspan="5">CoffeeScript</td>/n<td><tt><b>if</b> condition <b>then</b> expression «<b>else</b> expression»</tt></td>/n<td><tt><b>if</b> condition <b>then</b> expression <b>else if</b> condition <b>then</b> expression «<b>else</b> expression»</tt></td>/n<td rowspan="2"><tt><b>switch</b> expression</tt>/n<dl>/n<dd><tt><b>when</b> condition <b>then</b> expression</tt></dd>/n</dl>/n<dl>/n<dd><tt><b>else</b> expression</tt></dd>/n</dl>/n</td>/n<td rowspan="5"><i>All conditions are expressions</i></td>/n</tr>/n<tr valign="top">/n<td><tt><b>if</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt>«<b>else</b></tt>/n<dl>/n<dd><tt>expression»</tt></dd>/n</dl>/n</td>/n<td><tt><b>if</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt><b>else if</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt>«<b>else</b></tt>/n<dl>/n<dd><tt>expression»</tt></dd>/n</dl>/n</td>/n</tr>/n<tr valign="top">/n<td><tt>expression <b>if</b> condition</tt></td>/n<td rowspan="3"><tt><b>unless</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt><b>else unless</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt>«<b>else</b></tt>/n<dl>/n<dd><tt>expression»</tt></dd>/n</dl>/n</td>/n<td rowspan="3"><tt><b>switch</b> expression</tt>/n<dl>/n<dd><tt><b>when</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt>«<b>else</b></tt>/n<dl>/n<dd><tt>expression»</tt></dd>/n</dl>/n</dd>/n</dl>/n</td>/n</tr>/n<tr valign="top">/n<td><tt><b>unless</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt>«<b>else</b></tt>/n<dl>/n<dd><tt>expression»</tt></dd>/n</dl>/n</td>/n</tr>/n<tr valign="top">/n<td><tt>expression <b>unless</b> condition</tt></td>/n</tr>/n<tr valign="top">/n<td>COBOL</td>/n<td><tt><b>IF</b> condition «<b>THEN</b>»</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt>«<b>ELSE</b></tt>/n<dl>/n<dd><tt>expression»<b>.</b></tt></dd>/n</dl>/n<sup class="reference plainlinks nourlexpansion" id="ref_COBOL_END-IF"><a href="#endnote_COBOL_END-IF">[d]</a></sup></td>/n<td></td>/n<td><tt><b>EVALUATE</b> expression «<b>ALSO</b> expression...»</tt>/n<dl>/n<dd><tt><b>WHEN</b> case-or-condition «<b>ALSO</b> case-or-condition...»</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n</dd>/n</dl>/n<dl>/n<dd><tt>...</tt></dd>/n</dl>/n<dl>/n<dd><tt>«<b>WHEN OTHER</b></tt>/n<dl>/n<dd><tt>expression»</tt></dd>/n</dl>/n</dd>/n</dl>/n<tt><b>END-EVALUATE</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<th></th>/n<th>if</th>/n<th>else if</th>/n<th><a href="/wiki/Switch_statement" title="Switch statement">select case</a></th>/n<th><a href="/wiki/Conditional_(programming)#If_expressions" class="mw-redirect" title="Conditional (programming)">conditional expression</a></th>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_python_indent"><b><a href="#ref_python_indent">^a</a></b></span> A single instruction can be written on the same line following the colon. Multiple instructions are grouped together in a <a href="/wiki/Block_(programming)" title="Block (programming)">block</a> which starts on a newline (The indentation is required). The conditional expression syntax does not follow this rule.<br />/n<span class="citation wikicite" id="endnote_pattern_matching"><b><a href="#ref_pattern_matching">^b</a></b></span> This is <a href="/wiki/Pattern_matching" title="Pattern matching">pattern matching</a> and is similar to select case but not the same. It is usually used to deconstruct <a href="/wiki/Algebraic_data_type" title="Algebraic data type">algebraic data types</a>.<br />/n<span class="citation wikicite" id="endnote_pascal_semicolon"><b><a href="#ref_pascal_semicolon">^c</a></b></span> In languages of the Pascal family, the semicolon is not part of the statement. It is a separator between statements, not a terminator.<br />/n<span class="citation wikicite" id="endnote_COBOL_END-IF"><b><a href="#ref_COBOL_END-IF">^d</a></b></span> <tt><b>END-IF</b></tt> may be used instead of the period at the end.</p>/n<h3><span class="mw-headline" id="Loop_statements"><a href="/wiki/Control_flow#Loops" title="Control flow">Loop statements</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=13" title="Edit section: Loop statements">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="wikitable">/n<tr>/n<th></th>/n<th><a href="/wiki/While_loop" title="While loop">while</a></th>/n<th><a href="/wiki/Do_while_loop" title="Do while loop">do while</a></th>/n<th><a href="/wiki/For_loop" title="For loop">for i = first to last</a></th>/n<th><a href="/wiki/Foreach" class="mw-redirect" title="Foreach">foreach</a></th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-8" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><b>while</b> condition <b>loop</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt><b>end loop</b></tt></td>/n<td><tt><b>loop</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n<dd><tt><b>exit when not</b> condition</tt></dd>/n</dl>/n<tt><b>end loop</b></tt></td>/n<td><tt><b>for</b> index <b>in</b> «<b>reverse</b>» [first <b>..</b> last | discrete_type] <b>loop</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt><b>end loop</b></tt></td>/n<td><tt><b>for</b> item <b>of</b> «<b>reverse</b>» iterator <b>loop</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt><b>end loop</b><br />/n<br />/n<b>(for</b> [<b>all</b> | <b>some</b>] [<b>in</b> | <b>of</b>] [first <b>..</b> last | discrete_type | iterator] <b>=&gt;</b> predicate<b>)</b><sup class="reference plainlinks nourlexpansion" id="ref_Ada_quantifiers"><a href="#endnote_Ada_quantifiers">[b]</a></sup></tt></td>/n</tr>/n<tr>/n<td rowspan="2"><a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a></td>/n<td colspan="3" align="center"><tt>«<b>for</b> index» «<b>from</b> first» «<b>by</b> increment» «<b>to</b> last» «<b>while</b> condition» <b>do</b> statements <b>od</b></tt></td>/n<td rowspan="2"><tt><b>for</b> <i>key</i> «<b>to</b> <b>upb</b> <i>list</i>» <b>do</b> «<b>typename</b> <i>val</i>=<i>list</i>[<i>key</i>];» statements <b>od</b></tt></td>/n</tr>/n<tr>/n<td><tt>«<b>while</b> condition»</tt>/n<p>&#160;&#160;&#160;&#160;<b>do</b> statements <b>od</b></p>/n</td>/n<td><tt>«<b>while</b> statements; condition»</tt>/n<p>&#160;&#160;&#160;&#160;<b>do</b> statements <b>od</b></p>/n</td>/n<td><tt>«<b>for</b> index» «<b>from</b> first» «<b>by</b> increment» «<b>to</b> last» <b>do</b> statements <b>od</b></tt></td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td rowspan="9"><tt><b>while (</b>condition<b>)</b> <b>{</b> instructions <b>}</b></tt></td>/n<td rowspan="9"><tt><b>do {</b> instructions <b>} while (</b>condition<b>)</b></tt></td>/n<td rowspan="5"><tt><b>for (</b>«type» i <b>=</b> first<b>;</b> i <b>&lt;=</b> last<b>; ++</b>i<b>) {</b> instructions <b>}</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Objective-C</td>/n<td><tt><b>for (</b>type item <b>in</b> set<b>) {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>C++ (STL)</td>/n<td><tt>«<b>std::</b>»<b>for_each(</b>start<b>,</b> end<b>,</b> function<b>)</b></tt>/n<p>(<a href="/wiki/C%2B%2B11" title="C++11">C++11</a>) <tt><b>for (</b>type item <b>:</b> set<b>) {</b> instructions <b>}</b></tt></p>/n</td>/n</tr>/n<tr>/n<td>C#</td>/n<td><tt><b>foreach (</b>type item <b>in</b> set<b>) {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td><tt><b>for (</b>type item <b>:</b> set<b>) {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>JavaScript</td>/n<td><tt><b>for (var</b> i <b>=</b> first<b>;</b> i <b>&lt;=</b> last<b>;</b> i<b>++) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>for (var</b> index <b>in</b> set<b>) {</b> instructions <b>}</b><br />/nor<br />/n<b>for each (var</b> item <b>in</b> set<b>) {</b> instructions <b>}</b></tt> (JS 1.6+, deprecated<sup id="cite_ref-10" class="reference"><a href="#cite_note-10">[10]</a></sup>)<br />/nor<br />/n<tt><b>for (var</b> item <b>of</b> set<b>) {</b> instructions <b>}</b></tt> (<a href="/w/index.php?title=EcmaScript_6&amp;action=edit&amp;redlink=1" class="new" title="EcmaScript 6 (page does not exist)">EcmaScript 6</a> proposal, supported in Firefox<sup id="cite_ref-11" class="reference"><a href="#cite_note-11">[11]</a></sup>)</td>/n</tr>/n<tr>/n<td>PHP</td>/n<td><tt><b>foreach (range(</b>first<b>,</b> last<b>) as $i) {</b> instructions <b>}</b> or<br />/n<b>for ($i =</b> first<b>; $i &lt;=</b> last<b>; $i++) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>foreach (</b>set <b>as</b> item<b>) {</b> instructions <b>}</b><br />/nor<br />/n<b>foreach (</b>set <b>as</b> key <b>=&gt;</b> item<b>) {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td><tt><b>for ($i =</b> first<b>; $i -le</b> last<b>; $i++) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>foreach (</b>item <b>in</b> set<b>) {</b> instructions using item <b>}</b></tt></td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt><b>foreach</b> (i; <b>first</b> ... <b>last</b>) <b>{</b> instructions <b>}</b></tt></td>/n<td><tt><b>foreach</b> («type» item; set) <b>{</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt><b>for</b> condition <b>{</b> instructions <b>}</b></tt></td>/n<td></td>/n<td><tt><b>for</b> i <b>:=</b> first<b>;</b> i <b>&lt;=</b> last<b>;</b> i<b>++ {</b> instructions <b>}</b></tt></td>/n<td><tt><b>for</b> key<b>,</b> item<b>&#160;:= range</b> set <b>{</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt><b>while</b> condition <b>{</b> instructions <b>}</b></tt></td>/n<td><tt><b>repeat {</b> instructions <b>} while</b> condition</tt> (2.x)<br />/n<tt><b>do {</b> instructions <b>} while</b> condition</tt> (1.x)</td>/n<td><tt><b>for</b> i <b>=</b> first <b>...</b> last { <b>instructions</b> } or<br />/n<tt><b>for</b> i <b>=</b> first <b>..&lt;</b> last+1 { <b>instructions</b> } or<br />/n<tt><b>for var</b> i <b>=</b> first<b>;</b> i <b>&lt;=</b> last<b>;</b> i<b>++ {</b> instructions <b>}</b></tt></tt></tt></td>/n<td><tt><b>for</b> item <b>in</b> set <b>{</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>Perl</td>/n<td><tt><b>while (</b>condition<b>)</b> <b>{</b> instructions <b>}</b> or<br />/n<b>until (</b>notcondition<b>)</b> <b>{</b> instructions <b>}</b></tt></td>/n<td><tt><b>do {</b> instructions <b>} while (</b>condition<b>)</b> or<br />/n<b>do {</b> instructions <b>} until (</b>notcondition<b>)</b></tt></td>/n<td><tt><b>for</b>«<b>each</b>» «<b>$i</b>» <b>(</b>first <b>..</b> last<b>) {</b> instructions <b>}</b> or<br />/n<b>for ($i =</b> first<b>; $i &lt;=</b> last<b>; $i++) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>for</b>«<b>each</b>» «$item» <b>(</b>set<b>) {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td><tt><b>while</b> condition <b>{</b> instructions <b>}</b> or<br />/n<b>until</b> notcondition <b>{</b> instructions <b>}</b></tt></td>/n<td><tt><b>repeat {</b> instructions <b>} while</b> condition or<br />/n<b>repeat {</b> instructions <b>} until</b> notcondition</tt></td>/n<td><tt><b>for</b> first<b>..</b>last <b>-&gt; $i {</b> instructions <b>}</b> or<br />/n<b>loop ($i =</b> first<b>; $i &lt;=</b>last<b>; $i++) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>for</b> set«&#160;<b>-&gt;</b> $item» <b>{</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><tt><b>while</b> condition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b><br />/nor<br />/n<b>until</b> notcondition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td><tt><b>begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end while</b> condition<br />/nor<br />/n<b>begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end until</b> notcondition</tt></td>/n<td><tt><b>for i in</b> first<b>..</b>last</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b><br />/nor<br />/n<tt><b>for i in</b> first<b>...</b>last+1</tt></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b><br />/nor<br />/nfirst<b>.upto(</b>last<b>) { |i|</b> instructions <b>}</b></tt></td>/n<td><tt><b>for</b> item <b>in</b> set</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b><br />/nor<br />/nset<b>.each { |</b>item<b>|</b> instructions <b>}</b></tt></td>/n</tr>/n<tr>/n<td>Bash shell</td>/n<td><tt><b>while</b> condition&#160;;<b>do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>done</b><br />/nor<br />/n<b>until</b> notcondition&#160;;<b>do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>done</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>for ((</b>i <b>=</b> first<b>;</b> i <b>&lt;=</b> last<b>; ++</b>i<b>))&#160;; do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<p><tt><b>done</b></tt></p>/n</td>/n<td><tt><b>for</b> item <b>in</b> set&#160;;<b>do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>done</b></tt></td>/n</tr>/n<tr>/n<td>Scala</td>/n<td><tt><b>while (</b>condition<b>)</b> <b>{</b> instructions <b>}</b></tt></td>/n<td><tt><b>do {</b> instructions <b>} while (</b>condition<b>)</b></tt></td>/n<td><tt><b>for (</b>i <b>&lt;-</b> first <b>to</b> last «<b>by 1</b>»<b>) {</b> instructions <b>}</b><br />/nor<br />/nfirst <b>to</b> last «<b>by 1</b>» <b>foreach (</b>i <b>=&gt; {</b> instructions <b>})</b></tt></td>/n<td><tt><b>for (</b>item <b>&lt;-</b> set<b>) {</b> instructions <b>}</b><br />/nor<br />/nset <b>foreach (</b>item <b>=&gt; {</b> instructions <b>})</b></tt></td>/n</tr>/n<tr>/n<td>Smalltalk</td>/n<td><tt>conditionBlock <b>whileTrue:</b></tt>/n<dl>/n<dd><tt>loopBlock</tt></dd>/n</dl>/n</td>/n<td><tt>loopBlock <b>doWhile:</b></tt>/n<dl>/n<dd><tt>conditionBlock</tt></dd>/n</dl>/n</td>/n<td><tt>first <b>to:</b> last <b>do:</b></tt>/n<dl>/n<dd><tt>loopBlock</tt></dd>/n</dl>/n</td>/n<td><tt>collection <b>do:</b></tt>/n<dl>/n<dd><tt>loopBlock</tt></dd>/n</dl>/n</td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td><tt><b>(loop</b></tt>/n<dl>/n<dd><tt><b>while</b> condition</tt></dd>/n<dd><tt><b>do</b></tt></dd>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(do () (</b>notcondition<b>)</b></tt>/n<dl>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(loop</b></tt>/n<dl>/n<dd><tt><b>do</b></tt></dd>/n<dd><tt>instructions</tt></dd>/n<dd><tt><b>while</b> condition<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(loop</b></tt>/n<dl>/n<dd><tt><b>for i from</b> first <b>to</b> last <b>«by 1»</b></tt></dd>/n<dd><tt><b>do</b></tt></dd>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(dotimes (i N)</b></tt>/n<dl>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(do ((i</b> first <b>(1+ i))) ((&gt;= i</b> last<b>))</b></tt>/n<dl>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(loop</b></tt>/n<dl>/n<dd><tt><b>for</b> item <b>in</b> list</tt></dd>/n<dd><tt><b>do</b></tt></dd>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(loop</b></tt>/n<dl>/n<dd><tt><b>for</b> item <b>across</b> vector</tt></dd>/n<dd><tt><b>do</b></tt></dd>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(dolist (</b>item list<b>)</b></tt>/n<dl>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(mapc</b> function list<b>)</b> or<br />/n<b>(map '</b>type function sequence<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td><tt><b>(do () (</b>notcondition<b>)</b> instructions<b>)</b> or<br />/n<b>(let loop () (if</b> condition <b>(begin</b> instructions <b>(loop))))</b></tt></td>/n<td><tt><b>(let loop () (</b>instructions <b>(if</b> condition <b>(loop))))</b></tt></td>/n<td><tt><b>(do ((i</b> first <b>(+ i 1))) ((&gt;= i</b> last<b>))</b> instructions<b>)</b> or<br />/n<b>(let loop ((i</b> first<b>)) (if (&lt; i</b> last<b>) (begin</b> instructions <b>(loop (+ i 1)))))</b></tt></td>/n<td><tt><b>(for-each (lambda (</b>item<b>)</b> instructions<b>)</b> list<b>)</b></tt></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td><tt><b>(while</b> condition instructions<b>)</b></tt></td>/n<td><tt><b>(tagbody loop</b> instructions <b>(if</b> condition <b>(go loop))</b></tt></td>/n<td><tt><b>(for ((i</b> first <b>(+ i 1))) ((&gt;= i</b> last<b>))</b> instructions<b>)</b></tt></td>/n<td><tt><b>(mapc (lambda (</b>item<b>)</b> instructions<b>)</b> list<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Pascal</td>/n<td><tt><b>while</b> condition <b>do begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td><tt><b>repeat</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>until</b> notcondition<b>;</b></tt></td>/n<td><tt><b>for</b> i <b>:=</b> first «<b>step 1</b>» <b>to</b> last <b>do begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end;</b><sup class="reference plainlinks nourlexpansion" id="ref_step"><a href="#endnote_step">[a]</a></sup></tt></td>/n<td><tt><b>for</b> item <b>in</b> set <b>do</b> ...</tt></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td rowspan="2"><tt><b>Do While</b> condition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Loop</b><br />/nor<br />/n<b>Do Until</b> notcondition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Loop</b></tt></td>/n<td rowspan="2"><tt><b>Do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Loop While</b> condition<br />/nor<br />/n<b>Do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Loop Until</b> notcondition</tt></td>/n<td><tt><b>For</b> i <b>=</b> first <b>To</b> last «<b>Step 1</b>»</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Next i</b></tt></td>/n<td><tt><b>For Each</b> item <b>In</b> set</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Next</b> item</tt></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td rowspan="2"><tt><b>For i</b> «<b>As</b> type» <b>=</b> first <b>To</b> last «<b>Step 1</b>»</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Next i</b><sup class="reference plainlinks nourlexpansion" id="ref_step"><a href="#endnote_step">[a]</a></sup></tt></td>/n<td rowspan="2"><tt><b>For Each</b> item <b>As</b> type <b>In</b> set</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Next</b> item</tt></td>/n</tr>/n<tr>/n<td>Xojo</td>/n<td><tt><b>While</b> condition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Wend</b></tt></td>/n<td><tt><b>Do Until</b> notcondition</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Loop</b><br />/nor<br />/n<b>Do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Loop Until</b> notcondition</tt></td>/n</tr>/n<tr>/n<td>Python</td>/n<td><tt><b>while</b> condition <b>:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n«<b>else:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>for i in range(</b>first<b>,</b> last+1<b>):</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n«<b>else:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»</tt>(Python 3.x)<br />/n<p><tt><b>for i in xrange(</b>first<b>,</b> last+1<b>):</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n«<b>else:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd>instructions»</tt>(Python 2.x)</p>/n</td>/n<td><tt><b>for</b> item <b>in</b> set<b>:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n«<b>else:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»</tt></td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt><b>while (</b>condition<b>) {</b> instructions <b>}</b> «<b>then</b> optional-block»</tt></td>/n<td><tt><b>do {</b> instructions <b>} while (</b>condition<b>)</b> «<b>then</b> optional-block»</tt></td>/n<td><tt><b>for (i =</b> first<b>; i &lt;=</b> last<b>; i++) {</b> instructions <b>}</b> «<b>then</b> optional-block»</tt></td>/n<td><tt><b>foreach</b> item<b>(</b>set<b>)</b> «<b>using (</b>what<b>)</b>» <b>{</b> instructions <b>}</b> «<b>then</b> optional-block»</tt></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td><tt><b>DO WHILE (</b>condition<b>)</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>ENDDO</b></tt></td>/n<td><tt><b>DO</b></tt>/n<dl>/n<dd><tt>instructions <b><br />/nIF (</b>condition<b>) EXIT</b></tt></dd>/n</dl>/n<tt><b>ENDDO</b></tt></td>/n<td><tt><b>DO</b> I <b>=</b> first<b>,</b>last</tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>ENDDO</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Forth</td>/n<td><tt><b>BEGIN</b> «&#160;instructions&#160;» condition <b>WHILE</b> instructions <b>REPEAT</b></tt></td>/n<td><tt><b>BEGIN</b> instructions condition <b>UNTIL</b></tt></td>/n<td><tt>limit start <b>DO</b> instructions <b>LOOP</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td><tt><b>while</b> condition <b>do</b> instructions <b>done</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>for i =</b> first <b>to</b> last <b>do</b> instructions <b>done</b></tt></td>/n<td><tt><b>Array.iter (fun</b> item <b>-&gt;</b> instructions<b>)</b> array<br />/n<b>List.iter (fun</b> item <b>-&gt;</b> instructions<b>)</b> list</tt></td>/n</tr>/n<tr>/n<td>F#</td>/n<td><tt><b>while</b> condition <b>do</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>for i =</b> first <b>to</b> last <b>do</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions</tt></td>/n<td><tt><b>for</b> item <b>in</b> set <b>do</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/nor<br />/n<b>Seq.iter (fun</b> item <b>-&gt;</b> instructions<b>)</b> set</tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td><tt><b>while</b> condition <b>do (</b> instructions <b>)</b></tt></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>Array.app (fn</b> item <b>=&gt;</b> instructions<b>)</b> array<br />/n<b>app (fn</b> item <b>=&gt;</b> instructions<b>)</b> list</tt></td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>Control.Monad.forM_ [</b>first<b>..</b>last<b>] (\i -&gt; do</b> instructions<b>)</b></tt></td>/n<td><tt><b>Control.Monad.forM_</b> list <b>(\item -&gt; do</b> instructions<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Eiffel</td>/n<td colspan="4"><tt><b>from</b></tt>/n<dl>/n<dd><tt>setup</tt></dd>/n</dl>/n<tt><b>until</b></tt>/n<dl>/n<dd><tt>condition</tt></dd>/n</dl>/n<tt><b>loop</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n</tr>/n<tr>/n<td rowspan="6">CoffeeScript</td>/n<td><tt><b>while</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n</td>/n<td rowspan="6" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="4"><tt><b>for</b> i <b>in</b> [first..last]</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n</td>/n<td rowspan="4"><tt><b>for</b> item <b>in</b> set</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n</td>/n</tr>/n<tr>/n<td><tt>expression <b>while</b> condition</tt></td>/n</tr>/n<tr>/n<td><tt><b>while</b> condition <b>then</b> expression</tt></td>/n</tr>/n<tr>/n<td><tt><b>until</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n</td>/n</tr>/n<tr>/n<td><tt>expression <b>until</b> condition</tt></td>/n<td><tt><b>for</b> i <b>in</b> [first..last] <b>then</b> expression</tt></td>/n<td><tt><b>for</b> item <b>in</b> set <b>then</b> expression</tt></td>/n</tr>/n<tr>/n<td><tt><b>until</b> condition <b>then</b> expression</tt></td>/n<td><tt>expression <b>for</b> i <b>in</b> [first..last]</tt></td>/n<td><tt>expression <b>for</b> item <b>in</b> set</tt></td>/n</tr>/n<tr>/n<td rowspan="2">COBOL</td>/n<td><tt><b>PERFORM</b> procedure-1 «<b>THROUGH</b> procedure-2» ««<b>WITH</b>» <b>TEST BEFORE</b>» <b>UNTIL</b> condition<sup class="reference plainlinks nourlexpansion" id="ref_COBOL_THRU"><a href="#endnote_COBOL_THRU">[c]</a></sup></tt></td>/n<td><tt><b>PERFORM</b> procedure-1 «<b>THROUGH</b> procedure-2» «<b>WITH</b>» <b>TEST AFTER UNTIL</b> condition<sup class="reference plainlinks nourlexpansion" id="ref_COBOL_THRU"><a href="#endnote_COBOL_THRU">[c]</a></sup></tt></td>/n<td><tt><b>PERFORM</b> procedure-1 «<b>THROUGH</b> procedure-2» <b>VARYING</b> i <b>FROM</b> first <b>BY</b> increment <b>UNTIL</b> i <b>&gt;</b> last<sup class="reference plainlinks nourlexpansion" id="ref_COBOL_GREATER_THAN"><a href="#endnote_COBOL_GREATER_THAN">[d]</a></sup></tt></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><tt><b>PERFORM</b> ««<b>WITH</b>» <b>TEST BEFORE</b>» <b>UNTIL</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt><b>END-PERFORM</b></tt></td>/n<td><tt><b>PERFORM</b> «<b>WITH</b>» <b>TEST AFTER UNTIL</b> condition</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt><b>END-PERFORM</b></tt></td>/n<td><tt><b>PERFORM VARYING</b> i <b>FROM</b> first <b>BY</b> increment <b>UNTIL</b> i <b>&gt;</b> last</tt>/n<dl>/n<dd><tt>expression</tt></dd>/n</dl>/n<tt><b>END-PERFORM</b><sup class="reference plainlinks nourlexpansion" id="ref_COBOL_GREATER_THAN"><a href="#endnote_COBOL_GREATER_THAN">[d]</a></sup></tt></td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_step"><b><a href="#ref_step">^a</a></b></span> "<tt><b>step</b></tt> n" is used to change the loop interval. If "<tt><b>step</b></tt>" is omitted, then the loop interval is 1.</p>/n<p><span class="citation wikicite" id="endnote_Ada_quantifiers"><b><a href="#ref_Ada_quantifiers">^b</a></b></span> This implements the universal quantifier ("for all" or "∀") as well as the existential quantifier ("there exists" or "∃").</p>/n<p><span class="citation wikicite" id="endnote_COBOL_THRU"><b><a href="#ref_COBOL_THRU">^c</a></b></span> <tt><b>THRU</b></tt> may be used instead of <tt><b>THROUGH</b></tt>.</p>/n<p><span class="citation wikicite" id="endnote_COBOL_GREATER_THAN"><b><a href="#ref_COBOL_GREATER_THAN">^d</a></b></span> <tt>«<b>IS</b>» <b>GREATER</b> «<b>THAN</b>»</tt> may be used instead of <tt><b>&gt;</b></tt>.</p>/n<h3><span class="mw-headline" id="Exceptions"><a href="/wiki/Exception_handling" title="Exception handling">Exceptions</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=14" title="Edit section: Exceptions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<div role="note" class="hatnote navigation-not-searchable">Further information: <a href="/wiki/Exception_handling_syntax" title="Exception handling syntax">Exception handling syntax</a></div>/n<table class="wikitable">/n<tr>/n<th></th>/n<th>throw</th>/n<th>handler</th>/n<th>assertion</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-9" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><b>raise</b> exception_name «<b>with</b> string_expression»</tt></td>/n<td><tt><b>begin</b></tt>/n<dl>/n<dd><tt>statements</tt></dd>/n</dl>/n<tt><b>exception</b></tt>/n<dl>/n<dd><tt><b>when</b> exception_list<sub>1</sub> <b>=&gt;</b> statements;</tt></dd>/n<dd><tt><b>when</b> exception_list<sub>2</sub> <b>=&gt;</b> statements;</tt></dd>/n</dl>/n<tt>...<br /></tt>/n<dl>/n<dd><tt>«<b>when others =&gt;</b> statements;»</tt></dd>/n</dl>/n<tt><b>end</b><sup class="reference plainlinks nourlexpansion" id="ref_Ada_uncaught_exceptions"><a href="#endnote_Ada_uncaught_exceptions">[b]</a></sup></tt></td>/n<td><tt><b>pragma Assert (</b>«<b>Check =&gt;</b>» boolean_expression ««<b>Message =&gt;</b>» string_expression»<b>)</b><br />/n<br />/n[function | procedure | entry] <b>with</b></tt>/n<dl>/n<dd><tt><b>Pre =&gt;</b> boolean_expression</tt></dd>/n<dd><tt><b>Post =&gt;</b> boolean_expression</tt></dd>/n</dl>/n<tt><br />/nany_type <b>with Type_Invariant =&gt;</b> boolean_expression</tt></td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td><tt><b><a href="/wiki/Longjmp" class="mw-redirect" title="Longjmp">longjmp</a>(</b>state<b>,</b> exception<b>);</b></tt></td>/n<td><tt><b>switch (<a href="/wiki/Setjmp" class="mw-redirect" title="Setjmp">setjmp</a>(</b>state<b>)) { case 0:</b> instructions <b>break; case</b> exception<b>:</b> instructions <b>... }</b></tt></td>/n<td rowspan="2"><tt><b>assert(</b>condition<b>);</b></tt></td>/n</tr>/n<tr>/n<td>C++</td>/n<td rowspan="8"><tt><b>throw</b> exception<b>;</b></tt></td>/n<td><tt><b>try {</b> instructions <b>} catch</b> «<b>(</b>exception<b>)</b>» <b>{</b> instructions <b>}</b> ...</tt></td>/n</tr>/n<tr>/n<td>C#</td>/n<td><tt><b>try {</b> instructions <b>} catch</b> «<b>(</b>exception<b>)</b>» <b>{</b> instructions <b>}</b> ... «<b>finally {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>Debug.Assert(</b>condition<b>);</b></tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td><tt><b>try {</b> instructions <b>} catch (</b>exception<b>) {</b> instructions <b>}</b> ... «<b>finally {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>assert</b> condition <b>«:</b> description<b>»;</b></tt></td>/n</tr>/n<tr>/n<td>JavaScript</td>/n<td><tt><b>try {</b> instructions <b>} catch (</b>exception<b>) {</b> instructions <b>}</b> «<b>finally {</b> instructions <b>}</b>»</tt></td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt><b>try {</b> instructions <b>} catch (</b>exception<b>) {</b> instructions <b>}</b> ... «<b>finally {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>assert(</b>condition<b>);</b></tt></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td><tt><b>try {</b> instructions <b>} catch (</b>exception<b>) {</b> instructions <b>}</b> ... «<b>finally {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>assert(</b>condition<b>);</b></tt></td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt><b>try {</b> instructions <b>} catch</b> «exception» <b>{</b> instructions <b>}</b> ... «<b>finally {</b> instructions <b>}</b>»</tt></td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td><tt><b>trap</b> «<b>[</b>exception<b>]</b>» <b>{</b> instructions <b>}</b> ... instructions or <b>try {</b> instructions <b>} catch</b> «<b>[</b>exception<b>]</b>» <b>{</b> instructions <b>}</b> ... «<b>finally {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>[Debug]::Assert(</b>condition<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Objective-C</td>/n<td><tt><b>@throw</b> exception<b>;</b></tt></td>/n<td><tt><b>@try {</b> instructions <b>} @catch (</b>exception<b>) {</b> instructions <b>}</b> ... «<b>@finally {</b> instructions <b>}</b>»</tt></td>/n<td><tt><b>NSAssert(</b>condition<b>,</b> description<b>);</b></tt></td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt><b>throw</b> exception</tt> (2.x)</td>/n<td><tt><b>do { try</b> expression <b>...</b> instructions <b>} catch</b> exception <b>{</b> instructions <b>}</b> ...</tt> (2.x)</td>/n<td><tt><b>assert(</b>condition<b>«,</b> description<b>»)</b></tt></td>/n</tr>/n<tr>/n<td>Perl</td>/n<td rowspan="2"><tt><b>die</b> exception<b>;</b></tt></td>/n<td><tt><b>eval {</b> instructions <b>}; if ($@) {</b> instructions <b>}</b></tt></td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td><tt><b>try {</b> instructions <b>CATCH { when</b> exception <b>{</b> instructions <b>}</b> ...<b>}}</b></tt></td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><tt><b>raise</b> exception</tt></td>/n<td><tt><b>begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>rescue</b> exception</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>...<br />/n«<b>else</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt>«<b>ensure</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Smalltalk</td>/n<td><tt>exception <b>raise</b></tt></td>/n<td><tt>instructionBlock <b>on:</b> exception <b>do:</b> handlerBlock</tt></td>/n<td><tt><b>assert:</b> conditionBlock</tt></td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td><tt><b>(error</b> "exception"<b>)</b> or<br />/n<b>(error</b></tt>/n<dl>/n<dd><tt>type</tt></dd>/n<dd><tt>arguments<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(error (make-condition</b></tt>/n<dl>/n<dd><tt>type</tt></dd>/n<dd><tt>arguments<b>))</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(handler-case</b></tt>/n<dl>/n<dd><tt><b>(progn</b> instructions<b>)</b></tt></dd>/n<dd><tt><b>(</b>exception instructions<b>)</b></tt></dd>/n<dd><tt>...<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(handler-bind</b></tt>/n<dl>/n<dd><tt><b>(</b>condition</tt>/n<dl>/n<dd><tt><b>(lambda</b></tt></dd>/n<dd><tt>instructions</tt></dd>/n<dd><tt>«<b>invoke-restart</b> restart args»<b>))</b></tt></dd>/n</dl>/n<tt>...<b>)</b><sup class="reference plainlinks nourlexpansion" id="ref_a"><a href="#endnote_a">[a]</a></sup></tt></dd>/n</dl>/n</td>/n<td><tt><b>(assert</b> condition<b>)</b> or<br />/n<b>(assert</b> condition</tt>/n<dl>/n<dd><tt>«<b>(</b>place<b>)</b></tt></dd>/n<dd><tt>«error»»<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(check-type</b> var type<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Scheme (R<sup>6</sup>RS)</td>/n<td><tt><b>(raise</b> exception<b>)</b></tt></td>/n<td><tt><b>(guard (con (</b>condition instructions<b>)</b> ...<b>)</b> instructions<b>)</b></tt></td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td><tt><b>(error</b> "error-string" objects<b>)</b> or<br />/n<b>(signal-condition</b> condition continuable<b>)</b></tt></td>/n<td><tt><b>(with-handler</b></tt>/n<dl>/n<dd><tt>handler form*<b>)</b></tt></dd>/n</dl>/n</td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n</tr>/n<tr>/n<td>Pascal</td>/n<td><tt><b>raise</b> Exception.Create()</tt></td>/n<td><tt><b>try</b> Except <b>on</b> E: exception <b>do begin</b> instructions <b>end; end;</b></tt></td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td><tt><b>Err.Raise</b> ERRORNUMBER</tt></td>/n<td><tt><b>With New</b> Try<b>: On Error Resume Next</b></tt>/n<dl>/n<dd><tt>OneInstruction</tt></dd>/n</dl>/n<tt>.Catch<b>: On Error GoTo 0: Select Case</b> .Number</tt>/n<dl>/n<dd><tt><b>Case</b> ERRORNUMBER</tt></dd>/n</dl>/n<dl>/n<dd>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n</dd>/n</dl>/n<tt><b>End Select: End With</b></tt>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<tt><span class="c">'*** Try class ***</span>/n<span class="k">Private</span> <span class="n">mstrDescription</span> <span class="ow">As</span> <span class="kt">String</span>/n<span class="k">Private</span> <span class="n">mlngNumber</span> <span class="ow">As</span> <span class="kt">Long</span>/n<span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Catch</span><span class="p">()</span>/n/n<span class="n">mstrDescription</span> <span class="o">=</span> <span class="n">Err</span><span class="p">.</span><span class="n">Description</span>/n/n<span class="n">mlngNumber</span> <span class="o">=</span> <span class="n">Err</span><span class="p">.</span><span class="n">Number</span>/n/n<span class="k">End</span> <span class="k">Sub</span>/n<span class="k">Public</span> <span class="k">Property</span> <span class="nf">Get</span> <span class="n">Number</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Long</span>/n/n<span class="n">Number</span> <span class="o">=</span> <span class="n">mlngNumber</span>/n/n<span class="k">End</span> <span class="k">Property</span>/n<span class="k">Public</span> <span class="k">Property</span> <span class="nf">Get</span> <span class="n">Description</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span>/n/n<span class="n">Description</span> <span class="o">=</span> <span class="n">mstrDescription</span>/n<span class="k">End</span> <span class="k">Property</span>/n</tt>/n</pre></div>/n<tt><sup id="cite_ref-12" class="reference"><a href="#cite_note-12">[12]</a></sup></tt></td>/n<td><tt><b>Debug.Assert</b> condition</tt></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td><tt><b>Throw</b> exception</tt></td>/n<td><tt><b>Try</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Catch</b> «exception» «<b>When</b> condition»</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>...<br />/n«<b>Finally</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt><b>End Try</b></tt></td>/n<td><tt><b>Debug.Assert(</b>condition<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Xojo</td>/n<td><tt><b>Raise</b> exception</tt></td>/n<td><tt><b>Try</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>Catch</b> «exception»</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt>...<br />/n«<b>Finally</b></tt>/n<dl>/n<dd><tt>instructions»</tt></dd>/n</dl>/n<tt><b>End Try</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Python</td>/n<td><tt><b>raise</b> exception</tt></td>/n<td><tt><b>try:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n<b>except</b> «exception»<b>:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n...<br />/n«<b>else:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»<br />/n«<b>finally:</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions»</tt></td>/n<td><tt><b>assert</b> condition</tt></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td colspan="3" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Forth</td>/n<td><tt>code <b>THROW</b></tt></td>/n<td><tt>xt <b>CATCH</b> ( code or 0 )</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td rowspan="2"><tt><b>raise</b> exception</tt></td>/n<td><tt><b>try</b> expression <b>with</b> pattern <b>-&gt;</b> expression ...</tt></td>/n<td rowspan="2"><tt><b>assert</b> condition</tt></td>/n</tr>/n<tr>/n<td>F#</td>/n<td><tt><b>try</b> expression <b>with</b> pattern <b>-&gt;</b> expression ...<br />/nor<br />/n<b>try</b> expression <b>finally</b> expression</tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td><tt><b>raise</b> exception «arg»</tt></td>/n<td><tt>expression <b>handle</b> pattern <b>=&gt;</b> expression ...</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td><tt><b>throw</b> exception<br />/n<i>or</i><br />/n<b>throwError</b> expression</tt></td>/n<td><tt><b>catch</b> tryExpression catchExpression<br />/n<i>or</i><br />/n<b>catchError</b> tryExpression catchExpression</tt></td>/n<td><tt><b>assert</b> condition expression</tt></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td><tt><b>RAISE</b> «<b>EXCEPTION</b>» exception</tt></td>/n<td><tt><b>USE</b> «<b>AFTER</b>» <b>EXCEPTION OBJECT</b> class-name<b>.</b> or<br /></tt>/n<p><tt><b>USE</b> «<b>AFTER</b>» <b>EO</b> class-name<b>.</b> or<br />/n<b>USE</b> «<b>AFTER</b>» <b>EXCEPTION CONDITION</b> exception-name «<b>FILE</b> file-name»<b>.</b> or<br />/n<b>USE</b> «<b>AFTER</b>» <b>EC</b> exception-name «<b>FILE</b> file-name»<b>.</b></tt></p>/n</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_common_lisp_restarts"><b><a href="#ref_common_lisp_restarts">^a</a></b></span> Common Lisp allows <code>with-simple-restart</code>, <code>restart-case</code> and <code>restart-bind</code> to define restarts for use with <code>invoke-restart</code>. Unhandled conditions may cause the implementation to show a restarts menu to the user before unwinding the stack.</p>/n<p><span class="citation wikicite" id="endnote_Ada_uncaught_exceptions"><b><a href="#ref_Ada_uncaught_exceptions">^b</a></b></span> Uncaught exceptions are propagated to the innermost dynamically enclosing execution. Exceptions are not propagated across tasks (unless these tasks are currently synchronised in a rendezvous).</p>/n<h3><span class="mw-headline" id="Other_control_flow_statements">Other control flow statements</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=15" title="Edit section: Other control flow statements">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="wikitable">/n<tr>/n<th></th>/n<th>exit block(break)</th>/n<th>continue</th>/n<th><a href="/wiki/Label_(programming_language)" class="mw-redirect" title="Label (programming language)">label</a></th>/n<th>branch (<a href="/wiki/Goto" title="Goto">goto</a>)</th>/n<th>return value from generator</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-10" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><b>exit</b> «loop_name» «<b>when</b> condition»</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt>label<b>:</b></tt></td>/n<td><tt><b>goto</b> label</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>ALGOL 68</td>/n<td><tt>value <b>exit</b>;</tt> ...</td>/n<td><tt><b>do</b> statements; <b>skip exit</b>; label: statements <b>od</b></tt></td>/n<td><tt>label:</tt> ...</td>/n<td><tt><b>go to</b> label; ...<br /></tt>/n<p><tt><b>goto</b> label; ...<br />/nlabel; ...</tt></p>/n</td>/n<td><tt><i>yield</i>(<i>value</i>)</tt>/n<p>(<a href="/wiki/Callback_(computer_science)" class="mw-redirect" title="Callback (computer science)">Callback</a>)<sup id="cite_ref-13" class="reference"><a href="#cite_note-13">[13]</a></sup></p>/n</td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td rowspan="5"><tt><b>break;</b></tt></td>/n<td rowspan="5"><tt><b>continue;</b></tt></td>/n<td rowspan="12"><tt>label<b>:</b></tt></td>/n<td rowspan="5"><tt><b>goto</b> label<b>;</b></tt></td>/n<td rowspan="4" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Objective-C</td>/n</tr>/n<tr>/n<td>C++ (STL)</td>/n</tr>/n<tr>/n<td>D</td>/n</tr>/n<tr>/n<td>C#</td>/n<td><tt><b>yield return</b> value<b>;</b></tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td rowspan="2"><tt><b>break</b> «label»<b>;</b></tt></td>/n<td rowspan="2"><tt><b>continue</b> «label»<b>;</b></tt></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>JavaScript</td>/n<td><tt><b>yield</b> value«;»</tt></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td><tt><b>break</b> «levels»<b>;</b></tt></td>/n<td><tt><b>continue</b> «levels»<b>;</b></tt></td>/n<td rowspan="3"><tt><b>goto</b> label<b>;</b></tt></td>/n<td><tt><b>yield</b> «key =&gt;» value;</tt></td>/n</tr>/n<tr>/n<td>Perl</td>/n<td rowspan="2"><tt><b>last</b> «label»<b>;</b></tt></td>/n<td rowspan="2"><tt><b>next</b> «label»<b>;</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td></td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt><b>break</b> «label»</tt></td>/n<td><tt><b>continue</b> «label»</tt></td>/n<td><tt><b>goto</b> label</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt><b>break</b> «label»</tt></td>/n<td><tt><b>continue</b> «label»</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>Bash shell</td>/n<td><tt><b>break</b> «levels»</tt></td>/n<td><tt><b>continue</b> «levels»</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td><tt><b>(return)</b> or<br />/n<b>(return-from</b> block<b>)</b> or<br />/n<b>(loop-finish)</b></tt></td>/n<td></td>/n<td><tt><b>(tagbody</b> tag</tt>/n<dl>/n<dd>/n<dl>/n<dd><tt>...</tt></dd>/n<dd><tt>tag</tt></dd>/n</dl>/n<tt>...<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(go</b> tag<b>)</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td><tt><b>(return-from</b> block<b>)</b></tt></td>/n<td></td>/n<td><tt><b>(tagbody</b> tag</tt>/n<dl>/n<dd>/n<dl>/n<dd><tt>...</tt></dd>/n<dd><tt>tag</tt></dd>/n</dl>/n<tt>...<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(go</b> tag<b>)</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Pascal(ISO)</td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="2"><tt>label<b>:</b></tt><sup class="reference plainlinks nourlexpansion" id="ref_Pascal.27s_declarations"><a href="#endnote_Pascal.27s_declarations">[a]</a></sup></td>/n<td rowspan="2"><tt><b>goto</b> label<b>;</b></tt></td>/n<td rowspan="5" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Pascal(FPC)</td>/n<td><tt><b>break;</b></tt></td>/n<td><tt><b>continue;</b></tt></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td rowspan="3"><tt><b>Exit</b> block</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td rowspan="3"><tt>label<b>:</b></tt></td>/n<td rowspan="3"><tt><b>GoTo</b> label</tt></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td rowspan="2"><tt><b>Continue</b> block</tt></td>/n</tr>/n<tr>/n<td>Xojo</td>/n</tr>/n<tr>/n<td>Python</td>/n<td><tt><b>break</b></tt></td>/n<td><tt><b>continue</b></tt></td>/n<td colspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>yield</b> value</tt></td>/n</tr>/n<tr>/n<td>RPG IV</td>/n<td><tt><b>LEAVE;</b></tt></td>/n<td><tt><b>ITER;</b></tt></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt><b>break;</b></tt></td>/n<td><tt><b>continue;</b></tt></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td><tt><b>EXIT</b></tt></td>/n<td><tt><b>CYCLE</b></tt></td>/n<td><tt>label</tt><sup class="reference plainlinks nourlexpansion" id="ref_Fortran_label"><a href="#endnote_Fortran_label">[b]</a></sup></td>/n<td><tt><b>GOTO</b> label</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><tt><b>break</b></tt></td>/n<td><tt><b>next</b></tt></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td><tt><b>break</b> «label»</tt></td>/n<td><tt><b>continue</b></tt></td>/n<td></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td rowspan="4" colspan="4" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td></td>/n</tr>/n<tr>/n<td>F#</td>/n<td></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td></td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td><tt><b>EXIT&#160;PERFORM</b> or <b>EXIT&#160;PARAGRAPH</b> or <b>EXIT&#160;SECTION</b> or <b>EXIT.</b></tt></td>/n<td><tt><b>EXIT PERFORM CYCLE</b></tt></td>/n<td><tt>label «<b>SECTION</b>»<b>.</b></tt></td>/n<td><tt><b>GO TO</b> label</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Ya</td>/n<td><tt><b>break</b> «from where»<b>;</b></tt> f.e.<br />/n<p><tt><b>break for switch;</b></tt></p>/n</td>/n<td><tt><b>continue</b> «to where»<b>;</b></tt> f.e.<br />/n<p><tt><b>continue for switch;</b></tt></p>/n</td>/n<td><tt><b>:</b>label</tt></td>/n<td><tt><b>goto&#160;:</b>label<b>;</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_Pascal.27s_declarations"><b><a href="#ref_Pascal.27s_declarations">^a</a></b></span> Pascal has declaration blocks. See <a href="/wiki/Comparison_of_programming_languages_(basic_instructions)#Functions" title="Comparison of programming languages (basic instructions)">Comparison of programming languages (basic instructions)#Functions</a>.<br />/n<span class="citation wikicite" id="endnote_Fortran_label"><b><a href="#ref_Fortran_label">^b</a></b></span> label must be a number between 1 and 99999.</p>/n<h2><span class="mw-headline" id="Functions"><a href="/wiki/Subroutine" title="Subroutine">Functions</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=16" title="Edit section: Functions">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>See <a href="/wiki/Reflection_(computer_science)" class="mw-redirect" title="Reflection (computer science)">reflection</a> for calling and declaring functions by strings.</p>/n<table class="wikitable">/n<tr valign="top">/n<th></th>/n<th>calling a function</th>/n<th>basic/void function</th>/n<th>value-returning function</th>/n<th>required <a href="/wiki/Main_function" class="mw-redirect" title="Main function">main function</a></th>/n</tr>/n<tr valign="top">/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-11" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><i>foo</i> «(parameters)»</tt></td>/n<td><tt><b>procedure</b> <i>foo</i> «(parameters)» <b>is begin</b> statements <b>end</b> foo</tt></td>/n<td><tt><b>function</b> <i>foo</i> «(parameters)» <b>return</b> type <b>is begin</b> statements <b>end</b> foo</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td><a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a></td>/n<td><tt><i>foo</i>«(parameters)»;</tt></td>/n<td><tt><b>proc</b> <i>foo</i> = «(parameters)» <a href="/wiki/Void_type" title="Void type">void</a>: ( <i>instructions</i> );</tt></td>/n<td><tt><b>proc</b> <i>foo</i> = «(parameters)» <b>rettype</b>: ( <i>instructions ...; retvalue</i> );</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td>C (C99)</td>/n<td rowspan="9"><tt><b>foo(</b>«parameters»<b>)</b></tt></td>/n<td rowspan="6"><tt><b><a href="/wiki/Void_type" title="Void type">void</a> foo(</b>«parameters»<b>) {</b> instructions <b>}</b></tt></td>/n<td rowspan="6"><tt>type <b>foo(</b>«parameters»<b>) {</b> instructions ... <b>return</b> value<b>; }</b></tt></td>/n<td rowspan="3"><tt>«global declarations»<br />/n<b>int main(</b>«<b>int argc, char *argv[]</b>»<b>) {</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>}</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Objective-C</td>/n</tr>/n<tr valign="top">/n<td>C++ (STL)</td>/n</tr>/n<tr valign="top">/n<td>C#</td>/n<td><tt><b>static void Main(</b>«<b>string[] args</b>»<b>) {</b> instructions <b>}</b> or<br />/n<b>static int Main(</b>«<b>string[] args</b>»<b>) {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Java</td>/n<td><tt><b>public static void main(String[] args) {</b> instructions <b>}</b> or<br />/n<b>public static void main(String<a href="/wiki/Variadic_function" title="Variadic function">...</a> args) {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr valign="top">/n<td>D</td>/n<td><tt><b>int main(</b>«<b>char[][] args</b>»<b>) {</b> instructions<b>}</b> or<br />/n<b>int main(</b>«<b>string[] args</b>»<b>) {</b> instructions<b>}</b> or<br />/n<b>void main(</b>«<b>char[][] args</b>»<b>) {</b> instructions<b>}</b> or<br />/n<b>void main(</b>«<b>string[] args</b>»<b>) {</b> instructions<b>}</b></tt></td>/n</tr>/n<tr valign="top">/n<td>JavaScript</td>/n<td><tt><b>function foo(</b>«parameters»<b>) {</b> instructions <b>}</b> or<br />/n<b>var foo = function (</b>«parameters»<b>) {</b>instructions <b>}</b> or<br />/n<b>var foo = new Function (</b>«<b>"</b>parameter<b>",</b> ... <b>,"</b>last parameter<b>"</b>» <b>"</b>instructions<b>");</b></tt></td>/n<td><tt><b>function foo(</b>«parameters»<b>) {</b> instructions ... <b>return</b> value<b>; }</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td>Go</td>/n<td><tt><b>func foo(</b>«parameters»<b>) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>func foo(</b>«parameters»<b>)</b> type <b>{</b> instructions ... <b>return</b> value <b>}</b></tt></td>/n<td><tt><b>func main() {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Swift</td>/n<td><tt><b>func foo(</b>«parameters»<b>) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>func foo(</b>«parameters»<b>) -&gt;</b> type <b>{</b> instructions ... <b>return</b> value <b>}</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td>Common Lisp</td>/n<td rowspan="3"><tt><b>(foo</b> «parameters»<b>)</b></tt></td>/n<td><tt><b>(<a href="/wiki/Defun" title="Defun">defun</a> foo (</b>«parameters»<b>)</b></tt>/n<dl>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n<tt>or<br />/n<b>(setf (symbol-function '</b>symbol<b>)</b></tt>/n<dl>/n<dd><tt>lambda<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(<a href="/wiki/Defun" title="Defun">defun</a> foo (</b>«parameters»<b>)</b></tt>/n<dl>/n<dd><tt>...</tt></dd>/n<dd><tt>value<b>)</b></tt></dd>/n</dl>/n</td>/n<td rowspan="3" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td>Scheme</td>/n<td><tt><b>(define (foo</b> parameters<b>)</b> instructions<b>)</b> or<br />/n<b>(define foo (<a href="/wiki/Anonymous_function" title="Anonymous function">lambda</a> (</b>parameters<b>)</b> instructions<b>))</b></tt></td>/n<td><tt><b>(define (foo</b> parameters<b>)</b> instructions... return_value<b>)</b> or<br />/n<b>(define foo (<a href="/wiki/Anonymous_function" title="Anonymous function">lambda</a> (</b>parameters<b>)</b> instructions... return_value<b>))</b></tt></td>/n</tr>/n<tr valign="top">/n<td>ISLISP</td>/n<td><tt><b>(<a href="/wiki/Defun" title="Defun">defun</a> foo (</b>«parameters»<b>)</b></tt>/n<dl>/n<dd><tt>instructions<b>)</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>(<a href="/wiki/Defun" title="Defun">defun</a> foo (</b>«parameters»<b>)</b></tt>/n<dl>/n<dd><tt>...</tt></dd>/n<dd><tt>value<b>)</b></tt></dd>/n</dl>/n</td>/n</tr>/n<tr valign="top">/n<td>Pascal</td>/n<td><tt><b>foo</b>«<b>(</b>parameters<b>)</b>»</tt></td>/n<td><tt><b>procedure foo</b>«<b>(</b>parameters<b>)</b>»<b>;</b> «<b>forward;</b>»<sup class="reference plainlinks nourlexpansion" id="ref_forward_declaration"><a href="#endnote_forward_declaration">[a]</a></sup><br />/n«<b>label</b></tt>/n<dl>/n<dd><tt>label declarations»</tt></dd>/n</dl>/n<tt>«<b>const</b></tt>/n<dl>/n<dd><tt>constant declarations»</tt></dd>/n</dl>/n<tt>«<b>type</b></tt>/n<dl>/n<dd><tt>type declarations»</tt></dd>/n</dl>/n<tt>«<b>var</b></tt>/n<dl>/n<dd><tt>variable declarations»</tt></dd>/n</dl>/n<tt>«local function declarations»<br />/n<b>begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end;</b></tt></td>/n<td><tt><b>function foo</b>«<b>(</b>parameters<b>)</b>»<b>:</b> type<b>;</b> «<b>forward;</b>»<sup class="reference plainlinks nourlexpansion" id="ref_forward_declaration"><a href="#endnote_forward_declaration">[a]</a></sup><br />/n«<b>label</b></tt>/n<dl>/n<dd><tt>label declarations»</tt></dd>/n</dl>/n<tt>«<b>const</b></tt>/n<dl>/n<dd><tt>constant declarations»</tt></dd>/n</dl>/n<tt>«<b>type</b></tt>/n<dl>/n<dd><tt>type declarations»</tt></dd>/n</dl>/n<tt>«<b>var</b></tt>/n<dl>/n<dd><tt>variable declarations»</tt></dd>/n</dl>/n<tt>«local function declarations»<br />/n<b>begin</b></tt>/n<dl>/n<dd><tt>instructions<b>;<br />/nfoo&#160;:=</b> value</tt></dd>/n</dl>/n<tt><b>end;</b></tt></td>/n<td><tt><b>program</b> name<b>;</b><br />/n«<b>label</b></tt>/n<dl>/n<dd><tt>label declarations»</tt></dd>/n</dl>/n<tt>«<b>const</b></tt>/n<dl>/n<dd><tt>constant declarations»</tt></dd>/n</dl>/n<tt>«<b>type</b></tt>/n<dl>/n<dd><tt>type declarations»</tt></dd>/n</dl>/n<tt>«<b>var</b></tt>/n<dl>/n<dd><tt>variable declarations»</tt></dd>/n</dl>/n<tt>«function declarations»<br />/n<b>begin</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end.</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Visual Basic</td>/n<td rowspan="3"><tt><b>Foo(</b>«parameters»<b>)</b></tt></td>/n<td rowspan="3"><tt><b>Sub Foo(</b>«parameters»<b>)</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>End Sub</b></tt></td>/n<td><tt><b>Function Foo(</b>«parameters»<b>) As</b> type</tt>/n<dl>/n<dd><tt>instructions<br />/n<b>Foo =</b> value</tt></dd>/n</dl>/n<tt><b>End Function</b></tt></td>/n<td><tt><b>Sub Main()</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>End Sub</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Visual Basic .NET</td>/n<td rowspan="2"><tt><b>Function Foo(</b>«parameters»<b>) As</b> type</tt>/n<dl>/n<dd><tt>instructions<br />/n<b>Return</b> value</tt></dd>/n</dl>/n<tt><b>End Function</b></tt></td>/n<td rowspan="2"><tt><b>Sub Main(</b>«<b>ByVal CmdArgs() As String</b>»<b>)</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>End Sub</b><br />/nor<br />/n<b>Function Main(</b>«<b>ByVal CmdArgs() As String</b>»<b>) As Integer</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>End Function</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Xojo</td>/n</tr>/n<tr valign="top">/n<td>Python</td>/n<td><tt><b>foo(</b>«parameters»<b>)</b></tt></td>/n<td><tt><b>def foo(</b>«parameters»<b>):</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions</tt></td>/n<td><tt><b>def foo(</b>«parameters»<b>):</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> <b>return</b> value</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td>S-Lang</td>/n<td><tt><b>foo(</b>«parameters» «;qualifiers»<b>)</b></tt></td>/n<td><tt><b>define foo (</b>«parameters»<b>) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>define foo (</b>«parameters»<b>) {</b> instructions ... <b>return</b> value<b>; }</b></tt></td>/n<td><tt><b>public define slsh_main () {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Fortran</td>/n<td><tt><b>foo (</b>«arguments»<b>)<br />/nCALL sub_foo (</b>«arguments»<b>)</b><sup class="reference plainlinks nourlexpansion" id="ref_Fortran_arguments"><a href="#endnote_Fortran_arguments">[c]</a></sup></tt></td>/n<td><tt><b>SUBROUTINE sub_foo (</b>«arguments»<b>)</b></tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>END SUBROUTINE</b><sup class="reference plainlinks nourlexpansion" id="ref_Fortran_arguments"><a href="#endnote_Fortran_arguments">[c]</a></sup></tt></td>/n<td><tt>type <b>FUNCTION foo (</b>«arguments»<b>)</b></tt>/n<dl>/n<dd><tt>instructions <b><br />/n...<br />/nfoo</b> = value </tt></dd>/n</dl>/n<tt><b>END FUNCTION</b><sup class="reference plainlinks nourlexpansion" id="ref_Fortran_arguments"><a href="#endnote_Fortran_arguments">[c]</a></sup></tt></td>/n<td><tt><b>PROGRAM</b> main</tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>END PROGRAM</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Forth</td>/n<td><tt>«parameters» <b>FOO</b></tt></td>/n<td><tt><b>: FOO</b> «&#160;<i>stack effect comment:</i> <b>(</b> before <b>-- )</b>&#160;»</tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>&#160;;</b></tt></td>/n<td><tt><b>: FOO</b> «&#160;<i>stack effect comment:</i> <b>(</b> before <b>--</b> after <b>)</b>&#160;»</tt>/n<dl>/n<dd><tt>instructions </tt></dd>/n</dl>/n<tt><b>&#160;;</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td>PHP</td>/n<td><tt><b>foo(</b>«parameters»<b>)</b></tt></td>/n<td><tt><b>function foo(</b>«parameters»<b>) {</b> instructions <b>}</b></tt></td>/n<td><tt><b>function foo(</b>«parameters»<b>) {</b> instructions <b>... return</b> value<b>; }</b></tt></td>/n<td rowspan="4" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td>Perl</td>/n<td><tt><b>foo(</b>«parameters»<b>)</b> or<br />/n<b>&amp;foo</b>«<b>(</b>parameters<b>)</b>»</tt></td>/n<td><tt><b>sub foo {</b> «<b>my (</b>parameters<b>) = @_;</b>» instructions <b>}</b></tt></td>/n<td><tt><b>sub foo {</b> «<b>my (</b>parameters<b>) = @_;</b>» instructions<b>...</b> «<b>return</b>» value<b>; }</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Perl 6</td>/n<td><tt><b>foo(</b>«parameters»<b>)</b> or<br />/n<b>&amp;foo</b>«<b>(</b>parameters<b>)</b>»</tt></td>/n<td><tt>«<b>multi</b>&#160;»<b>sub foo(</b>parameters<b>) {</b> instructions <b>}</b></tt></td>/n<td><tt>«<b>our</b> «type»&#160;»«<b>multi</b>&#160;»<b>sub foo(</b>parameters<b>) {</b> instructions<b>...</b> «<b>return</b>» value<b>; }</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Ruby</td>/n<td rowspan="2"><tt><b>foo</b>«<b>(</b>parameters<b>)</b>»</tt></td>/n<td><tt><b>def foo</b>«<b>(</b>parameters<b>)</b>»</tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n<td><tt><b>def foo</b>«<b>(</b>parameters<b>)</b>»</tt>/n<dl>/n<dd><tt>instructions<br />/n«<b>return</b>» value</tt></dd>/n</dl>/n<tt><b>end</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Scala</td>/n<td><tt><b>def foo</b>«<b>(</b>parameters<b>)</b>»«<b>: Unit =</b>» <b>{</b> instructions <b>}</b></tt></td>/n<td><tt><b>def foo</b>«<b>(</b>parameters<b>)</b>»«<b>:</b> type» <b>= {</b> instructions ... «<b>return</b>» value <b>}</b></tt></td>/n<td><tt><b>def main(args: Array[String]) {</b> instructions <b>}</b></tt></td>/n</tr>/n<tr valign="top">/n<td>Windows PowerShell</td>/n<td><tt><b>foo</b> «parameters»</tt></td>/n<td><tt><b>function foo</b> { <b>instructions</b> };<b><br />/nor<br /></b>function foo { <b>«</b>param(<b>parameters</b>)<b>»</b> <b>instructions</b> }</tt></td>/n<td><tt><b>function foo</b> «<b>(</b>parameters<b>)</b>» <b>{</b> instructions … <b>return</b> value <b>};</b> or<br />/n<b>function foo {</b> «<b>param(</b>parameters<b>)</b>» <b>instructions</b> … <b>return</b> value <b>}</b></tt></td>/n<td rowspan="4" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td rowspan="2">Bash shell</td>/n<td rowspan="2"><tt><b>foo</b> «parameters»</tt></td>/n<td>/n<div class="poem">/n<p><tt><b>function foo {</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>instructions<br />/n<b>}</b><br /></tt>or<tt><br />/n<b>foo () {</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>instructions<br />/n<b>}</b></tt></p>/n</div>/n</td>/n<td>/n<div class="poem">/n<p><tt><b>function foo {</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>instructions<br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span><b>return</b> «exit_code»<br />/n<b>}</b><br /></tt>or<tt><br />/n<b>foo () {</b><br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span>instructions<br />/n<span class="nowrap">&#160;&#160;&#160;&#160;</span><b>return</b> «exit_code»<br />/n<b>}</b></tt></p>/n</div>/n</td>/n</tr>/n<tr valign="top">/n<td colspan="2">/n<ul>/n<li>parameters/n<ul>/n<li><tt><b>$</b>n</tt> (<b>$1</b>, <b>$2</b>, <b>$3</b>, ...)</li>/n<li><tt><b>$@</b></tt> (all parameters)</li>/n<li><tt><b>$#</b></tt> (the number of parameters)</li>/n<li><tt><b>$0</b></tt> (this function name)</li>/n</ul>/n</li>/n</ul>/n</td>/n</tr>/n<tr valign="top">/n<td>OCaml</td>/n<td rowspan="4"><tt><b>foo</b> parameters</tt></td>/n<td rowspan="2"><tt><b>let</b> «<b>rec</b>» <b>foo</b> parameters <b>=</b> instructions</tt></td>/n<td rowspan="2"><tt><b>let</b> «<b>rec</b>» <b>foo</b> parameters <b>=</b> instructions... return_value</tt></td>/n</tr>/n<tr valign="top">/n<td>F#</td>/n<td><tt><b>[&lt;EntryPoint&gt;] let main args =</b> instructions</tt></td>/n</tr>/n<tr valign="top">/n<td>Standard ML</td>/n<td><tt><b>fun foo</b> parameters <b>= (</b> instructions <b>)</b></tt></td>/n<td><tt><b>fun foo</b> parameters <b>= (</b> instructions... return_value <b>)</b></tt></td>/n<td></td>/n</tr>/n<tr valign="top">/n<td>Haskell</td>/n<td><tt><b>foo</b> parameters <b>= do</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions</tt></td>/n<td><tt><b>foo</b> parameters <b>=</b> return_value<br />/nor<br />/n<b>foo</b> parameters <b>= do</b><br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> instructions<br />/n<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab ↹</kbd> <b>return</b> value</tt></td>/n<td><tt>«<b>main&#160;:: IO ()</b>»<br />/n<b>main = do</b> instructions</tt></td>/n</tr>/n<tr valign="top">/n<td>Eiffel</td>/n<td><tt><b>foo (</b>«parameters»<b>)</b></tt></td>/n<td><tt><b>foo (</b>«parameters»<b>)</b><br /></tt>/n<dl>/n<dd><tt><b>require</b></tt>/n<dl>/n<dd><tt>preconditions</tt></dd>/n</dl>/n<tt><b>do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n</dl>/n<tt><b>ensure</b></tt>/n<dl>/n<dd><tt>postconditions</tt></dd>/n</dl>/n<tt><b>end</b></tt></dd>/n</dl>/n</td>/n<td><tt><b>foo (</b>«parameters»<b>)</b>: type<br /></tt>/n<dl>/n<dd><tt><b>require</b></tt>/n<dl>/n<dd><tt>preconditions</tt></dd>/n</dl>/n<tt><b>do</b></tt>/n<dl>/n<dd><tt>instructions</tt></dd>/n<dd><tt><b>Result</b>&#160;:= value</tt></dd>/n</dl>/n<tt><b>ensure</b></tt>/n<dl>/n<dd><tt>postconditions</tt></dd>/n</dl>/n<tt><b>end</b></tt></dd>/n</dl>/n</td>/n<td><sup class="reference plainlinks nourlexpansion" id="ref_root_class_and_feature"><a href="#endnote_root_class_and_feature">[b]</a></sup></td>/n</tr>/n<tr valign="top">/n<td rowspan="2">CoffeeScript</td>/n<td><tt><b>foo()</b></tt></td>/n<td><tt><b>foo = -&gt;</b></tt></td>/n<td><tt><b>foo = -&gt;</b> value</tt></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr valign="top">/n<td><tt><b>foo</b> parameters</tt></td>/n<td><tt><b>foo = () -&gt;</b></tt></td>/n<td><tt><b>foo = (</b> parameters <b>) -&gt;</b> value</tt></td>/n</tr>/n<tr valign="top">/n<td rowspan="2">COBOL</td>/n<td><tt><b>CALL</b> <b>"</b>foo<b>"</b> «<b>USING</b> parameters»</tt>/n<dl>/n<dd><tt>«exception-handling»</tt></dd>/n</dl>/n<tt>«<b>END-CALL</b>»</tt><sup class="reference plainlinks nourlexpansion" id="ref_COBOL_calling_programs"><a href="#endnote_COBOL_calling_programs">[d]</a></sup></td>/n<td><tt>«<b>IDENTIFICATION DIVISION.</b>»<br /></tt>/n<p><tt><b>PROGRAM-ID.</b> foo<b>.</b><br />/n«other divisions...»<br />/n<b>PROCEDURE DIVISION</b> «<b>USING</b> parameters»<b>.</b><br /></tt></p>/n<dl>/n<dd><tt>instructions<b>.</b></tt></dd>/n</dl>/n</td>/n<td rowspan="2"><tt>«<b>IDENTIFICATION DIVISION.</b>»<br /></tt>/n<p><tt><b>PROGRAM-ID</b>/<b>FUNCTION-ID.</b> foo<b>.</b><br />/n«other divisions...»<br />/n<b>DATA DIVISION.</b><br />/n«other sections...»<br />/n<b>LINKAGE SECTION.</b><br />/n«parameter definitions...»<br />/nvariable-to-return definition<br />/n«other sections...»<br />/n<b>PROCEDURE DIVISION</b> «<b>USING</b> parameters» <b>RETURNING</b> variable-to-return<b>.</b><br /></tt></p>/n<dl>/n<dd><tt>instructions<b>.</b></tt></dd>/n</dl>/n</td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td><tt>«<b>FUNCTION</b>» foo«(«parameters»)»</tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_forward_declaration"><b><a href="#ref_forward_declaration">^a</a></b></span> Pascal requires "<tt>forward;</tt>" for <a href="/wiki/Forward_declaration" title="Forward declaration">forward declarations</a>.<br />/n<span class="citation wikicite" id="endnote_root_class_and_feature"><b><a href="#ref_root_class_and_feature">^b</a></b></span> Eiffel allows the specification of an application's root class and feature.<br />/n<span class="citation wikicite" id="endnote_Fortran_arguments"><b><a href="#ref_Fortran_arguments">^c</a></b></span> In Fortran, function/subroutine parameters are called arguments (since <tt>PARAMETER</tt> is a language keyword); the <tt>CALL</tt> keyword is required for subroutines.<br />/n<span class="citation wikicite" id="endnote_COBOL_calling_programs"><b><a href="#ref_COBOL_calling_programs">^d</a></b></span> Instead of using <tt>"foo"</tt>, a string variable may be used instead containing the same value.</p>/n<h2><span class="mw-headline" id="Type_conversions"><a href="/wiki/Type_conversion" title="Type conversion">Type conversions</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=17" title="Edit section: Type conversions">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>Where <i>string</i> is a signed decimal number:</p>/n<table class="wikitable">/n<tr>/n<th></th>/n<th>string to integer</th>/n<th>string to long integer</th>/n<th>string to floating point</th>/n<th>integer to string</th>/n<th>floating point to string</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-12" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><b>Integer'Value (</b>string_expression<b>)</b></tt></td>/n<td><tt><b>Long_Integer'Value (</b>string_expression<b>)</b></tt></td>/n<td><tt><b>Float'Value (</b>string_expression<b>)</b></tt></td>/n<td><tt><b>Integer'Image (</b>integer_expression<b>)</b></tt></td>/n<td><tt><b>Float'Image (</b>float_expression<b>)</b></tt></td>/n</tr>/n<tr>/n<td rowspan="3"><a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a> with general, and then specific formats</td>/n<td colspan="5" align="center">With prior declarations and association of: <tt><b>string</b> buf&#160;:= "12345678.9012e34 "; <b>file</b> proxy; associate(proxy, buf);</tt></td>/n</tr>/n<tr>/n<td>/n<pre>/nget(proxy, ivar);/n</pre></td>/n<td>/n<pre>/nget(proxy, livar);/n</pre></td>/n<td>/n<pre>/nget(proxy, rvar);/n</pre></td>/n<td>/n<pre>/nput(proxy, ival);/n</pre></td>/n<td>/n<pre>/nput(proxy, rval);/n</pre></td>/n</tr>/n<tr>/n<td>/n<pre>/ngetf(proxy, ($g$, ivar));/n</pre>/n<br />/norv/n<pre>/ngetf(proxy, ($dddd$, ivar));/n</pre></td>/n<td>/n<pre>/ngetf(proxy, ($g$, livar));/n</pre>/n<br />/nor<br />/n<pre>/ngetf(proxy, ($8d$, livar));/n</pre></td>/n<td>/n<pre>/ngetf(proxy, ($g$, rvar));/n</pre>/n<br />/nor<br />/n<pre>/ngetf(proxy, ($8d.4dE2d$, rvar));/n</pre></td>/n<td>/n<pre>/nputf(proxy, ($g$, ival));/n</pre>/n<br />/nor<br />/n<pre>/nputf(proxy, ($4d$, ival));/n</pre></td>/n<td>/n<pre>/nputf(proxy, ($g(width, places, exp)$, rval));/n</pre>/n<br />/nor<br />/n<pre>/nputf(proxy, ($8d.4dE2d$, rval));/n</pre>/n<br />/netc.</td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td><tt>integer <b>= <a href="/wiki/Atoi" class="mw-redirect" title="Atoi">atoi</a>(</b>string<b>);</b></tt></td>/n<td><tt>long <b>= <a href="/wiki/Atol_(programming)" class="mw-redirect" title="Atol (programming)">atol</a>(</b>string<b>);</b></tt></td>/n<td><tt>float <b>= <a href="/wiki/Atof" class="mw-redirect" title="Atof">atof</a>(</b>string<b>);</b></tt></td>/n<td><tt><b><a href="/wiki/Sprintf" class="mw-redirect" title="Sprintf">sprintf</a>(</b>string<b>, "%i",</b> integer<b>);</b></tt></td>/n<td><tt><b><a href="/wiki/Sprintf" class="mw-redirect" title="Sprintf">sprintf</a>(</b>string<b>, "%f",</b> float<b>);</b></tt></td>/n</tr>/n<tr>/n<td>Objective-C</td>/n<td><tt>integer <b>= [</b>string <b>intValue];</b></tt></td>/n<td><tt>long <b>= [</b>string <b>longLongValue];</b></tt></td>/n<td><tt>float <b>= [</b>string <b>doubleValue];</b></tt></td>/n<td><tt>string <b>= [NSString stringWithFormat<wbr />:@"%i",</b> integer<b>];</b></tt></td>/n<td><tt>string <b>= [NSString stringWithFormat<wbr />:@"%f",</b> float<b>];</b></tt></td>/n</tr>/n<tr>/n<td>C++ (STL)</td>/n<td colspan="3"><tt>«<b>std::</b>»<b>istringstream(</b>string<b>) &gt;&gt;</b> number;</tt></td>/n<td colspan="2"><tt>«<b>std::</b>»<b>ostringstream</b> o<b>;</b> o <b>&lt;&lt;</b> number<b>;</b> string <b>=</b> o<b>.str();</b></tt></td>/n</tr>/n<tr>/n<td>C++11</td>/n<td><tt>integer <b>= «</b>std::<b>»stoi(</b>string<b>);</b></tt></td>/n<td><tt>long <b>= «</b>std::<b>»stol(</b>string<b>);</b></tt></td>/n<td><tt>float <b>= «</b>std::<b>»stof(</b>string<b>);</b></tt>/n<p><tt>double <b>= «</b>std::<b>»stod(</b>string<b>);</b></tt></p>/n</td>/n<td colspan="2"><tt>string <b>= «</b>std::<b>»to_string(</b>number<b>);</b></tt></td>/n</tr>/n<tr>/n<td>C#</td>/n<td><tt>integer <b>= int.Parse<wbr />(</b>string<b>);</b></tt></td>/n<td><tt>long <b>= long.Parse<wbr />(</b>string<b>);</b></tt></td>/n<td><tt>float <b>= float.Parse<wbr />(</b>string<b>);</b> or<br />/ndouble <b>= double.Parse<wbr />(</b>string<b>);</b></tt></td>/n<td colspan="2"><tt>string <b>=</b> number<b><wbr />.ToString();</b></tt></td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt>integer <b>= std.conv.to!int<wbr />(</b>string<b>)</b></tt></td>/n<td><tt>long <b>= std.conv.to!long<wbr />(</b>string<b>)</b></tt></td>/n<td><tt>float <b>= std.conv.to!float<wbr />(</b>string<b>)</b> or<br />/ndouble <b>= std.conv.to!double<wbr />(</b>string<b>)</b></tt></td>/n<td colspan="2"><tt>string <b>= std.conv.to!string<wbr />(</b>number<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td><tt>integer <b>= Integer.parseInt<wbr />(</b>string<b>);</b></tt></td>/n<td><tt>long <b>= Long.parseLong<wbr />(</b>string<b>);</b></tt></td>/n<td><tt>float <b>= Float.parseFloat<wbr />(</b>string<b>);</b> or<br />/ndouble <b>= Double.parseDouble<wbr />(</b>string<b>);</b></tt></td>/n<td><tt>string <b>= Integer.toString<wbr />(</b>integer<b>);</b> or<br />/nstring <b>= String.valueOf<wbr />(</b>integer<b>);</b></tt></td>/n<td><tt>string <b>= Float.toString<wbr />(</b>float<b>);</b> or<br />/nstring <b>= Double.toString<wbr />(</b>double<b>);</b></tt></td>/n</tr>/n<tr>/n<td><tt>JavaScript<sup class="reference plainlinks nourlexpansion" id="ref_JavaScript.27s_technicalities"><a href="#endnote_JavaScript.27s_technicalities">[a]</a></sup></tt></td>/n<td colspan="2"><tt>integer <b>= parseInt(</b>string<b>);</b></tt></td>/n<td><tt>float <b>= parseFloat(</b>string<b>);</b> or<br />/nfloat <b>= new Number (</b>string<b>)</b> or<br />/nfloat <b>= Number (</b>string<b>)</b> or<br />/nfloat <b>= +</b>string</tt></td>/n<td colspan="2"><tt>string <b>=</b> number<b>.toString ();</b> or<br />/nstring <b>= new String (</b>number<b>);</b> or<br />/nstring <b>= String (</b>number<b>);</b> or<br />/nstring <b>=</b> number<b>+"";</b></tt></td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt>integer<b>,</b> error <b>= strconv.Atoi(</b>string<b>)</b> or<br />/ninteger<b>,</b> error <b>= strconv.ParseInt<wbr />(</b>string<b>, 10, 0)</b></tt></td>/n<td><tt>long<b>,</b> error <b>= strconv.ParseInt<wbr />(</b>string<b>, 10, 64)</b></tt></td>/n<td><tt>float<b>,</b> error <b>= strconv.ParseFloat<wbr />(</b>string<b>, 64)</b></tt></td>/n<td><tt>string <b>= strconv.Itoa(</b>integer<b>)</b> or<br />/nstring <b>= strconv.FormatInt<wbr />(</b>integer<b>, 10)</b> or<br />/nstring <b>= fmt.Sprint(</b>integer<b>)</b></tt></td>/n<td><tt>string <b>= strconv.FormatFloat<wbr />(</b>float<b>)</b> or<br />/nstring <b>= fmt.Sprint<wbr />(</b>float<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td colspan="2"><tt><b>(setf</b> integer <b>(parse-integer</b> string<b>))</b></tt></td>/n<td><tt><b>(setf</b> float <b>(read-from-string</b> string<b>))</b></tt></td>/n<td colspan="2"><tt><b>(setf</b> string <b>(princ-to-string</b> number<b>))</b></tt></td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td colspan="3"><tt><b>(define</b> number <b>(string-&gt;number</b> string<b>))</b></tt></td>/n<td colspan="2"><tt><b>(define</b> string <b>(number-&gt;string</b> number<b>))</b></tt></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td colspan="2"><tt><b>(setf</b> integer <b>(convert</b> string <b>&lt;integer&gt;))</b></tt></td>/n<td><tt><b>(setf</b> float <b>(convert</b> string <b>&lt;float&gt;))</b></tt></td>/n<td colspan="2"><tt><b>(setf</b> string <b>(convert</b> number <b>&lt;string&gt;))</b></tt></td>/n</tr>/n<tr>/n<td>Pascal</td>/n<td><tt>integer <b>:= StrToInt(</b>string<b>);</b></tt></td>/n<td></td>/n<td><tt>float <b>:= StrToFloat(</b>string<b>);</b></tt></td>/n<td><tt>string <b>:= IntToStr(</b>integer<b>);</b></tt></td>/n<td><tt>string <b>:= FloatToStr(</b>float<b>);</b></tt></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td rowspan="2"><tt>integer <b>= CInt(</b>string<b>)</b></tt></td>/n<td rowspan="2"><tt>long <b>= CLng(</b>string<b>)</b></tt></td>/n<td rowspan="2"><tt>float <b>= CSng(</b>string<b>)</b> or<br />/ndouble <b>= CDbl(</b>string<b>)</b></tt></td>/n<td rowspan="2" colspan="2">string <b>= CStr(</b>number<b>)</b></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n</tr>/n<tr>/n<td>Xojo</td>/n<td><tt>integer <b>= Val(</b>string<b>)</b></tt></td>/n<td><tt>long <b>= Val(</b>string<b>)</b></tt></td>/n<td><tt>double <b>= Val(</b>string<b>)</b> or<br />/ndouble <b>= CDbl(</b>string<b>)</b></tt></td>/n<td colspan="2"><tt>string <b>= CStr(</b>number<b>)</b> or<br />/nstring <b>= Str(</b>number<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Python</td>/n<td><tt>integer <b>= int(</b>string<b>)</b></tt></td>/n<td><tt>long <b>= long(</b>string<b>)</b></tt></td>/n<td><tt>float <b>= float(</b>string<b>)</b></tt></td>/n<td colspan="2"><tt>string <b>= str(</b>number<b>)</b></tt></td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt>integer <b>= <a href="/wiki/Atoi" class="mw-redirect" title="Atoi">atoi</a>(</b>string<b>);</b></tt></td>/n<td><tt>long <b>= <a href="/wiki/Atol_(programming)" class="mw-redirect" title="Atol (programming)">atol</a>(</b>string<b>);</b></tt></td>/n<td><tt>float <b>= <a href="/wiki/Atof" class="mw-redirect" title="Atof">atof</a>(</b>string<b>);</b></tt></td>/n<td colspan="2"><tt>string <b>= string(</b>number<b>);</b></tt></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td colspan="3"><tt><b>READ(</b>string<b>,</b>format<b>)</b> number</tt></td>/n<td colspan="2"><tt><b>WRITE(</b>string<b>,</b>format<b>)</b> number</tt></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td colspan="2"><tt>integer <b>= intval(</b>string<b>);</b> or<br />/ninteger <b>= (int)</b>string<b>;</b></tt></td>/n<td><tt>float <b>= floatval(</b>string<b>);</b> or<br />/nfloat <b>= (float)</b>string<b>;</b></tt></td>/n<td colspan="2"><tt>string <b>= "</b>number<b>";</b> or<br />/nstring <b>= strval(</b>number<b>);</b> or<br />/nstring <b>= (string)</b>number<b>;</b></tt></td>/n</tr>/n<tr>/n<td>Perl<sup class="reference plainlinks nourlexpansion" id="ref_Perl.27s_technicalities"><a href="#endnote_Perl.27s_technicalities">[b]</a></sup></td>/n<td colspan="3"><tt>number <b>= 0 +</b> string;</tt></td>/n<td colspan="2"><tt>string <b>= "</b>number<b>";</b></tt></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td colspan="3"><tt>number <b>= +</b>string;</tt></td>/n<td colspan="2"><tt>string <b>= ~</b>number<b>;</b></tt></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td colspan="2"><tt>integer <b>=</b> string<b>.to_i</b> or<br />/ninteger <b>= Integer(</b>string<b>)</b></tt></td>/n<td><tt>float <b>=</b> string<b>.to_f</b> or<br />/nfloat <b>= Float(</b>string<b>)</b></tt></td>/n<td colspan="2"><tt>string <b>=</b> number<b>.to_s</b></tt></td>/n</tr>/n<tr>/n<td>Scala</td>/n<td><tt>integer <b>=</b> string<b>.toInt</b></tt></td>/n<td><tt>long <b>=</b> string<b>.toLong</b></tt></td>/n<td><tt>float <b>=</b> string<b>.toFloat</b> or<br />/ndouble <b>=</b> string<b>.toDouble</b></tt></td>/n<td colspan="2"><tt>string <b>=</b> number<b>.toString</b></tt></td>/n</tr>/n<tr>/n<td>Smalltalk</td>/n<td colspan="2"><tt>integer&#160;:= Integer <b>readFrom:</b> string</tt></td>/n<td><tt>float&#160;:= Float <b>readFrom:</b> string</tt></td>/n<td colspan="2"><tt>string&#160;:= number <b>asString</b></tt></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td><tt>integer <b>= [int]</b>string</tt></td>/n<td><tt>long <b>= [long]</b>string</tt></td>/n<td><tt>float <b>= [float]</b>string</tt></td>/n<td colspan="2"><tt>string <b>= [string]</b>number<b>;</b> or<br />/nstring <b>= "</b>number<b>";</b> or<br />/nstring <b>= (</b>number<b>).ToString()</b></tt></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td><tt><b>let</b> integer <b>= int_<wbr />of_string</b> string</tt></td>/n<td></td>/n<td><tt><b>let</b> float <b>= float_<wbr />of_string</b> string</tt></td>/n<td><tt><b>let</b> string <b>= string_<wbr />of_int</b> integer</tt></td>/n<td><tt><b>let</b> string <b>= string_<wbr />of_float</b> float</tt></td>/n</tr>/n<tr>/n<td>F#</td>/n<td><tt><b>let</b> integer <b>= int</b> string</tt></td>/n<td><tt><b>let</b> integer <b>= int64</b> string</tt></td>/n<td><tt><b>let</b> float <b>= float</b> string</tt></td>/n<td colspan="2"><tt><b>let</b> string <b>= string</b> number</tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td><tt><b>val</b> integer <b>= Int<wbr />.fromString</b> string</tt></td>/n<td></td>/n<td><tt><b>val</b> float <b>= Real<wbr />.fromString</b> string</tt></td>/n<td><tt><b>val</b> string <b>= Int<wbr />.toString</b> integer</tt></td>/n<td><tt><b>val</b> string <b>= Real<wbr />.toString</b> float</tt></td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td colspan="3"><tt>number <b>= read</b> string</tt></td>/n<td colspan="2"><tt>string <b>= show</b> number</tt></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td colspan="3"><code><b>MOVE</b> «<b>FUNCTION</b>» <b>NUMVAL(</b>string<b>)</b><sup class="reference plainlinks nourlexpansion" id="ref_COBOL.27s_NUMVAL_alternatives"><a href="#endnote_COBOL.27s_NUMVAL_alternatives">[c]</a></sup> <b>TO</b> number</code></td>/n<td colspan="2"><code><b>MOVE</b> number <b>TO</b> numeric-edited</code></td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_JavaScript.27s_technicalities"><b><a href="#ref_JavaScript.27s_technicalities">^a</a></b></span> JavaScript only uses floating point numbers so there are some technicalities.<sup id="cite_ref-Javascript_numbers_7-1" class="reference"><a href="#cite_note-Javascript_numbers-7">[7]</a></sup><br />/n<span class="citation wikicite" id="endnote_Perl.27s_technicalities"><b><a href="#ref_Perl.27s_technicalities">^b</a></b></span> Perl doesn't have separate types. Strings and numbers are interchangeable.<br />/n<span class="citation wikicite" id="endnote_COBOL.27s_NUMVAL_alternatives"><b><a href="#ref_COBOL.27s_NUMVAL_alternatives">^c</a></b></span> <code>NUMVAL-C</code> or <code>NUMVAL-F</code> may be used instead of <code>NUMVAL</code>.</p>/n<h2><span id="Standard_stream_I/O"></span><span class="mw-headline" id="Standard_stream_I.2FO"><a href="/wiki/Standard_streams" title="Standard streams">Standard stream I/O</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=18" title="Edit section: Standard stream I/O">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<table class="wikitable">/n<tr>/n<th rowspan="2"></th>/n<th>read from</th>/n<th colspan="2">write to</th>/n</tr>/n<tr>/n<th><a href="/wiki/Stdin" class="mw-redirect" title="Stdin">stdin</a></th>/n<th><a href="/wiki/Stdout" class="mw-redirect" title="Stdout">stdout</a></th>/n<th><a href="/wiki/Stderr" class="mw-redirect" title="Stderr">stderr</a></th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-13" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><b>Get (</b>x<b>)</b></tt></td>/n<td><tt><b>Put (</b>x<b>)</b></tt></td>/n<td><tt><b>Put (Standard_Error,</b> x<b>)</b></tt></td>/n</tr>/n<tr>/n<td><a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a></td>/n<td><tt><b>readf((</b>$format$<b>,</b> x<b>));</b> or<br />/n<b>getf(stand in, (</b>$format$<b>,</b> x<b>));</b></tt></td>/n<td><tt><b><a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a>((</b>$format$<b>,</b> x<b>));</b> or<br />/n<b>putf(stand out, (</b>$format$<b>,</b> x<b>));</b></tt></td>/n<td><tt><b>putf(stand error, (</b>$format$<b>,</b> x<b>));</b><sup class="reference plainlinks nourlexpansion" id="ref_ALGOL_Unformatted"><a href="#endnote_ALGOL_Unformatted">[a]</a></sup></tt></td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td><tt><b><a href="/wiki/Scanf" class="mw-redirect" title="Scanf">scanf</a>(</b>format<b>, &amp;</b>x<b>);</b> or<br />/n<b><a href="/wiki/Fscanf" class="mw-redirect" title="Fscanf">fscanf</a>(stdin,</b> format<b>, &amp;</b>x<b>);</b> <sup class="reference plainlinks nourlexpansion" id="ref_more_c_input"><a href="#endnote_more_c_input">[b]</a></sup></tt></td>/n<td><tt><b><a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a>(</b> format<b>,</b> x<b>);</b> or<br />/n<b><a href="/wiki/Fprintf" class="mw-redirect" title="Fprintf">fprintf</a>(stdout,</b> format<b>,</b> x<b>);</b> <sup class="reference plainlinks nourlexpansion" id="ref_more_c_output"><a href="#endnote_more_c_output">[c]</a></sup></tt></td>/n<td><tt><b><a href="/wiki/Fprintf" class="mw-redirect" title="Fprintf">fprintf</a>(stderr,</b> format<b>,</b> x <b>);</b><sup class="reference plainlinks nourlexpansion" id="ref_more_c_error_output"><a href="#endnote_more_c_error_output">[d]</a></sup></tt></td>/n</tr>/n<tr>/n<td>Objective-C</td>/n<td><tt>data = <b>[[NSFileHandle fileHandleWithStandardInput] readDataToEndOfFile];</b></tt></td>/n<td><tt><b>[[NSFileHandle fileHandleWithStandardOutput] writeData:</b>data<b>];</b></tt></td>/n<td><tt><b>[[NSFileHandle fileHandleWithStandardError] writeData:</b>data<b>];</b></tt></td>/n</tr>/n<tr>/n<td>C++</td>/n<td><tt><a href="/wiki/Iostream" class="mw-redirect" title="Iostream">«<b>std::</b>»<b>cin</b></a> <b>&gt;&gt;</b> x<b>;</b> or<br />/n«<b>std::</b>»<b>getline(</b>«<b>std::</b>»<b>cin,</b> str<b>);</b></tt></td>/n<td><tt><a href="/wiki/Iostream" class="mw-redirect" title="Iostream">«<b>std::</b>»<b>cout</b></a> <b>&lt;&lt;</b> x<b>;</b></tt></td>/n<td><tt><a href="/wiki/Iostream" class="mw-redirect" title="Iostream">«<b>std::</b>»<b>cerr</b></a> <b>&lt;&lt;</b> x<b>;</b> or<br />/n<a href="/wiki/Iostream" class="mw-redirect" title="Iostream">«<b>std::</b>»<b>clog</b></a> <b>&lt;&lt;</b> x<b>;</b></tt></td>/n</tr>/n<tr>/n<td>C#</td>/n<td><tt>x <b>= Console.Read();</b> or<br />/nx <b>= Console.ReadLine();</b></tt></td>/n<td><tt><b>Console.Write(</b>«format<b>,</b> »x<b>);</b> or<br />/n<b>Console.WriteLine(</b>«format<b>,</b> »x<b>);</b></tt></td>/n<td><tt><b>Console.Error<wbr />.Write(</b>«format<b>,</b> »x<b>);</b> or<br />/n<b>Console.Error<wbr />.WriteLine(</b>«format<b>,</b> »x<b>);</b></tt></td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt>x = <b>std.stdio.readln()</b></tt></td>/n<td><tt><b>std.stdio.write(</b>x<b>)</b> or<br />/n<b>std.stdio.writeln(</b>x<b>)</b> or<br />/n<b>std.stdio.writef(</b>format<b>,</b> x<b>)</b> or<br />/n<b>std.stdio.writefln(</b>format<b>,</b> x<b>)</b></tt></td>/n<td><tt><b>stderr.write(</b>x<b>)</b> or<br />/n<b>stderr.writeln(</b>x<b>)</b> or<br />/n<b>std.stdio<wbr />.writef(stderr,</b> format<b>,</b> x<b>)</b> or<br />/n<b>std.stdio<wbr />.writefln(stderr,</b> format<b>,</b> x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td><tt>x <b>= System.in.read();</b> or<br />/nx <b>= new Scanner(System.in)<wbr />.nextInt();</b> or<br />/nx <b>= new Scanner(System.in)<wbr />.nextLine();</b></tt></td>/n<td><tt><b>System.out.print(</b>x<b>);</b> or<br />/n<b>System.out.<a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a>(</b>format<b>,</b> x<b>);</b> or<br />/n<b>System.out.println(</b>x<b>);</b></tt></td>/n<td><tt><b>System.err.print(</b>x<b>);</b> or<br />/n<b>System.err.<a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a>(</b>format<b>,</b> x<b>);</b> or<br />/n<b>System.err.println(</b>x<b>);</b></tt></td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt><b>fmt.Scan(&amp;</b>x<b>)</b> or<br />/n<b>fmt.<a href="/wiki/Scanf" class="mw-redirect" title="Scanf">Scanf</a>(</b>format<b>, &amp;</b>x<b>)</b> or<br />/nx = <b>bufio.NewReader(os.Stdin)<wbr />.ReadString('\n')</b></tt></td>/n<td><tt><b>fmt.Println(</b>x<b>)</b> or<br />/n<b>fmt.<a href="/wiki/Printf" class="mw-redirect" title="Printf">Printf</a>(</b>format<b>,</b> x<b>)</b></tt></td>/n<td><tt><b>fmt.Fprintln(os.Stderr,</b> x<b>)</b> or<br />/n<b>fmt.<a href="/wiki/Fprintf" class="mw-redirect" title="Fprintf">Fprintf</a>(os.Stderr,</b> format<b>,</b> x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt>x = <b>readLine()</b></tt> (2.x)</td>/n<td><tt><b>print(</b>x<b>)</b></tt> (2.x)<br />/n<tt><b>println(</b>x<b>)</b></tt> (1.x)</td>/n<td></td>/n</tr>/n<tr>/n<td>JavaScript<br />/n<small><a href="/wiki/Client-side_JavaScript" class="mw-redirect" title="Client-side JavaScript">Web Browser implementation</a></small></td>/n<td></td>/n<td><tt><b>document.write(</b>x<b>)</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>JavaScript<br />/n<small><a href="/wiki/Active_Server_Pages" title="Active Server Pages">Active Server Pages</a></small></td>/n<td></td>/n<td><tt><b>Response.Write(</b>x<b>)</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>JavaScript<br />/n<small><a href="/wiki/Windows_Script_Host" title="Windows Script Host">Windows Script Host</a></small></td>/n<td><tt>x <b>= WScript.StdIn.Read(</b>chars<b>)</b> or<br />/nx <b>= WScript.StdIn.ReadLine()</b></tt></td>/n<td><tt><b>WScript.Echo(</b>x<b>)</b> or<br />/n<b>WScript.StdOut.Write(</b>x<b>)</b> or<br />/n<b>WScript.StdOut.WriteLine(</b>x<b>)</b></tt></td>/n<td><tt><b>WScript.StdErr.Write(</b>x<b>)</b> or<br />/n<b>WScript.StdErr.WriteLine(</b>x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td><tt><b>(setf</b> x <b>(read-line))</b></tt></td>/n<td><tt><b>(princ</b> x<b>)</b> or<br />/n<b>(format t</b> format x<b>)</b></tt></td>/n<td><tt><b>(princ</b> x <b>*error-output*)</b> or<br />/n<b>(format *error-output*</b> format x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Scheme (R<sup>6</sup>RS)</td>/n<td><tt><b>(define</b> x <b>(read-line))</b></tt></td>/n<td><tt><b>(display</b> x<b>)</b> or<br />/n<b>(format #t</b> format x<b>)</b></tt></td>/n<td><tt><b>(display</b> x <b>(current-error-port))</b> or<br />/n<b>(format (current-error-port)</b> format x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td><tt><b>(setf</b> x <b>(read-line))</b></tt></td>/n<td><tt><b>(format (standard-output)</b> format x<b>)</b></tt></td>/n<td><tt><b>(format (error-output)</b> format x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Pascal</td>/n<td><tt><b>read(</b>x<b>);</b> or<br />/n<b>readln(</b>x<b>);</b></tt></td>/n<td><tt><b>write(</b>x<b>);</b> or<br />/n<b>writeln(</b>x<b>);</b></tt></td>/n<td rowspan="2" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td><tt><b>Input</b>«&#160;prompt<b>,</b>» x</tt></td>/n<td><tt><b>Print</b> x or<br />/n<b>?</b> x</tt></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td><tt>x <b>= Console.Read()</b> or<br />/nx <b>= Console.ReadLine()</b></tt></td>/n<td><tt><b>Console.Write(</b>«format<b>,</b> »x<b>)</b> or<br />/n<b>Console.WriteLine(</b>«format<b>,</b> »x<b>)</b></tt></td>/n<td><tt><b>Console.Error<wbr />.Write(</b>«format<b>,</b> »x<b>)</b> or<br />/n<b>Console.Error<wbr />.WriteLine(</b>«format<b>,</b> »x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Xojo</td>/n<td><tt>x <b>= StandardInputStream.Read()</b> or<br />/nx <b>= StandardInputStreame.ReadLine()</b></tt></td>/n<td><tt><b>StandardOutputStream.Write(</b>x<b>)</b> or<br />/n<b>StandardOutputStream.WriteLine(</b>x<b>)</b></tt></td>/n<td><tt><b>StdErr.Write(</b>x<b>)</b> or<br />/n<b>StdErr.WriteLine(</b>x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Python 2.x</td>/n<td><tt>x <b>= raw_input(</b>«prompt»<b>)</b></tt></td>/n<td><tt><b>print</b> x or<br />/n<b>sys.stdout.write(</b>x<b>)</b></tt></td>/n<td><tt><b>print &gt;&gt; sys.stderr,</b> x or<br />/n<b>sys.stderr.write(</b>x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Python 3.x</td>/n<td><tt>x <b>= input(</b>«prompt»<b>)</b></tt></td>/n<td><tt><b>print(</b>x«<b>, end=""</b>»<b>)</b></tt></td>/n<td><tt><b>print(</b>x«<b>, end=""</b>»<b>, file=sys.stderr)</b></tt></td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt><b><a href="/wiki/Fgets" class="mw-redirect" title="Fgets">fgets</a> (&amp;</b>x<b>, stdin)</b></tt></td>/n<td><tt><b><a href="/wiki/Fputs" class="mw-redirect" title="Fputs">fputs</a> (</b>x<b>, stdout)</b></tt></td>/n<td><tt><b><a href="/wiki/Fputs" class="mw-redirect" title="Fputs">fputs</a> (</b>x<b>, stderr)</b></tt></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td><tt><b>READ(*,</b>format<b>)</b> variable names <b>or<br />/nREAD(INPUT_UNIT,</b>format<b>)</b> variable names<b><sup class="reference plainlinks nourlexpansion" id="ref_Fortran_standard_units"><a href="#endnote_Fortran_standard_units">[e]</a></sup></b></tt></td>/n<td><tt><b>WRITE(*,</b>format<b>)</b> expressions <b>or<br />/nWRITE(OUTPUT_UNIT,</b>format<b>)</b> expressions<b><sup class="reference plainlinks nourlexpansion" id="ref_Fortran_standard_units"><a href="#endnote_Fortran_standard_units">[e]</a></sup></b></tt></td>/n<td><tt><b>WRITE(ERROR_UNIT,</b>format<b>)</b> expressions<sup class="reference plainlinks nourlexpansion" id="ref_Fortran_standard_units"><a href="#endnote_Fortran_standard_units">[e]</a></sup></tt></td>/n</tr>/n<tr>/n<td>Forth</td>/n<td><tt>buffer length <b>ACCEPT</b> ( # chars read )<br />/n<b>KEY</b> ( char )</tt></td>/n<td><tt>buffer length <b>TYPE</b><br />/nchar <b>EMIT</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>PHP</td>/n<td><tt>$x <b>= <a href="/wiki/Fgets" class="mw-redirect" title="Fgets">fgets</a>(STDIN);</b> or<br />/n$x <b>= <a href="/wiki/Fscanf" class="mw-redirect" title="Fscanf">fscanf</a>(STDIN,</b> format<b>);</b></tt></td>/n<td><tt><b>print</b> x<b>;</b> or<br />/n<b><a href="/wiki/Echo_(command)" title="Echo (command)">echo</a></b> x<b>;</b> or<br />/n<b><a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a>(</b>format<b>,</b> x<b>);</b></tt></td>/n<td><tt><b><a href="/wiki/Fprintf" class="mw-redirect" title="Fprintf">fprintf</a>(STDERR,</b> format<b>,</b> x<b>);</b></tt></td>/n</tr>/n<tr>/n<td>Perl</td>/n<td><tt>$x <b>= &lt;&gt;;</b> or<br />/n$x <b>= &lt;STDIN&gt;;</b></tt></td>/n<td><tt><b>print</b> x<b>;</b> or<br />/n<b><a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a></b> format<b>,</b> x<b>;</b></tt></td>/n<td><tt><b>print STDERR</b> x<b>;</b> or<br />/n<b><a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a> STDERR</b> format<b>,</b> x<b>;</b></tt></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td><tt>$x <b>= $*IN.get;</b></tt></td>/n<td><tt>x<b>.print</b> or<br />/nx<b>.say</b></tt></td>/n<td><tt>x<b>.note</b> or<br />/n<b>$*ERR.print(</b>x<b>)</b> or<br />/n<b>$*ERR.say(</b>x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><tt>x <b>= gets</b></tt></td>/n<td><tt><b>puts</b> x or<br />/n<b><a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a>(</b>format<b>,</b> x<b>)</b></tt></td>/n<td><tt><b>$stderr.puts(</b>x<b>)</b> or<br />/n<b>$stderr.<a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a>(</b>format<b>,</b> x<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td><tt>$x <b>= Read-Host</b>«« <b>-Prompt</b>» text»<b>;</b> or<br />/n$x <b>= [Console]::Read();</b> or<br />/n$x <b>= [Console]::ReadLine()</b></tt></td>/n<td><tt>x<b>;</b> or<br />/n<b>Write-Output</b> x<b>;</b> or<br />/n<b>echo</b> x</tt></td>/n<td><tt><b>Write-Error</b> x</tt></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td><tt><b>let</b> x <b>= read_int ()</b> or<br />/n<b>let</b> str <b>= read_line ()</b> or<br />/n<b>Scanf.<a href="/wiki/Scanf" class="mw-redirect" title="Scanf">scanf</a></b> format <b>(fun</b> x ... <b>-&gt;</b> ...<b>)</b></tt></td>/n<td><tt><b>print_int</b> x or<br />/n<b>print_endline</b> str or<br />/n<b>Printf.<a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a></b> format x ...</tt></td>/n<td><tt><b>prerr_int</b> x or<br />/n<b>prerr_endline</b> str or<br />/n<b>Printf.<a href="/wiki/Fprintf" class="mw-redirect" title="Fprintf">eprintf</a></b> format x ...</tt></td>/n</tr>/n<tr>/n<td>F#</td>/n<td><tt><b>let</b> x <b>= System.Console<wbr />.ReadLine()</b></tt></td>/n<td><tt><b><a href="/wiki/Printf" class="mw-redirect" title="Printf">printf</a></b> format x ... or<br />/n<b><a href="/wiki/Printf" class="mw-redirect" title="Printf">printfn</a></b> format x ...</tt></td>/n<td><tt><b><a href="/wiki/Fprintf" class="mw-redirect" title="Fprintf">eprintf</a></b> format x ... or<br />/n<b><a href="/wiki/Fprintf" class="mw-redirect" title="Fprintf">eprintfn</a></b> format x ...</tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td><tt><b>val</b> str <b>= TextIO.inputLIne TextIO.stdIn</b></tt></td>/n<td><tt><b>print</b> str</tt></td>/n<td><tt><b>TextIO.output (TextIO.stdErr,</b> str<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td><tt>x <b>&lt;- readLn</b> or<br />/nstr <b>&lt;- getLine</b></tt></td>/n<td><tt><b>print</b> x or<br />/n<b>putStrLn</b> str</tt></td>/n<td><tt><b>hPrint stderr</b> x or<br />/n<b>hPutStrLn stderr</b> str</tt></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td><code><b>ACCEPT</b> x</code></td>/n<td><code><b>DISPLAY</b> x</code></td>/n<td></td>/n</tr>/n</table>/n<p><br />/n<span class="citation wikicite" id="endnote_ALGOL_Unformatted"><b><a href="#ref_ALGOL_Unformatted">^a</a></b></span> ALGOL 68 additionally as the "unformatted" <a href="/wiki/Transput" class="mw-redirect" title="Transput">transput</a> routines: <tt><i>read</i>, <i>write</i>, <i>get</i></tt> and <tt><i>put</i></tt>.<br />/n<span class="citation wikicite" id="endnote_more_c_input"><b><a href="#ref_more_c_input">^b</a></b></span> <tt><b><a href="/wiki/Gets()" class="mw-redirect" title="Gets()">gets</a>(x)</b></tt> and <tt><b><a href="/wiki/Fgets" class="mw-redirect" title="Fgets">fgets</a>(x,</b> length<b>, stdin)</b></tt> read unformatted text from stdin. Use of gets is not recommended.<br />/n<span class="citation wikicite" id="endnote_more_c_input"><b><a href="#ref_more_c_input">^c</a></b></span> <tt><b><a href="/wiki/Puts_(C)" class="mw-redirect" title="Puts (C)">puts</a>(x)</b></tt> and <tt><b><a href="/wiki/Fputs" class="mw-redirect" title="Fputs">fputs</a>(x, stdout)</b></tt> write unformatted text to stdout.<br />/n<span class="citation wikicite" id="endnote_more_c_error_output"><b><a href="#ref_more_c_error_output">^d</a></b></span> <tt><b>fputs(x, stderr)</b></tt> writes unformatted text to stderr<br />/n<span class="citation wikicite" id="endnote_Fortran_standard_units"><b><a href="#ref_Fortran_standard_units">^e</a></b></span> <tt><b>INPUT_UNIT</b>, <b>OUTPUT_UNIT</b>, <b>ERROR_UNIT</b></tt> are defined in the <tt>ISO_FORTRAN_ENV</tt> module.<sup id="cite_ref-14" class="reference"><a href="#cite_note-14">[14]</a></sup></p>/n<h2><span class="mw-headline" id="Reading_command-line_arguments">Reading <a href="/wiki/Command-line_argument" class="mw-redirect" title="Command-line argument">command-line arguments</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=19" title="Edit section: Reading command-line arguments">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<table class="wikitable">/n<tr>/n<th></th>/n<th>Argument values</th>/n<th>Argument counts</th>/n<th>Program name / Script name</th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-14" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td><tt><b>Argument (</b>n<b>)</b></tt></td>/n<td><tt><b>Argument_Count</b></tt></td>/n<td><tt><b>Command_Name</b></tt></td>/n</tr>/n<tr>/n<td>C (C99)</td>/n<td rowspan="3"><tt><b>argv[</b>n<b>]</b></tt></td>/n<td rowspan="3"><tt><b>argc</b></tt></td>/n<td rowspan="3">first argument</td>/n</tr>/n<tr>/n<td>Objective-C</td>/n</tr>/n<tr>/n<td>C++</td>/n</tr>/n<tr>/n<td>C#</td>/n<td rowspan="3"><tt><b>args[</b>n<b>]</b></tt></td>/n<td><tt><b>args.Length</b></tt></td>/n<td><tt><b>Assembly.GetEntryAssembly()<wbr />.Location;</b></tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td rowspan="2"><tt><b>args.length</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>D</td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>JavaScript<br />/n<small><a href="/wiki/Windows_Script_Host" title="Windows Script Host">Windows Script Host</a> implementation</small></td>/n<td><tt><b>WScript.Arguments(</b>n<b>)</b></tt></td>/n<td><tt><b>WScript.Arguments.length</b></tt></td>/n<td><tt><b>WScript.ScriptName</b> or <b>WScript.ScriptFullName</b></tt></td>/n</tr>/n<tr>/n<td>Go</td>/n<td><tt><b>os.Args[</b>n<b>]</b></tt></td>/n<td><tt><b>len(os.Args)</b></tt></td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>Swift</td>/n<td><tt><b>Process.arguments[</b>n<b>]</b></tt> or<br />/n<tt><b>Process.unsafeArgv[</b>n<b>]</b></tt></td>/n<td><tt><b>Process.arguments.count</b></tt> or<br />/n<tt><b>Process.argc</b></tt></td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n<td style="background: #ececec; color: #2C2C2C; font-size: smaller; vertical-align: middle; text-align: center;" class="unknown table-unknown">?</td>/n</tr>/n<tr>/n<td>Scheme (R<sup>6</sup>RS)</td>/n<td><tt><b>(list-ref (command-line)</b> n<b>)</b></tt></td>/n<td><tt><b>(length (command-line))</b></tt></td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Pascal</td>/n<td><tt><b>ParamStr(</b>n<b>)</b></tt></td>/n<td><tt><b>ParamCount</b></tt></td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td><tt><b>Command</b></tt><sup class="reference plainlinks nourlexpansion" id="ref_unseparated"><a href="#endnote_unseparated">[a]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td><tt><b>App.Path</b></tt></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td><tt><b>CmdArgs(</b>n<b>)</b></tt></td>/n<td><tt><b>CmdArgs.Length</b></tt></td>/n<td><tt><b>[Assembly].GetEntryAssembly().Location</b></tt></td>/n</tr>/n<tr>/n<td>Xojo</td>/n<td><tt><b>System.CommandLine</b></tt></td>/n<td>(string parsing)</td>/n<td><b>Application.ExecutableFile.Name</b></td>/n</tr>/n<tr>/n<td>Python</td>/n<td><tt><b>sys.argv[</b>n<b>]</b></tt></td>/n<td><tt><b>len(sys.argv)</b></tt></td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt><b>__argv[</b>n<b>]</b></tt></td>/n<td><tt><b>__argc</b></tt></td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td><tt><b>DO</b> i <b>=</b> 1<b>,</b>argc</tt>/n<dl>/n<dd><tt><b>CALL GET_COMMAND_ARGUMENT (</b>i<b>,</b>argv(i)<b>)</b></tt></dd>/n</dl>/n<tt><b>ENDDO</b></tt></td>/n<td><tt>argc <b>= COMMAND_ARGUMENT_COUNT ()</b></tt></td>/n<td><tt><b>CALL GET_COMMAND_ARGUMENT (</b>0<b>,</b>progname<b>)</b></tt></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td><tt><b>$argv[</b>n<b>]</b></tt></td>/n<td><tt><b>$argc</b></tt></td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>Bash shell</td>/n<td><tt><b>$</b>n (<b>$1</b>, <b>$2</b>, <b>$3</b>, ...)</tt><br />/n<tt><b>$@</b></tt> (all arguments)</td>/n<td><tt><b>$#</b></tt></td>/n<td><tt><b>$0</b></tt></td>/n</tr>/n<tr>/n<td>Perl</td>/n<td><tt><b>$ARGV[</b>n<b>]</b></tt></td>/n<td><tt><b>scalar(@ARGV)</b></tt></td>/n<td><tt><b>$0</b></tt></td>/n</tr>/n<tr>/n<td>Perl 6</td>/n<td><tt><b>@*ARGS[</b>n<b>]</b></tt></td>/n<td><tt><b>@*ARGS.elems</b></tt></td>/n<td><tt><b>$PROGRAM_NAME</b></tt></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><tt><b>ARGV[</b>n<b>]</b></tt></td>/n<td><tt><b>ARGV.size</b></tt></td>/n<td><tt><b>$0</b></tt></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td><tt><b>$args[</b>n<b>]</b></tt></td>/n<td><tt><b>$args.Length</b></tt></td>/n<td><tt><b>$MyInvocation.MyCommand<wbr />.Name</b></tt></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td><tt><b>Sys.argv.(</b>n<b>)</b></tt></td>/n<td><tt><b>Array.length Sys.argv</b></tt></td>/n<td>first argument</td>/n</tr>/n<tr>/n<td>F#</td>/n<td><tt><b>args.[</b>n<b>]</b></tt></td>/n<td><tt><b>args.Length</b></tt></td>/n<td><tt><b>Assembly.GetEntryAssembly()<wbr />.Location</b></tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td><tt><b>List.nth (CommandLine<wbr />.arguments (),</b> n<b>)</b></tt></td>/n<td><tt><b>length (CommandLine<wbr />.arguments ())</b></tt></td>/n<td><tt><b>CommandLine.name ()</b></tt></td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td><code class="mw-highlight" id="" style="" dir="ltr"><span class="kr">do</span> <span class="p">{</span> <span class="n">args</span> <span class="ow">&lt;-</span> <span class="kt">System</span><span class="o">.</span><span class="n">getArgs</span><span class="p">;</span> <span class="n">return</span> <span class="n">length</span> <span class="n">args</span> <span class="o">!!</span> <span class="n">n</span></code>}</td>/n<td><code class="mw-highlight" id="" style="" dir="ltr"><span class="kr">do</span> <span class="p">{</span> <span class="n">args</span> <span class="ow">&lt;-</span> <span class="kt">System</span><span class="o">.</span><span class="n">getArgs</span><span class="p">;</span> <span class="n">return</span> <span class="n">length</span> <span class="n">args</span></code>}</td>/n<td><tt><b>System.getProgName</b></tt></td>/n</tr>/n<tr>/n<td>COBOL</td>/n<td colspan="2"><sup class="reference plainlinks nourlexpansion" id="ref_COBOL_Arguments"><a href="#endnote_COBOL_Arguments">[b]</a></sup></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n</table>/n<ul>/n<li><span class="citation wikicite" id="endnote_unseparated"><b><a href="#ref_unseparated">^a</a></b></span> In Visual Basic, command-line arguments are not separated. Separating them requires a split function <code><b>Split(</b>string<b>)</b></code>.</li>/n<li><span class="citation wikicite" id="endnote_COBOL_Arguments"><b><a href="#ref_COBOL_Arguments">^b</a></b></span> The COBOL standard includes no means to access command-line arguments, but common compiler extensions to access them include defining parameters for the main program or using <code>ACCEPT</code> statements.</li>/n</ul>/n<h2><span class="mw-headline" id="Execution_of_commands">Execution of commands</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=20" title="Edit section: Execution of commands">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<table class="wikitable">/n<tr>/n<th></th>/n<th>Shell command</th>/n<th>Execute program</th>/n<th><a href="/wiki/Exec_(operating_system)" class="mw-redirect" title="Exec (operating system)">Replace current program with new executed program</a></th>/n</tr>/n<tr>/n<td><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-Ada_RM_2012_1-15" class="reference"><a href="#cite_note-Ada_RM_2012-1">[1]</a></sup></td>/n<td colspan="3" align="center">Not part of the language standard. Commonly done by compiler provided packages or by interfacing to C or <a href="/wiki/POSIX" title="POSIX">POSIX</a>.<sup id="cite_ref-Ada_Execute_Command_15-0" class="reference"><a href="#cite_note-Ada_Execute_Command-15">[15]</a></sup></td>/n</tr>/n<tr>/n<td>C</td>/n<td rowspan="3"><tt><b><a href="/wiki/System_(C_standard_library)" class="mw-redirect" title="System (C standard library)">system</a>("</b>command<b>");</b></tt></td>/n<td></td>/n<td rowspan="2"><tt><b><a href="/wiki/Exec_(operating_system)" class="mw-redirect" title="Exec (operating system)">execl</a>(</b>path<b>,</b> args<b>);</b> or<br />/n<b><a href="/wiki/Exec_(operating_system)" class="mw-redirect" title="Exec (operating system)">execv</a>(</b>path<b>,</b> arglist<b>);</b></tt></td>/n</tr>/n<tr>/n<td>C++</td>/n<td></td>/n</tr>/n<tr>/n<td>Objective-C</td>/n<td><tt><b>[NSTask launchedTaskWithLaunchPath:(NSString *)</b>path <b>arguments:(NSArray *)</b>arguments<b>];</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>C#</td>/n<td></td>/n<td rowspan="2"><tt><b>System.Diagnostics<wbr />.Process.Start(</b>path<b>,</b> argstring<b>);</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>F#</td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Go</td>/n<td></td>/n<td><tt><b>exec.Run(</b>path<b>,</b> argv<b>,</b> envv<b>,</b> dir<b>, exec.DevNull, exec.DevNull, exec.DevNull)</b></tt></td>/n<td><tt><b>os.Exec(</b>path<b>,</b> argv<b>,</b> envv<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Visual Basic</td>/n<td><tt><b>Interaction.Shell(</b>command «<b>,&#160;</b>WindowStyle» «<b>,&#160;</b>isWaitOnReturn»<b>)</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Visual Basic .NET</td>/n<td><tt><b>Microsoft.VisualBasic<wbr />.Interaction.Shell(</b>command «<b>,&#160;</b>WindowStyle» «<b>,&#160;</b>isWaitOnReturn»<b>)</b></tt></td>/n<td><tt><b>System.Diagnostics<wbr />.Process.Start(</b>path<b>,</b> argstring<b>)</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Xojo</td>/n<td><tt><b>Shell.Execute(</b>command «<b>,&#160;</b>Parameters»<b>)</b></tt></td>/n<td><tt><b>FolderItem.Launch(</b>parameters<b>,</b> activate<b>)</b></tt></td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>D</td>/n<td><tt><b>std.process.system("</b>command<b>");</b></tt></td>/n<td></td>/n<td><tt><b>std.process.execv(</b>path<b>,</b> arglist<b>);</b></tt></td>/n</tr>/n<tr>/n<td>Java</td>/n<td></td>/n<td><tt><b>Runtime.exec(</b>command<b>);</b> or<br />/n<b>new ProcessBuilder(</b>command<b>).start();</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>JavaScript<br />/n<small><a href="/wiki/Windows_Script_Host" title="Windows Script Host">Windows Script Host</a> implementation</small></td>/n<td><tt><b>WScript.CreateObject ("WScript.Shell").Run(</b>command «<b>,&#160;</b>WindowStyle» «<b>,&#160;</b>isWaitOnReturn»<b>);</b></tt></td>/n<td><tt><b>WshShell.Exec(command)</b></tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Common Lisp</td>/n<td><tt><b>(shell</b> command<b>)</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Scheme</td>/n<td><tt><b>(system</b> command<b>)</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>ISLISP</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n<td data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;" class="table-na">N/A</td>/n</tr>/n<tr>/n<td>Pascal</td>/n<td><tt><b>system(</b>command<b>);</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>OCaml</td>/n<td><tt><b>Sys.command</b> command, <b>Unix.open_process_full</b> command env (stdout, stdin, stderr),...</tt></td>/n<td><tt><b>Unix.create_process</b> prog args new_stdin new_stdout new_stderr, ...</tt></td>/n<td><tt><b>Unix.execv</b> prog args or<br />/n<b>Unix.execve</b> prog args env</tt></td>/n</tr>/n<tr>/n<td>Standard ML</td>/n<td><tt><b>OS.Process.system</b> command</tt></td>/n<td><tt><b>Unix.execute (</b>path<b>,</b> args<b>)</b></tt></td>/n<td><tt><b>Posix.Process.exec (</b>path<b>,</b> args<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Haskell (GHC)</td>/n<td><tt><b>System.system</b> command</tt></td>/n<td><tt><b>System.Process<wbr />.runProcess</b> path args <b>...</b></tt></td>/n<td><tt><b>Posix.Process<wbr />.executeFile</b> path <b>True</b> args <b>...</b></tt></td>/n</tr>/n<tr>/n<td>Perl</td>/n<td><tt><b>system(</b>command<b>)</b> or<br />/n$output <b>= `</b>command<b>`</b> or<br />/n$output <b>= qx(</b>command<b>)</b></tt></td>/n<td></td>/n<td><tt><b>exec(</b>path<b>,</b> args<b>)</b></tt></td>/n</tr>/n<tr>/n<td>Ruby</td>/n<td><tt><b>system(</b>command<b>)</b> or<br />/noutput <b>= `</b>command<b>`</b></tt></td>/n<td></td>/n<td><tt><b>exec(</b>path<b>,</b> args<b>)</b></tt></td>/n</tr>/n<tr>/n<td>PHP</td>/n<td><tt><b>system(</b>command<b>)</b> or<br />/n$output <b>= `</b>command<b>`</b> or<br />/n<b>exec(</b>command<b>)</b> or<br />/n<b>passthru(</b>command<b>)</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Python</td>/n<td><tt><b>os.system(</b>command<b>)</b> or<br />/n<b>subprocess.Popen(</b>command<b>)</b></tt></td>/n<td><tt><b>subprocess.call(</b>["program", "arg1", "arg2", …]<b>)</b></tt></td>/n<td><tt><b>os.execv(</b>path<b>,</b> args<b>)</b></tt></td>/n</tr>/n<tr>/n<td>S-Lang</td>/n<td><tt><b>system(</b>command<b>)</b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Fortran</td>/n<td><tt><b>CALL EXECUTE_COMMAND_LINE (</b>COMMAND <b>«,</b> WAIT<b>» «,</b> EXITSTAT<b>» «,</b> CMDSTAT<b>» «,</b> CMDMSG<b>») <sup class="reference plainlinks nourlexpansion" id="ref_Fortran_2008"><a href="#endnote_Fortran_2008">[a]</a></sup></b></tt></td>/n<td></td>/n<td></td>/n</tr>/n<tr>/n<td>Windows PowerShell</td>/n<td><tt><b>[Diagnostics.Process]::Start(</b>command<b>)</b></tt></td>/n<td><tt>«<b>Invoke-Item</b>&#160;»program arg1 arg2 …</tt></td>/n<td></td>/n</tr>/n<tr>/n<td>Bash shell</td>/n<td><tt>output<b>=`</b>command<b>`</b></tt> or/n<p><tt>output<b>=$(</b>command<b>)</b></tt></p>/n</td>/n<td><tt>program arg1 arg2 …</tt></td>/n<td></td>/n</tr>/n</table>/n<p><span class="citation wikicite" id="endnote_Fortran_2008"><b><a href="#ref_Fortran_2008">^a</a></b></span> Fortran 2008 or newer.<sup id="cite_ref-16" class="reference"><a href="#cite_note-16">[16]</a></sup></p>/n<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit&amp;section=21" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<div class="reflist" style="list-style-type: decimal;">/n<div class="mw-references-wrap mw-references-columns">/n<ol class="references">/n<li id="cite_note-Ada_RM_2012-1"><span class="mw-cite-backlink">^ <a href="#cite_ref-Ada_RM_2012_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-3"><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-4"><sup><i><b>e</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-5"><sup><i><b>f</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-6"><sup><i><b>g</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-7"><sup><i><b>h</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-8"><sup><i><b>i</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-9"><sup><i><b>j</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-10"><sup><i><b>k</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-11"><sup><i><b>l</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-12"><sup><i><b>m</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-13"><sup><i><b>n</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-14"><sup><i><b>o</b></i></sup></a> <a href="#cite_ref-Ada_RM_2012_1-15"><sup><i><b>p</b></i></sup></a></span> <span class="reference-text">Ada Reference Manual - Language and Standard Libraries; ISO/IEC 8652:201x (E), <cite class="citation web"><a rel="nofollow" class="external text" href="https://web.archive.org/web/20110427190723/http://www.ada-auth.org/standards/12rm/RM-Final.pdf">"Archived copy"</a> <span style="font-size:85%;">(PDF)</span>. Archived from <a rel="nofollow" class="external text" href="http://www.ada-auth.org/standards/12rm/RM-Final.pdf">the original</a> <span style="font-size:85%;">(PDF)</span> on 2011-04-27<span class="reference-accessdate">. Retrieved <span class="nowrap">2013-07-19</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.btitle=Archived+copy&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.ada-auth.org%2Fstandards%2F12rm%2FRM-Final.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-HyperSpec-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-HyperSpec_2-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.lispworks.com/documentation/HyperSpec/Front/index.htm">"Common Lisp HyperSpec (TM)"</a>. <i>lispworks.com</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=Common+Lisp+HyperSpec+%28TM%29&amp;rft.genre=unknown&amp;rft.jtitle=lispworks.com&amp;rft_id=http%3A%2F%2Fwww.lispworks.com%2Fdocumentation%2FHyperSpec%2FFront%2Findex.htm&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Specification-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-Specification_3-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.islisp.info/specification.html">"www.islisp.info: Specification"</a>. <i>islisp.info</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=www.islisp.info%3A+Specification&amp;rft.genre=unknown&amp;rft.jtitle=islisp.info&amp;rft_id=http%3A%2F%2Fwww.islisp.info%2Fspecification.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-fortranwiki.org-4"><span class="mw-cite-backlink">^ <a href="#cite_ref-fortranwiki.org_4-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-fortranwiki.org_4-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://fortranwiki.org/fortran/show/selected_int_kind">"selected_int_kind in Fortran Wiki"</a>. <i>fortranwiki.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=selected_int_kind+in+Fortran+Wiki&amp;rft.genre=unknown&amp;rft.jtitle=fortranwiki.org&amp;rft_id=http%3A%2F%2Ffortranwiki.org%2Ffortran%2Fshow%2Fselected_int_kind&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.erlang.org/doc/reference_manual/typespec.html">"Erlang -- Types and Function Specifications"</a>. <i>erlang.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=Erlang+--+Types+and+Function+Specifications&amp;rft.genre=unknown&amp;rft.jtitle=erlang.org&amp;rft_id=http%3A%2F%2Fwww.erlang.org%2Fdoc%2Freference_manual%2Ftypespec.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.erlang.org/doc/efficiency_guide/advanced.html">"Erlang -- Advanced"</a>. <i>erlang.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=Erlang+--+Advanced&amp;rft.genre=unknown&amp;rft.jtitle=erlang.org&amp;rft_id=http%3A%2F%2Fwww.erlang.org%2Fdoc%2Fefficiency_guide%2Fadvanced.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Javascript_numbers-7"><span class="mw-cite-backlink">^ <a href="#cite_ref-Javascript_numbers_7-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Javascript_numbers_7-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.mozilla.org/js/language/E262-3.pdf">8.5 The Number Type</a></span></li>/n<li id="cite_note-ReferenceA-8"><span class="mw-cite-backlink">^ <a href="#cite_ref-ReferenceA_8-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-ReferenceA_8-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://fortranwiki.org/fortran/show/selected_real_kind">"selected_real_kind in Fortran Wiki"</a>. <i>fortranwiki.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=selected_real_kind+in+Fortran+Wiki&amp;rft.genre=unknown&amp;rft.jtitle=fortranwiki.org&amp;rft_id=http%3A%2F%2Ffortranwiki.org%2Ffortran%2Fshow%2Fselected_real_kind&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://www.gnu.org/software/libc/manual/html_node/Complex-Numbers.html#Complex-Numbers">"The GNU C Library: Complex Numbers"</a>. <i>gnu.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=The+GNU+C+Library%3A+Complex+Numbers&amp;rft.genre=unknown&amp;rft.jtitle=gnu.org&amp;rft_id=https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Flibc%2Fmanual%2Fhtml_node%2FComplex-Numbers.html%23Complex-Numbers&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for_each...in">"for each...in"</a>. <i>mozilla.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=for+each...in&amp;rft.genre=unknown&amp;rft.jtitle=mozilla.org&amp;rft_id=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FJavaScript%2FReference%2FStatements%2Ffor_each...in&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...of">"for...of"</a>. <i>mozilla.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=for...of&amp;rft.genre=unknown&amp;rft.jtitle=mozilla.org&amp;rft_id=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FJavaScript%2FReference%2FStatements%2Ffor...of&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://sites.google.com/site/truetryforvisualbasic/">"Try-Catch for VB"</a>. <i>google.com</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=Try-Catch+for+VB&amp;rft.genre=unknown&amp;rft.jtitle=google.com&amp;rft_id=https%3A%2F%2Fsites.google.com%2Fsite%2Ftruetryforvisualbasic%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://rosettacode.org/wiki/Prime_decomposition#ALGOL_68">"Prime decomposition - Rosetta Code"</a>. <i>rosettacode.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=Prime+decomposition+-+Rosetta+Code&amp;rft.genre=unknown&amp;rft.jtitle=rosettacode.org&amp;rft_id=http%3A%2F%2Frosettacode.org%2Fwiki%2FPrime_decomposition%23ALGOL_68&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://fortranwiki.org/fortran/show/iso_fortran_env">"iso_fortran_env in Fortran Wiki"</a>. <i>fortranwiki.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=iso_fortran_env+in+Fortran+Wiki&amp;rft.genre=unknown&amp;rft.jtitle=fortranwiki.org&amp;rft_id=http%3A%2F%2Ffortranwiki.org%2Ffortran%2Fshow%2Fiso_fortran_env&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Ada_Execute_Command-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-Ada_Execute_Command_15-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://rosettacode.org/wiki/Execute_a_system_command#Ada">"Execute a system command - Rosetta Code"</a>. <i>rosettacode.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=Execute+a+system+command+-+Rosetta+Code&amp;rft.genre=unknown&amp;rft.jtitle=rosettacode.org&amp;rft_id=http%3A%2F%2Frosettacode.org%2Fwiki%2FExecute_a_system_command%23Ada&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://gcc.gnu.org/onlinedocs/gfortran/EXECUTE_005fCOMMAND_005fLINE.html">"EXECUTE_COMMAND_LINE - The GNU Fortran Compiler"</a>. <i>gnu.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">30 January</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AComparison+of+programming+languages+%28basic+instructions%29&amp;rft.atitle=EXECUTE_COMMAND_LINE+-+The+GNU+Fortran+Compiler&amp;rft.genre=unknown&amp;rft.jtitle=gnu.org&amp;rft_id=https%3A%2F%2Fgcc.gnu.org%2Fonlinedocs%2Fgfortran%2FEXECUTE_005fCOMMAND_005fLINE.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n</ol>/n</div>/n</div>/n/n/n<!-- /nNewPP limit report/nParsed by mw1275/nCached time: 20171025111810/nCache expiry: 1900800/nDynamic content: false/nCPU time usage: 0.652 seconds/nReal time usage: 0.726 seconds/nPreprocessor visited node count: 6739/1000000/nPreprocessor generated node count: 0/1500000/nPost‐expand include size: 161017/2097152 bytes/nTemplate argument size: 6717/2097152 bytes/nHighest expansion depth: 11/40/nExpensive parser function count: 2/500/nLua time usage: 0.137/10.000 seconds/nLua memory usage: 4.52 MB/50 MB/n-->/n<!--/nTransclusion expansion time report (%,ms,calls,template)/n100.00%  378.224      1 -total/n 28.51%  107.825      1 Template:Reflist/n 21.57%   81.567     15 Template:Cite_web/n 10.99%   41.579      1 Template:Refimprove/n 10.69%   40.415     32 Template:Keypress/n  6.66%   25.175      1 Template:Ambox/n  5.71%   21.583    137 Template:Ref/n  5.52%   20.860     13 Template:Space/n  5.35%   20.221      2 Template:Further/n  5.31%   20.090      1 Template:Citation_needed/n-->/n</div>/n<!-- Saved in parser cache with key enwiki:pcache:idhash:14513019-0!canonical and timestamp 20171025111809 and revision id 804419604/n -->/n<noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>					<div class="printfooter">/n						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;oldid=804419604">https://en.wikipedia.org/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;oldid=804419604</a>"					</div>/n				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Programming_constructs" title="Category:Programming constructs">Programming constructs</a></li><li><a href="/wiki/Category:Programming_language_comparisons" title="Category:Programming language comparisons">Programming language comparisons</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:Articles_needing_additional_references_from_February_2009" title="Category:Articles needing additional references from February 2009">Articles needing additional references from February 2009</a></li><li><a href="/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_December_2011" title="Category:Articles with unsourced statements from December 2011">Articles with unsourced statements from December 2011</a></li></ul></div></div>				<div class="visualClear"></div>/n							</div>/n		</div>/n		<div id="mw-navigation">/n			<h2>Navigation menu</h2>/n/n			<div id="mw-head">/n									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">/n						<h3 id="p-personal-label">Personal tools</h3>/n						<ul>/n							<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Comparison+of+programming+languages+%28basic+instructions%29" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Comparison+of+programming+languages+%28basic+instructions%29" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>						</ul>/n					</div>/n									<div id="left-navigation">/n										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">/n						<h3 id="p-namespaces-label">Namespaces</h3>/n						<ul>/n														<li id="ca-nstab-main" class="selected"><span><a href="/wiki/Comparison_of_programming_languages_(basic_instructions)" title="View the content page [c]" accesskey="c">Article</a></span></li>/n							<li id="ca-talk"><span><a href="/wiki/Talk:Comparison_of_programming_languages_(basic_instructions)" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>/n						</ul>/n					</div>/n										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">/n												<h3 id="p-variants-label">/n							<span>Variants</span>/n						</h3>/n/n						<div class="menu">/n							<ul>/n															</ul>/n						</div>/n					</div>/n									</div>/n				<div id="right-navigation">/n										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">/n						<h3 id="p-views-label">Views</h3>/n						<ul>/n														<li id="ca-view" class="collapsible selected"><span><a href="/wiki/Comparison_of_programming_languages_(basic_instructions)">Read</a></span></li>/n							<li id="ca-edit" class="collapsible"><span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=edit" title="Edit this page [e]" accesskey="e">Edit</a></span></li>/n							<li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>/n						</ul>/n					</div>/n										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">/n						<h3 id="p-cactions-label"><span>More</span></h3>/n/n						<div class="menu">/n							<ul>/n															</ul>/n						</div>/n					</div>/n										<div id="p-search" role="search">/n						<h3>/n							<label for="searchInput">Search</label>/n						</h3>/n/n						<form action="/w/index.php" id="searchform">/n							<div id="simpleSearch">/n							<input type="search" name="search" placeholder="Search Wikipedia" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>/n						</form>/n					</div>/n									</div>/n			</div>/n			<div id="mw-panel">/n				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>/n						<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>/n			<h3 id='p-navigation-label'>Navigation</h3>/n/n			<div class="body">/n									<ul>/n						<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>/n			<h3 id='p-interaction-label'>Interaction</h3>/n/n			<div class="body">/n									<ul>/n						<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>/n			<h3 id='p-tb-label'>Tools</h3>/n/n			<div class="body">/n									<ul>/n						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Comparison_of_programming_languages_(basic_instructions)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Comparison_of_programming_languages_(basic_instructions)" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;oldid=804419604" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q5155959" title="Link to connected data repository item [g]" accesskey="g">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Comparison_of_programming_languages_%28basic_instructions%29&amp;id=804419604" title="Information on how to cite this page">Cite this page</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>/n			<h3 id='p-coll-print_export-label'>Print/export</h3>/n/n			<div class="body">/n									<ul>/n						<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Comparison+of+programming+languages+%28basic+instructions%29">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:ElectronPdf&amp;page=Comparison+of+programming+languages+%28basic+instructions%29&amp;action=show-download-screen">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>/n			<h3 id='p-lang-label'>Languages</h3>/n/n			<div class="body">/n									<ul>/n						<li class="interlanguage-link interwiki-sr"><a href="https://sr.wikipedia.org/wiki/%D0%9F%D0%BE%D1%80%D0%B5%D1%92%D0%B5%D1%9A%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%81%D0%BA%D0%B8%D1%85_%D1%98%D0%B5%D0%B7%D0%B8%D0%BA%D0%B0_(%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D0%B5_%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%86%D0%B8%D1%98%D0%B5)" title="Поређење програмских језика (основне инструкције) – Serbian" lang="sr" hreflang="sr" class="interlanguage-link-target">Српски / srpski</a></li>					</ul>/n				<div class="after-portlet after-portlet-lang"><span class="wb-langlinks-edit wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q5155959#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>			</div>/n		</div>/n				</div>/n		</div>/n		<div id="footer" role="contentinfo">/n							<ul id="footer-info">/n											<li id="footer-info-lastmod"> This page was last edited on 8 October 2017, at 22:01.</li>/n											<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;/nadditional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>/n									</ul>/n							<ul id="footer-places">/n											<li id="footer-places-privacy"><a href="https://wikimediafoundation.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li>/n											<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>/n											<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>/n											<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>/n											<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>/n											<li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>/n											<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Comparison_of_programming_languages_(basic_instructions)&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>/n									</ul>/n										<ul id="footer-icons" class="noprint">/n											<li id="footer-copyrightico">/n							<a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"/></a>						</li>/n											<li id="footer-poweredbyico">/n							<a href="//www.mediawiki.org/"><img src="/static/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>						</li>/n									</ul>/n						<div style="clear:both"></div>/n		</div>/n		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.652","walltime":"0.726","ppvisitednodes":{"value":6739,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":161017,"limit":2097152},"templateargumentsize":{"value":6717,"limit":2097152},"expansiondepth":{"value":11,"limit":40},"expensivefunctioncount":{"value":2,"limit":500},"entityaccesscount":{"value":0,"limit":400},"timingprofile":["100.00%  378.224      1 -total"," 28.51%  107.825      1 Template:Reflist"," 21.57%   81.567     15 Template:Cite_web"," 10.99%   41.579      1 Template:Refimprove"," 10.69%   40.415     32 Template:Keypress","  6.66%   25.175      1 Template:Ambox","  5.71%   21.583    137 Template:Ref","  5.52%   20.860     13 Template:Space","  5.35%   20.221      2 Template:Further","  5.31%   20.090      1 Template:Citation_needed"]},"scribunto":{"limitreport-timeusage":{"value":"0.137","limit":"10.000"},"limitreport-memusage":{"value":4740399,"limit":52428800}},"cachereport":{"origin":"mw1275","timestamp":"20171025111810","ttl":1900800,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":82,"wgHostname":"mw1319"});});</script>/n	</body>/n</html>/n