<!DOCTYPE html>/n<html class="client-nojs" lang="en" dir="ltr">/n<head>/n<meta charset="UTF-8"/>/n<title>Functional programming - Wikipedia</title>/n<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>/n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Functional_programming","wgTitle":"Functional programming","wgCurRevisionId":807122652,"wgRevisionId":807122652,"wgArticleId":10933,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages with citations lacking titles","Pages with citations having bare URLs","CS1 errors: external links","All articles with unsourced statements","Articles with unsourced statements from February 2017","Articles with unsourced statements from December 2011","Articles with unsourced statements from April 2015","Articles with unsourced statements from March 2014","Articles with unsourced statements from June 2014","Articles needing additional references from July 2013","All articles needing additional references","Wikipedia articles needing clarification from April 2015","Spoken articles","Articles with hAudio microformats","Wikipedia articles with LCCN identifiers","Wikipedia articles with GND identifiers","Wikipedia articles with BNF identifiers","Programming paradigms","Functional programming"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Functional_programming","wgRelevantArticleId":10933,"wgRequestId":"WfPjtQpAMEwAAJe5kZwAAAAA","wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":{"toolbar":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":false,"wgPopupsShouldSendModuleToUser":true,"wgPopupsConflictsWithNavPopupGadget":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":false,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q193076","wgCentralAuthMobileDomain":false,"wgCodeMirrorEnabled":false,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":false});mw.loader.state({"ext.gadget.charinsert-styles":"ready","ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.cite.styles":"ready","ext.math.styles":"ready","ext.pygments":"ready","ext.tmh.thumbnail.styles":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","skins.vector.styles.experimental.print":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {/nmw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*//n/n});mw.loader.load(["ext.cite.a11y","ext.math.scripts","mw.MediaWikiPlayer.loader","mw.PopUpMediaTransform","mw.TMHGalleryHook.js","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.interface","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});</script>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.math.styles%7Cext.pygments%2CwikimediaBadges%7Cext.tmh.thumbnail.styles%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cskins.vector.styles.experimental.print%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>/n<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>/n<meta name="ResourceLoaderDynamicStyles" content=""/>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.charinsert-styles&amp;only=styles&amp;skin=vector"/>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>/n<meta name="generator" content="MediaWiki 1.31.0-wmf.4"/>/n<meta name="referrer" content="origin-when-cross-origin"/>/n<link rel="alternate" href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Functional_programming"/>/n<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Functional_programming&amp;action=edit"/>/n<link rel="edit" title="Edit this page" href="/w/index.php?title=Functional_programming&amp;action=edit"/>/n<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>/n<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>/n<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>/n<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>/n<link rel="license" href="//creativecommons.org/licenses/by-sa/3.0/"/>/n<link rel="canonical" href="https://en.wikipedia.org/wiki/Functional_programming"/>/n<link rel="dns-prefetch" href="//login.wikimedia.org"/>/n<link rel="dns-prefetch" href="//meta.wikimedia.org" />/n<!--[if lt IE 9]><script src="/w/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1"></script><![endif]-->/n</head>/n<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Functional_programming rootpage-Functional_programming vector-experimental-print-styles vector-nav-directionality skin-vector action-view">		<div id="mw-page-base" class="noprint"></div>/n		<div id="mw-head-base" class="noprint"></div>/n		<div id="content" class="mw-body" role="main">/n			<a id="top"></a>/n/n							<div id="siteNotice" class="mw-body-content"><!-- CentralNotice --></div>/n						<div class="mw-indicators mw-body-content">/n<div id="mw-indicator-spoken-icon" class="mw-indicator"><a href="/wiki/File:En-Functional_programming.ogg" title="Listen to this article"><img alt="Listen to this article" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/20px-Sound-icon.svg.png" width="20" height="15" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/30px-Sound-icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/40px-Sound-icon.svg.png 2x" data-file-width="128" data-file-height="96" /></a></div>/n</div>/n			<h1 id="firstHeading" class="firstHeading" lang="en">Functional programming</h1>/n									<div id="bodyContent" class="mw-body-content">/n									<div id="siteSub" class="noprint">From Wikipedia, the free encyclopedia</div>/n								<div id="contentSub"></div>/n												<div id="jump-to-nav" class="mw-jump">/n					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>/n				</div>/n				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><div role="note" class="hatnote navigation-not-searchable">For subroutine-oriented programming, see <a href="/wiki/Procedural_programming" title="Procedural programming">Procedural programming</a>.</div>/n<table class="vertical-navbox nowraplinks" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%">/n<tr>/n<th style="padding:0.2em 0.4em 0.2em;font-size:145%;line-height:1.2em"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>/n</tr>/n<tr>/n<td style="padding:0 0.1em 0.4em;text-align: left">/n<ul>/n<li><a href="/wiki/Action_language" title="Action language">Action</a></li>/n<li><a href="/wiki/Agent-oriented_programming" title="Agent-oriented programming">Agent-oriented</a></li>/n<li><a href="/wiki/Array_programming" title="Array programming">Array-oriented</a></li>/n<li><a href="/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>/n<li><a href="/wiki/Concept_programming" title="Concept programming">Concept</a></li>/n<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a>/n<ul>/n<li><a href="/wiki/Relativistic_programming" title="Relativistic programming">Relativistic programming</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Data-driven_programming" title="Data-driven programming">Data-driven</a></li>/n<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)/n<ul>/n<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a>/n<ul>/n<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a>/n<ul>/n<li><a href="/wiki/Concurrent_constraint_logic_programming" title="Concurrent constraint logic programming">Concurrent constraint logic</a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li><a href="/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a>/n<ul>/n<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>/n<li>Cell-oriented (<a href="/wiki/Spreadsheet" title="Spreadsheet">spreadsheets</a>)</li>/n<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>/n</ul>/n</li>/n<li><a class="mw-selflink selflink">Functional</a>/n<ul>/n<li><a href="/wiki/Functional_logic_programming" title="Functional logic programming">Functional logic</a></li>/n<li><a href="/wiki/Purely_functional_programming" title="Purely functional programming">Purely functional</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a>/n<ul>/n<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>/n<li><a href="/wiki/Answer_set_programming" title="Answer set programming">Answer set</a></li>/n<li><a href="/wiki/Concurrent_logic_programming" title="Concurrent logic programming">Concurrent logic</a></li>/n<li><a href="/wiki/Functional_logic_programming" title="Functional logic programming">Functional logic</a></li>/n<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li><a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a></li>/n<li><a href="/wiki/End-user_development" title="End-user development">End-user programming</a></li>/n<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a>/n<ul>/n<li><a href="/wiki/Service-oriented_architecture" title="Service-oriented architecture">Service-oriented</a></li>/n<li><a href="/wiki/Time-driven_programming" title="Time-driven programming">Time-driven</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Expression-oriented_programming_language" title="Expression-oriented programming language">Expression-oriented</a></li>/n<li><a href="/wiki/Feature-oriented_programming" title="Feature-oriented programming">Feature-oriented</a></li>/n<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>/n<li><a href="/wiki/Generic_programming" title="Generic programming">Generic</a></li>/n<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)/n<ul>/n<li><a href="/wiki/Literate_programming" title="Literate programming">Literate</a></li>/n<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>/n<ul>/n<li><a href="/wiki/Natural_language_programming" title="Natural language programming">Natural language programming</a></li>/n<li><a href="/wiki/Service-oriented_modeling#Discipline-specific_modeling" title="Service-oriented modeling">Discipline-specific</a></li>/n<li><a href="/wiki/Domain-specific_language" title="Domain-specific language">Domain-specific</a></li>/n<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>/n<ul>/n<li><a href="/wiki/Dialect_(computing)" title="Dialect (computing)">Dialecting</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>/n<ul>/n<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>/n<ul>/n<li><a href="/wiki/Inductive_programming" title="Inductive programming">Inductive programming</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">Reflective</a>/n<ul>/n<li><a href="/wiki/Attribute-oriented_programming" title="Attribute-oriented programming">Attribute-oriented</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Homoiconicity" title="Homoiconicity">Homoiconic</a></li>/n<li><a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a></li>/n<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>/n<ul>/n<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li><a href="/wiki/Non-structured_programming" title="Non-structured programming">Non-structured</a> (contrast: <a href="/wiki/Structured_programming" title="Structured programming">Structured</a>)/n<ul>/n<li><a href="/wiki/Array_programming" title="Array programming">Array</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>/n<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>/n<ul>/n<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Tacit_programming" title="Tacit programming">Point-free style</a>/n<ul>/n<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Probabilistic_programming_language" title="Probabilistic programming language">Probabilistic</a></li>/n<li><a href="/wiki/Semantic-oriented_programming" title="Semantic-oriented programming">Semantic</a></li>/n<li><a href="/wiki/Structured_programming" title="Structured programming">Structured</a> (contrast: <a href="/wiki/Non-structured_programming" title="Non-structured programming">Non-structured</a>)/n<ul>/n<li><a href="/wiki/Block_(programming)" title="Block (programming)">Block-structured</a></li>/n<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a> (contrast: <a href="/wiki/Monolithic_application" title="Monolithic application">Monolithic</a>)</li>/n<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>/n<ul>/n<li><a href="/wiki/Actor_model" title="Actor model">Actor-based</a></li>/n<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>/n<li><a href="/wiki/Concurrent_object-oriented_programming" title="Concurrent object-oriented programming">Concurrent</a></li>/n<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>/n<li>By <a href="/wiki/Separation_of_concerns" title="Separation of concerns">separation of concerns</a>:/n<ul>/n<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>/n<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>/n<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>/n</ul>/n</td>/n</tr>/n<tr>/n<td style="text-align:right;font-size:115%">/n<div class="plainlinks hlist navbar mini">/n<ul>/n<li class="nv-view"><a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><abbr title="View this template">v</abbr></a></li>/n<li class="nv-talk"><a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><abbr title="Discuss this template">t</abbr></a></li>/n<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit"><abbr title="Edit this template">e</abbr></a></li>/n</ul>/n</div>/n</td>/n</tr>/n</table>/n<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, <b>functional programming</b> is a <a href="/wiki/Programming_paradigm" title="Programming paradigm">programming paradigm</a>—a style of building the structure and elements of <a href="/wiki/Computer_program" title="Computer program">computer programs</a>—that treats <a href="/wiki/Computation" title="Computation">computation</a> as the evaluation of <a href="/wiki/Function_(mathematics)" title="Function (mathematics)">mathematical functions</a> and avoids changing-<a href="/wiki/Program_state" class="mw-redirect" title="Program state">state</a> and <a href="/wiki/Immutable_object" title="Immutable object">mutable</a> data. It is a <a href="/wiki/Declarative_programming" title="Declarative programming">declarative programming</a> paradigm, which means programming is done with <a href="/wiki/Expression_(computer_science)" title="Expression (computer science)">expressions</a><sup id="cite_ref-expression_style_1-0" class="reference"><a href="#cite_note-expression_style-1">[1]</a></sup> or declarations<sup id="cite_ref-declaration_style_2-0" class="reference"><a href="#cite_note-declaration_style-2">[2]</a></sup> instead of <a href="/wiki/Statement_(computer_science)" title="Statement (computer science)">statements</a>. In functional code, the output value of a function depends only on the <a href="/wiki/Function_argument" class="mw-redirect" title="Function argument">arguments</a> that are passed to the function, so calling a function <i>f</i> twice with the same value for an argument <i>x</i> produces the same result <i>f(x)</i> each time; this is in contrast to <a href="/wiki/Subroutine" title="Subroutine">procedures</a> depending on a <a href="/wiki/Local_state" class="mw-redirect" title="Local state">local</a> or <a href="/wiki/Global_variable" title="Global variable">global state</a>, which may produce different results at different times when called with the same arguments but a different program state. Eliminating <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>, i.e., changes in state that do not depend on the function inputs, can make it much easier to understand and predict the behavior of a program, which is one of the key motivations for the development of functional programming.</p>/n<p>Functional programming has its origins in <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>, a <a href="/wiki/Formal_system" title="Formal system">formal system</a> developed in the 1930s to investigate <a href="/wiki/Computability" title="Computability">computability</a>, the <a href="/wiki/Entscheidungsproblem" title="Entscheidungsproblem">Entscheidungsproblem</a>, function definition, <a href="/wiki/Function_application" title="Function application">function application</a>, and <a href="/wiki/Recursion" title="Recursion">recursion</a>. Many functional <a href="/wiki/Programming_language" title="Programming language">programming languages</a> can be viewed as elaborations on the lambda calculus. Another well-known declarative programming paradigm, <i><a href="/wiki/Logic_programming" title="Logic programming">logic programming</a></i>, is based on <a href="/wiki/Relation_(logic)" class="mw-redirect" title="Relation (logic)">relations</a>.<sup id="cite_ref-hudak1989_3-0" class="reference"><a href="#cite_note-hudak1989-3">[3]</a></sup></p>/n<p>In contrast, <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a> changes state with commands in the <a href="/wiki/Source_code" title="Source code">source code</a>, the simplest example being <a href="/wiki/Assignment_(computer_science)" title="Assignment (computer science)">assignment</a>. Imperative programming does have functions—not in the mathematical sense—but in the sense of <a href="/wiki/Subroutine" title="Subroutine">subroutines</a>. They can have <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a> that may change the value of program state. Functions without <a href="/wiki/Return_value" class="mw-redirect" title="Return value">return values</a> therefore make sense. Because of this, they lack <a href="/wiki/Referential_transparency_(computer_science)" class="mw-redirect" title="Referential transparency (computer science)">referential transparency</a>, i.e., the same language expression can result in different values at different times depending on the state of the executing program.<sup id="cite_ref-hudak1989_3-1" class="reference"><a href="#cite_note-hudak1989-3">[3]</a></sup></p>/n<p>Functional programming languages have largely been emphasized in <a href="/wiki/Academic" class="mw-redirect" title="Academic">academia</a> rather than in commercial software development. However, prominent programming languages that support functional programming such as <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>,<sup id="cite_ref-clinger1987_4-0" class="reference"><a href="#cite_note-clinger1987-4">[4]</a></sup><sup id="cite_ref-hartheimer1987_5-0" class="reference"><a href="#cite_note-hartheimer1987-5">[5]</a></sup><sup id="cite_ref-kidd2007_6-0" class="reference"><a href="#cite_note-kidd2007-6">[6]</a></sup><sup id="cite_ref-cleis2006_7-0" class="reference"><a href="#cite_note-cleis2006-7">[7]</a></sup> <a href="/wiki/Clojure" title="Clojure">Clojure</a>,<sup id="cite_ref-useR_8-0" class="reference"><a href="#cite_note-useR-8">[8]</a></sup><sup id="cite_ref-Chambers_9-0" class="reference"><a href="#cite_note-Chambers-9">[9]</a></sup> <a href="/wiki/Wolfram_Language" title="Wolfram Language">Wolfram Language</a><sup id="cite_ref-reference.wolfram.com_10-0" class="reference"><a href="#cite_note-reference.wolfram.com-10">[10]</a></sup> (also known as <a href="/wiki/Mathematica" class="mw-redirect" title="Mathematica">Mathematica</a>), <a href="/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a>,<sup id="cite_ref-racket-video-games_11-0" class="reference"><a href="#cite_note-racket-video-games-11">[11]</a></sup> <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a>,<sup id="cite_ref-erlang-faq_12-0" class="reference"><a href="#cite_note-erlang-faq-12">[12]</a></sup><sup id="cite_ref-armstrong2007_13-0" class="reference"><a href="#cite_note-armstrong2007-13">[13]</a></sup><sup id="cite_ref-larson2009_14-0" class="reference"><a href="#cite_note-larson2009-14">[14]</a></sup> <a href="/wiki/OCaml" title="OCaml">OCaml</a>,<sup id="cite_ref-minksy2008_15-0" class="reference"><a href="#cite_note-minksy2008-15">[15]</a></sup><sup id="cite_ref-leroy2007_16-0" class="reference"><a href="#cite_note-leroy2007-16">[16]</a></sup> <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>,<sup id="cite_ref-haskell-industry_17-0" class="reference"><a href="#cite_note-haskell-industry-17">[17]</a></sup><sup id="cite_ref-hudak2007_18-0" class="reference"><a href="#cite_note-hudak2007-18">[18]</a></sup> and <a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a><sup id="cite_ref-quantFSharp_19-0" class="reference"><a href="#cite_note-quantFSharp-19">[19]</a></sup><sup id="cite_ref-businessAppsFSharp_20-0" class="reference"><a href="#cite_note-businessAppsFSharp-20">[20]</a></sup> have been used in industrial and commercial applications by a wide variety of organizations. <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>, one of the world's most widely distributed languages,<sup id="cite_ref-mostPopularLanguages_21-0" class="reference"><a href="#cite_note-mostPopularLanguages-21">[21]</a></sup><sup id="cite_ref-javaScriptWidelyUsed_22-0" class="reference"><a href="#cite_note-javaScriptWidelyUsed-22">[22]</a></sup> has the properties of an untyped functional language,<sup id="cite_ref-javaScriptFunctional_23-0" class="reference"><a href="#cite_note-javaScriptFunctional-23">[23]</a></sup> as well as imperative and object-oriented paradigms. Functional programming is also supported in some <a href="/wiki/Domain-specific_programming_language" class="mw-redirect" title="Domain-specific programming language">domain-specific programming languages</a> like <a href="/wiki/R_(programming_language)" title="R (programming language)">R</a> (statistics),<sup id="cite_ref-Amath-CO_24-0" class="reference"><a href="#cite_note-Amath-CO-24">[24]</a></sup> <a href="/wiki/J_(programming_language)" title="J (programming language)">J</a>, <a href="/wiki/K_(programming_language)" title="K (programming language)">K</a> and <a href="/wiki/Q_(programming_language_from_Kx_Systems)" title="Q (programming language from Kx Systems)">Q from Kx Systems</a> (financial analysis), <a href="/wiki/XQuery" title="XQuery">XQuery</a>/<a href="/wiki/XSLT" title="XSLT">XSLT</a> (<a href="/wiki/XML" title="XML">XML</a>),<sup id="cite_ref-Novatchev_25-0" class="reference"><a href="#cite_note-Novatchev-25">[25]</a></sup><sup id="cite_ref-Mertz_26-0" class="reference"><a href="#cite_note-Mertz-26">[26]</a></sup> and <a href="/wiki/Opal_(programming_language)" title="Opal (programming language)">Opal</a>.<sup id="cite_ref-Opal_.28programming_language.29_27-0" class="reference"><a href="#cite_note-Opal_.28programming_language.29-27">[27]</a></sup> Widespread domain-specific declarative languages like <a href="/wiki/SQL" title="SQL">SQL</a> and <a href="/wiki/Lex_(software)" title="Lex (software)">Lex</a>/<a href="/wiki/Yacc" title="Yacc">Yacc</a> use some elements of functional programming, especially in eschewing <a href="/wiki/Mutable_object" class="mw-redirect" title="Mutable object">mutable values</a>.<sup id="cite_ref-Chamberlin_Boyce_28-0" class="reference"><a href="#cite_note-Chamberlin_Boyce-28">[28]</a></sup></p>/n<p>Programming in a functional style can also be accomplished in languages that are not specifically designed for functional programming. For example, the imperative <a href="/wiki/Perl" title="Perl">Perl</a> programming language has been the subject of a book describing how to apply functional programming concepts.<sup id="cite_ref-29" class="reference"><a href="#cite_note-29">[29]</a></sup> This is also true of the <a href="/wiki/PHP" title="PHP">PHP</a> programming language.<sup id="cite_ref-30" class="reference"><a href="#cite_note-30">[30]</a></sup> <a href="/wiki/C%2B%2B11" title="C++11">C++11</a>, <a href="/wiki/Java_8" class="mw-redirect" title="Java 8">Java 8</a>, and <a href="/wiki/C_Sharp_3.0" title="C Sharp 3.0">C# 3.0</a> all added constructs to facilitate the functional style. The <a href="/wiki/Julia_(programming_language)" title="Julia (programming language)">Julia</a> language also offers functional programming abilities. An interesting case is that of <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a><sup id="cite_ref-effective-scala_31-0" class="reference"><a href="#cite_note-effective-scala-31">[31]</a></sup> – it is frequently written in a functional style, but the presence of side effects and mutable state place it in a grey area between imperative and functional languages.</p>/n<p></p>/n<div id="toc" class="toc">/n<div class="toctitle">/n<h2>Contents</h2>/n</div>/n<ul>/n<li class="toclevel-1 tocsection-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>/n<li class="toclevel-1 tocsection-2"><a href="#Concepts"><span class="tocnumber">2</span> <span class="toctext">Concepts</span></a>/n<ul>/n<li class="toclevel-2 tocsection-3"><a href="#First-class_and_higher-order_functions"><span class="tocnumber">2.1</span> <span class="toctext">First-class and higher-order functions</span></a></li>/n<li class="toclevel-2 tocsection-4"><a href="#Pure_functions"><span class="tocnumber">2.2</span> <span class="toctext">Pure functions</span></a></li>/n<li class="toclevel-2 tocsection-5"><a href="#Recursion"><span class="tocnumber">2.3</span> <span class="toctext">Recursion</span></a></li>/n<li class="toclevel-2 tocsection-6"><a href="#Strict_versus_non-strict_evaluation"><span class="tocnumber">2.4</span> <span class="toctext">Strict versus non-strict evaluation</span></a></li>/n<li class="toclevel-2 tocsection-7"><a href="#Type_systems"><span class="tocnumber">2.5</span> <span class="toctext">Type systems</span></a></li>/n<li class="toclevel-2 tocsection-8"><a href="#Referential_transparency"><span class="tocnumber">2.6</span> <span class="toctext">Referential transparency</span></a></li>/n<li class="toclevel-2 tocsection-9"><a href="#Functional_programming_in_non-functional_languages"><span class="tocnumber">2.7</span> <span class="toctext">Functional programming in non-functional languages</span></a></li>/n<li class="toclevel-2 tocsection-10"><a href="#Data_structures"><span class="tocnumber">2.8</span> <span class="toctext">Data structures</span></a></li>/n</ul>/n</li>/n<li class="toclevel-1 tocsection-11"><a href="#Comparison_to_imperative_programming"><span class="tocnumber">3</span> <span class="toctext">Comparison to imperative programming</span></a>/n<ul>/n<li class="toclevel-2 tocsection-12"><a href="#Simulating_state"><span class="tocnumber">3.1</span> <span class="toctext">Simulating state</span></a></li>/n<li class="toclevel-2 tocsection-13"><a href="#Efficiency_issues"><span class="tocnumber">3.2</span> <span class="toctext">Efficiency issues</span></a></li>/n<li class="toclevel-2 tocsection-14"><a href="#Coding_styles"><span class="tocnumber">3.3</span> <span class="toctext">Coding styles</span></a>/n<ul>/n<li class="toclevel-3 tocsection-15"><a href="#PHP"><span class="tocnumber">3.3.1</span> <span class="toctext">PHP</span></a></li>/n<li class="toclevel-3 tocsection-16"><a href="#Python"><span class="tocnumber">3.3.2</span> <span class="toctext">Python</span></a></li>/n<li class="toclevel-3 tocsection-17"><a href="#Haskell"><span class="tocnumber">3.3.3</span> <span class="toctext">Haskell</span></a></li>/n<li class="toclevel-3 tocsection-18"><a href="#Perl_6"><span class="tocnumber">3.3.4</span> <span class="toctext">Perl 6</span></a></li>/n<li class="toclevel-3 tocsection-19"><a href="#Erlang"><span class="tocnumber">3.3.5</span> <span class="toctext">Erlang</span></a></li>/n<li class="toclevel-3 tocsection-20"><a href="#Elixir"><span class="tocnumber">3.3.6</span> <span class="toctext">Elixir</span></a></li>/n<li class="toclevel-3 tocsection-21"><a href="#Lisp"><span class="tocnumber">3.3.7</span> <span class="toctext">Lisp</span></a></li>/n<li class="toclevel-3 tocsection-22"><a href="#Clojure"><span class="tocnumber">3.3.8</span> <span class="toctext">Clojure</span></a></li>/n<li class="toclevel-3 tocsection-23"><a href="#Kotlin"><span class="tocnumber">3.3.9</span> <span class="toctext">Kotlin</span></a></li>/n<li class="toclevel-3 tocsection-24"><a href="#JavaScript"><span class="tocnumber">3.3.10</span> <span class="toctext">JavaScript</span></a></li>/n<li class="toclevel-3 tocsection-25"><a href="#D"><span class="tocnumber">3.3.11</span> <span class="toctext">D</span></a></li>/n<li class="toclevel-3 tocsection-26"><a href="#R"><span class="tocnumber">3.3.12</span> <span class="toctext">R</span></a></li>/n<li class="toclevel-3 tocsection-27"><a href="#SequenceL"><span class="tocnumber">3.3.13</span> <span class="toctext">SequenceL</span></a></li>/n<li class="toclevel-3 tocsection-28"><a href="#Tcl"><span class="tocnumber">3.3.14</span> <span class="toctext">Tcl</span></a></li>/n<li class="toclevel-3 tocsection-29"><a href="#Scala"><span class="tocnumber">3.3.15</span> <span class="toctext">Scala</span></a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li class="toclevel-1 tocsection-30"><a href="#Use_in_industry"><span class="tocnumber">4</span> <span class="toctext">Use in industry</span></a></li>/n<li class="toclevel-1 tocsection-31"><a href="#In_education"><span class="tocnumber">5</span> <span class="toctext">In education</span></a></li>/n<li class="toclevel-1 tocsection-32"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>/n<li class="toclevel-1 tocsection-33"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>/n<li class="toclevel-1 tocsection-34"><a href="#Further_reading"><span class="tocnumber">8</span> <span class="toctext">Further reading</span></a></li>/n<li class="toclevel-1 tocsection-35"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>/n</ul>/n</div>/n<p></p>/n<h2><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=1" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p><a href="/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a> provides a theoretical framework for describing functions and their evaluation. It is a mathematical abstraction rather than a programming language—but it forms the basis of almost all current functional programming languages. An equivalent theoretical formulation, <a href="/wiki/Combinatory_logic" title="Combinatory logic">combinatory logic</a>, is commonly perceived as more abstract than lambda calculus and preceded it in invention. Combinatory logic and lambda calculus were both originally developed to achieve a clearer approach to the <a href="/wiki/Foundations_of_mathematics" title="Foundations of mathematics">foundations of mathematics</a>.<sup id="cite_ref-32" class="reference"><a href="#cite_note-32">[32]</a></sup></p>/n<p>An early functional-flavored language was <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, developed in the late 1950s for the <a href="/wiki/IBM_700/7000_series#Scientific_Architecture" title="IBM 700/7000 series">IBM 700/7000 series</a> scientific computers by <a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a> while at <a href="/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">Massachusetts Institute of Technology</a> (MIT).<sup id="cite_ref-33" class="reference"><a href="#cite_note-33">[33]</a></sup> Lisp first introduced many paradigmatic features of functional programming, though early Lisps were <a href="/wiki/Programming_paradigm#Multi-paradigm" title="Programming paradigm">multi-paradigm languages</a>, and incorporated support for numerous programming styles as new paradigms evolved. Later dialects, such as <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> and <a href="/wiki/Clojure" title="Clojure">Clojure</a>, and offshoots such as <a href="/wiki/Dylan_(programming_language)" title="Dylan (programming language)">Dylan</a> and <a href="/wiki/Julia_(programming_language)" title="Julia (programming language)">Julia</a>, sought to simplify and rationalise Lisp around a cleanly functional core, while <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> was designed to preserve and update the paradigmatic features of the numerous older dialects it replaced.<sup id="cite_ref-34" class="reference"><a href="#cite_note-34">[34]</a></sup></p>/n<p><a href="/wiki/Information_Processing_Language" title="Information Processing Language">Information Processing Language</a> (IPL) is sometimes cited as the first computer-based functional programming language.<sup id="cite_ref-35" class="reference"><a href="#cite_note-35">[35]</a></sup> It is an <a href="/wiki/Assembly_language" title="Assembly language">assembly-style language</a> for manipulating lists of symbols. It does have a notion of <i>generator</i>, which amounts to a function that accepts a function as an argument, and, since it is an assembly-level language, code can be data, so IPL can be regarded as having higher-order functions. However, it relies heavily on mutating list structure and similar imperative features.</p>/n<p><a href="/wiki/Kenneth_E._Iverson" title="Kenneth E. Iverson">Kenneth E. Iverson</a> developed <a href="/wiki/APL_(programming_language)" title="APL (programming language)">APL</a> in the early 1960s, described in his 1962 book <i>A Programming Language</i> (<a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/9780471430148" title="Special:BookSources/9780471430148">9780471430148</a>). APL was the primary influence on <a href="/wiki/John_Backus" title="John Backus">John Backus</a>'s <a href="/wiki/FP_(programming_language)" title="FP (programming language)">FP</a>. In the early 1990s, Iverson and <a href="/wiki/Roger_Hui" title="Roger Hui">Roger Hui</a> created <a href="/wiki/J_(programming_language)" title="J (programming language)">J</a>. In the mid-1990s, <a href="/wiki/Arthur_Whitney_(computer_scientist)" title="Arthur Whitney (computer scientist)">Arthur Whitney</a>, who had previously worked with Iverson, created <a href="/wiki/K_(programming_language)" title="K (programming language)">K</a>, which is used commercially in financial industries along with its descendant <a href="/wiki/Q_(programming_language_from_Kx_Systems)" title="Q (programming language from Kx Systems)">Q</a>.</p>/n<p><a href="/wiki/John_Backus" title="John Backus">John Backus</a> presented <a href="/wiki/FP_(programming_language)" title="FP (programming language)">FP</a> in his 1977 <a href="/wiki/Turing_Award" title="Turing Award">Turing Award</a> lecture "Can Programming Be Liberated From the <a href="/wiki/Von_Neumann_architecture" title="Von Neumann architecture">von Neumann</a> Style? A Functional Style and its Algebra of Programs".<sup id="cite_ref-36" class="reference"><a href="#cite_note-36">[36]</a></sup> He defines functional programs as being built up in a hierarchical way by means of "combining forms" that allow an "algebra of programs"; in modern language, this means that functional programs follow the <a href="/wiki/Principle_of_compositionality" title="Principle of compositionality">principle of compositionality</a><sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="I dont completely agree with this interpretation of John Backus definition of functional programs, which I feel is widely misunderstood. As he is very sadly no longer alive we can't ask him, but a reference for this interpretation, especially if it includes a justification, would be very beneficial. (February 2017)">citation needed</span></a></i>]</sup>. Backus's paper popularized research into functional programming, though it emphasized <a href="/wiki/Function-level_programming" title="Function-level programming">function-level programming</a> rather than the lambda-calculus style now associated with functional programming.</p>/n<p>In the 1970s, <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a> was created by <a href="/wiki/Robin_Milner" title="Robin Milner">Robin Milner</a> at the <a href="/wiki/University_of_Edinburgh" title="University of Edinburgh">University of Edinburgh</a>, and <a href="/wiki/David_Turner_(computer_scientist)" title="David Turner (computer scientist)">David Turner</a> initially developed the language <a href="/wiki/SASL_(programming_language)" title="SASL (programming language)">SASL</a> at the <a href="/wiki/University_of_St_Andrews" title="University of St Andrews">University of St Andrews</a> and later the language <a href="/wiki/Miranda_(programming_language)" title="Miranda (programming language)">Miranda</a> at the <a href="/wiki/University_of_Kent" title="University of Kent">University of Kent</a>. Also in Edinburgh in the 1970s, Burstall and Darlington developed the functional language <a href="/wiki/NPL_(programming_language)" title="NPL (programming language)">NPL</a>.<sup id="cite_ref-37" class="reference"><a href="#cite_note-37">[37]</a></sup> NPL was based on <a href="/wiki/Kleene%27s_recursion_theorem" title="Kleene's recursion theorem">Kleene Recursion Equations</a> and was first introduced in their work on program transformation.<sup id="cite_ref-38" class="reference"><a href="#cite_note-38">[38]</a></sup> Burstall, MacQueen and Sannella then incorporated the polymorphic type checking from ML to produce the language <a href="/wiki/Hope_(programming_language)" title="Hope (programming language)">Hope</a>.<sup id="cite_ref-39" class="reference"><a href="#cite_note-39">[39]</a></sup> ML eventually developed into several dialects, the most common of which are now <a href="/wiki/OCaml" title="OCaml">OCaml</a> and <a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a>. Meanwhile, the development of <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, a simple <a href="/wiki/Lexical_scope" class="mw-redirect" title="Lexical scope">lexically scoped</a> and (impurely) functional dialect of Lisp, as described in the influential <a href="/wiki/Lambda_Papers" class="mw-redirect" title="Lambda Papers">Lambda Papers</a> and the classic 1985 textbook <i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>, brought awareness of the power of functional programming to the wider programming-languages community.</p>/n<p>In the 1980s, <a href="/wiki/Per_Martin-L%C3%B6f" title="Per Martin-Löf">Per Martin-Löf</a> developed <a href="/wiki/Intuitionistic_type_theory" title="Intuitionistic type theory">intuitionistic type theory</a> (also called <i>constructive</i> type theory), which associated functional programs with <a href="/wiki/Constructive_proof" title="Constructive proof">constructive proofs</a> of arbitrarily complex mathematical propositions expressed as <a href="/wiki/Dependent_type" title="Dependent type">dependent types</a>. This led to powerful new approaches to <a href="/wiki/Interactive_theorem_proving" class="mw-redirect" title="Interactive theorem proving">interactive theorem proving</a> and has influenced the development of many subsequent functional programming languages.</p>/n<p>The <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell language</a> began with a consensus in 1987 to form an <a href="/wiki/Open_standard" title="Open standard">open standard</a> for functional programming research; implementation releases have been ongoing since 1990.</p>/n<h2><span class="mw-headline" id="Concepts">Concepts</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=2" title="Edit section: Concepts">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>A number of concepts and paradigms are specific to functional programming, and generally foreign to <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a> (including <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>). However, programming languages are often hybrids of several programming paradigms, so programmers using "mostly imperative" languages may have utilized some of these concepts.<sup id="cite_ref-40" class="reference"><a href="#cite_note-40">[40]</a></sup></p>/n<h3><span class="mw-headline" id="First-class_and_higher-order_functions">First-class and higher-order functions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=3" title="Edit section: First-class and higher-order functions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<div role="note" class="hatnote navigation-not-searchable">Main articles: <a href="/wiki/First-class_function" title="First-class function">First-class function</a> and <a href="/wiki/Higher-order_function" title="Higher-order function">Higher-order function</a></div>/n<p><a href="/wiki/Higher-order_function" title="Higher-order function">Higher-order functions</a> are functions that can either take other functions as arguments or return them as results. In calculus, an example of a higher-order function is the <a href="/wiki/Differential_operator" title="Differential operator">differential operator</a> <span class="mwe-math-element"><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;"><math xmlns="http://www.w3.org/1998/Math/MathML" >/n  <semantics>/n    <mrow class="MJX-TeXAtom-ORD">/n      <mstyle displaystyle="true" scriptlevel="0">/n        <mi>d</mi>/n        <mrow class="MJX-TeXAtom-ORD">/n          <mo>/</mo>/n        </mrow>/n        <mi>d</mi>/n        <mi>x</mi>/n      </mstyle>/n    </mrow>/n    <annotation encoding="application/x-tex">{\displaystyle d/dx}</annotation>/n  </semantics>/n</math></span><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/75a0e680edceb47b7d233535262fcacd931585f8" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align: -0.838ex; width:4.966ex; height:2.843ex;" alt="d/dx" /></span>, which returns the <a href="/wiki/Derivative" title="Derivative">derivative</a> of a function <span class="mwe-math-element"><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;"><math xmlns="http://www.w3.org/1998/Math/MathML" >/n  <semantics>/n    <mrow class="MJX-TeXAtom-ORD">/n      <mstyle displaystyle="true" scriptlevel="0">/n        <mi>f</mi>/n      </mstyle>/n    </mrow>/n    <annotation encoding="application/x-tex">{\displaystyle f}</annotation>/n  </semantics>/n</math></span><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/132e57acb643253e7810ee9702d9581f159a1c61" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align: -0.671ex; width:1.289ex; height:2.509ex;" alt="f" /></span>.</p>/n<p>Higher-order functions are closely related to <a href="/wiki/First-class_function" title="First-class function">first-class functions</a> in that higher-order functions and first-class functions both allow functions as arguments and results of other functions. The distinction between the two is subtle: "higher-order" describes a mathematical concept of functions that operate on other functions, while "first-class" is a computer science term that describes programming language entities that have no restriction on their use (thus first-class functions can appear anywhere in the program that other first-class entities like numbers can, including as arguments to other functions and as their return values).</p>/n<p>Higher-order functions enable <a href="/wiki/Partial_application" title="Partial application">partial application</a> or <a href="/wiki/Currying" title="Currying">currying</a>, a technique that applies a function to its arguments one at a time, with each application returning a new function that accepts the next argument. This lets a programmer succinctly express, for example, the <a href="/wiki/Successor_function" title="Successor function">successor function</a> as the addition operator partially applied to the <a href="/wiki/Natural_number" title="Natural number">natural number</a> one.</p>/n<h3><span class="mw-headline" id="Pure_functions">Pure functions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=4" title="Edit section: Pure functions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<p><a href="/wiki/Pure_function" title="Pure function">Pure functions</a> (or expressions) have no <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a> (memory or I/O). This means that pure functions have several useful properties, many of which can be used to optimize the code:</p>/n<ul>/n<li>If the result of a pure expression is not used, it can be removed without affecting other expressions.</li>/n<li>If a pure function is called with arguments that cause no side-effects, the result is constant with respect to that argument list (sometimes called <a href="/wiki/Referential_transparency_(computer_science)" class="mw-redirect" title="Referential transparency (computer science)">referential transparency</a>), i.e., if calling the pure function again with the same arguments returns the same result. (This can enable caching optimizations such as <a href="/wiki/Memoization" title="Memoization">memoization</a>.)</li>/n<li>If there is no data dependency between two pure expressions, their order can be reversed, or they can be performed in <a href="/wiki/Parallelization" class="mw-redirect" title="Parallelization">parallel</a> and they cannot interfere with one another (in other terms, the evaluation of any pure expression is <a href="/wiki/Thread-safe" class="mw-redirect" title="Thread-safe">thread-safe</a>).</li>/n<li>If the entire language does not allow side-effects, then any evaluation strategy can be used; this gives the compiler freedom to reorder or combine the evaluation of expressions in a program (for example, using <a href="/wiki/Deforestation_(computer_science)" title="Deforestation (computer science)">deforestation</a>).</li>/n</ul>/n<p>While most compilers for imperative programming languages detect pure functions and perform common-subexpression elimination for pure function calls, they cannot always do this for pre-compiled libraries, which generally do not expose this information, thus preventing optimizations that involve those external functions. Some compilers, such as <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a>, add extra keywords for a programmer to explicitly mark external functions as pure, to enable such optimizations. <a href="/wiki/Fortran_95" class="mw-redirect" title="Fortran 95">Fortran 95</a> also lets functions be designated <i>pure</i>.</p>/n<h3><span class="mw-headline" id="Recursion">Recursion</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=5" title="Edit section: Recursion">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<div role="note" class="hatnote navigation-not-searchable">Main article: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursion (computer science)</a></div>/n<p><a href="/wiki/Iteration" title="Iteration">Iteration</a> (looping) in functional languages is usually accomplished via <a href="/wiki/Recursion" title="Recursion">recursion</a>. <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive functions</a> invoke themselves, letting an operation be repeated until it reaches the <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">base case</a> . Though some recursion requires maintaining a stack, <a href="/wiki/Tail_recursion" class="mw-redirect" title="Tail recursion">tail recursion</a> can be recognized and optimized by a compiler into the same code used to implement iteration in imperative languages. The <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> language standard requires implementations to recognize and optimize tail recursion. Tail recursion optimization can be implemented by transforming the program into <a href="/wiki/Continuation_passing_style" class="mw-redirect" title="Continuation passing style">continuation passing style</a> during compiling, among other approaches.</p>/n<p>Common patterns of recursion can be factored out using higher order functions, with <a href="/wiki/Catamorphism" title="Catamorphism">catamorphisms</a> and <a href="/wiki/Anamorphism" title="Anamorphism">anamorphisms</a> (or "folds" and "unfolds") being the most obvious examples. Such higher order functions play a role analogous to built-in control structures such as <a href="/wiki/Program_loops" class="mw-redirect" title="Program loops">loops</a> in <a href="/wiki/Imperative_languages" class="mw-redirect" title="Imperative languages">imperative languages</a>.</p>/n<p>Most general purpose functional programming languages allow unrestricted recursion and are <a href="/wiki/Turing_complete" class="mw-redirect" title="Turing complete">Turing complete</a>, which makes the <a href="/wiki/Halting_problem" title="Halting problem">halting problem</a> <a href="/wiki/Undecidable_problem" title="Undecidable problem">undecidable</a>, can cause unsoundness of <a href="/wiki/Equational_reasoning" class="mw-redirect" title="Equational reasoning">equational reasoning</a>, and generally requires the introduction of <a href="/wiki/Inconsistency" class="mw-redirect" title="Inconsistency">inconsistency</a> into the logic expressed by the language's <a href="/wiki/Type_system" title="Type system">type system</a>. Some special purpose languages such as <a href="/wiki/Coq" title="Coq">Coq</a> allow only <a href="/wiki/Well-founded" class="mw-redirect" title="Well-founded">well-founded</a> recursion and are <a href="/wiki/Strongly_normalizing" class="mw-redirect" title="Strongly normalizing">strongly normalizing</a> (nonterminating computations can be expressed only with infinite streams of values called <a href="/wiki/Codata_(computer_science)" class="mw-redirect" title="Codata (computer science)">codata</a>). As a consequence, these languages fail to be Turing complete and expressing certain functions in them is impossible, but they can still express a wide class of interesting computations while avoiding the problems introduced by unrestricted recursion. Functional programming limited to well-founded recursion with a few other constraints is called <a href="/wiki/Total_functional_programming" title="Total functional programming">total functional programming</a>.<sup id="cite_ref-totalfp_41-0" class="reference"><a href="#cite_note-totalfp-41">[41]</a></sup></p>/n<h3><span class="mw-headline" id="Strict_versus_non-strict_evaluation">Strict versus non-strict evaluation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=6" title="Edit section: Strict versus non-strict evaluation">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<div role="note" class="hatnote navigation-not-searchable">Main article: <a href="/wiki/Evaluation_strategy" title="Evaluation strategy">Evaluation strategy</a></div>/n<p>Functional languages can be categorized by whether they use <i>strict (eager)</i> or <i>non-strict (lazy)</i> evaluation, concepts that refer to how function arguments are processed when an expression is being evaluated. The technical difference is in the <a href="/wiki/Denotational_semantics" title="Denotational semantics">denotational semantics</a> of expressions containing failing or divergent computations. Under strict evaluation, the evaluation of any term containing a failing subterm fails. For example, the expression:</p>/n<pre>/nprint length([2+1, 3*2, 1/0, 5-4])/n</pre>/n<p>fails under strict evaluation because of the division by zero in the third element of the list. Under lazy evaluation, the length function returns the value 4 (i.e., the number of items in the list), since evaluating it does not attempt to evaluate the terms making up the list. In brief, strict evaluation always fully evaluates function arguments before invoking the function. Lazy evaluation does not evaluate function arguments unless their values are required to evaluate the function call itself.</p>/n<p>The usual implementation strategy for lazy evaluation in functional languages is <a href="/wiki/Graph_reduction" title="Graph reduction">graph reduction</a>.<sup id="cite_ref-42" class="reference"><a href="#cite_note-42">[42]</a></sup> Lazy evaluation is used by default in several pure functional languages, including <a href="/wiki/Miranda_(programming_language)" title="Miranda (programming language)">Miranda</a>, <a href="/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a>, and <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>.</p>/n<p><a href="#CITEREFHughes1984">Hughes 1984</a> argues for lazy evaluation as a mechanism for improving program modularity through <a href="/wiki/Separation_of_concerns" title="Separation of concerns">separation of concerns</a>, by easing independent implementation of producers and consumers of data streams.<sup id="cite_ref-43" class="reference"><a href="#cite_note-43">[43]</a></sup> Launchbury 1993 describes some difficulties that lazy evaluation introduces, particularly in analyzing a program's storage requirements, and proposes an <a href="/wiki/Operational_semantics" title="Operational semantics">operational semantics</a> to aid in such analysis.<sup id="cite_ref-launchbury1993_44-0" class="reference"><a href="#cite_note-launchbury1993-44">[44]</a></sup> Harper 2009 proposes including both strict and lazy evaluation in the same language, using the language's type system to distinguish them.<sup id="cite_ref-45" class="reference"><a href="#cite_note-45">[45]</a></sup></p>/n<h3><span class="mw-headline" id="Type_systems">Type systems</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=7" title="Edit section: Type systems">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<p>Especially since the development of <a href="/wiki/Hindley%E2%80%93Milner_type_inference" class="mw-redirect" title="Hindley–Milner type inference">Hindley–Milner type inference</a> in the 1970s, functional programming languages have tended to use <a href="/wiki/Typed_lambda_calculus" title="Typed lambda calculus">typed lambda calculus</a>, rejecting all invalid programs at compilation time and risking <a href="/wiki/False_positives_and_false_negatives#False_positive_error" title="False positives and false negatives">false positive errors</a>, as opposed to the <a href="/wiki/Untyped_lambda_calculus" class="mw-redirect" title="Untyped lambda calculus">untyped lambda calculus</a>, that accepts all valid programs at compilation time and risks <a href="/wiki/False_positives_and_false_negatives#False_negative_error" title="False positives and false negatives">false negative errors</a>, used in Lisp and its variants (such as <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>), though they reject all invalid programs at runtime, when the information is enough to not reject valid programs. The use of <a href="/wiki/Algebraic_datatypes" class="mw-redirect" title="Algebraic datatypes">algebraic datatypes</a> makes manipulation of complex data structures convenient; the presence of strong compile-time type checking makes programs more reliable in absence of other reliability techniques like <a href="/wiki/Test-driven_development" title="Test-driven development">test-driven development</a>, while <a href="/wiki/Type_inference" title="Type inference">type inference</a> frees the programmer from the need to manually declare types to the compiler in most cases.</p>/n<p>Some research-oriented functional languages such as <a href="/wiki/Coq" title="Coq">Coq</a>, <a href="/wiki/Agda_(theorem_prover)" class="mw-redirect" title="Agda (theorem prover)">Agda</a>, <a href="/wiki/Cayenne_(programming_language)" title="Cayenne (programming language)">Cayenne</a>, and <a href="/wiki/Epigram_(programming_language)" title="Epigram (programming language)">Epigram</a> are based on <a href="/wiki/Intuitionistic_type_theory" title="Intuitionistic type theory">intuitionistic type theory</a>, which lets types depend on terms. Such types are called <a href="/wiki/Dependent_type" title="Dependent type">dependent types</a>. These type systems do not have decidable type inference and are difficult to understand and program with<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (December 2011)">citation needed</span></a></i>]</sup>. But dependent types can express arbitrary propositions in <a href="/wiki/Predicate_logic" class="mw-redirect" title="Predicate logic">predicate logic</a>. Through the <a href="/wiki/Curry%E2%80%93Howard_isomorphism" class="mw-redirect" title="Curry–Howard isomorphism">Curry–Howard isomorphism</a>, then, well-typed programs in these languages become a means of writing formal <a href="/wiki/Mathematical_proof" title="Mathematical proof">mathematical proofs</a> from which a compiler can generate <a href="/wiki/Formal_verification" title="Formal verification">certified code</a>. While these languages are mainly of interest in academic research (including in <a href="/wiki/Formalized_mathematics" class="mw-redirect" title="Formalized mathematics">formalized mathematics</a>), they have begun to be used in engineering as well. <a href="/wiki/Compcert" class="mw-redirect" title="Compcert">Compcert</a> is a <a href="/wiki/Compiler" title="Compiler">compiler</a> for a subset of the <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a> that is written in Coq and formally verified.<sup id="cite_ref-46" class="reference"><a href="#cite_note-46">[46]</a></sup></p>/n<p>A limited form of dependent types called <a href="/wiki/Generalized_algebraic_data_type" title="Generalized algebraic data type">generalized algebraic data types</a> (GADT's) can be implemented in a way that provides some of the benefits of dependently typed programming while avoiding most of its inconvenience.<sup id="cite_ref-47" class="reference"><a href="#cite_note-47">[47]</a></sup> GADT's are available in the <a href="/wiki/Glasgow_Haskell_Compiler" title="Glasgow Haskell Compiler">Glasgow Haskell Compiler</a>, in <a href="/wiki/OCaml" title="OCaml">OCaml</a> (since version 4.00) and in <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a> (as "case classes"), and have been proposed as additions to other languages including Java and C#.<sup id="cite_ref-48" class="reference"><a href="#cite_note-48">[48]</a></sup></p>/n<h3><span class="mw-headline" id="Referential_transparency">Referential transparency</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=8" title="Edit section: Referential transparency">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<div role="note" class="hatnote navigation-not-searchable">Main article: <a href="/wiki/Referential_transparency" title="Referential transparency">Referential transparency</a></div>/n<p>Functional programs do not have assignment statements, that is, the value of a variable in a functional program never changes once defined. This eliminates any chances of side effects because any variable can be replaced with its actual value at any point of execution. So, functional programs are referentially transparent.<sup id="cite_ref-49" class="reference"><a href="#cite_note-49">[49]</a></sup></p>/n<p>Consider <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> assignment statement <code>x = x * 10</code>, this changes the value assigned to the variable <code>x</code>. Let us say that the initial value of <code>x</code> was <code>1</code>, then two consecutive evaluations of the variable <code>x</code> yields <code>10</code> and <code>100</code> respectively. Clearly, replacing <code>x = x * 10</code> with either <code>10</code> or <code>100</code> gives a program with different meaning, and so the expression <i>is not</i> referentially transparent. In fact, assignment statements are never referentially transparent.</p>/n<p>Now, consider another function such as <code>int plusone(int x) {return x+1;}</code> <i>is</i> transparent, as it does not implicitly change the input x and thus has no such <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>. Functional programs exclusively use this type of function and are therefore referentially transparent.</p>/n<h3><span class="mw-headline" id="Functional_programming_in_non-functional_languages">Functional programming in non-functional languages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=9" title="Edit section: Functional programming in non-functional languages">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<p>It is possible to use a functional style of programming in languages that are not traditionally considered functional languages.<sup id="cite_ref-50" class="reference"><a href="#cite_note-50">[50]</a></sup> For example, both <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a> and <a href="/wiki/Fortran_95" class="mw-redirect" title="Fortran 95">Fortran 95</a> explicitly support pure functions.<sup id="cite_ref-51" class="reference"><a href="#cite_note-51">[51]</a></sup></p>/n<p><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>, <a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a><sup id="cite_ref-52" class="reference"><a href="#cite_note-52">[52]</a></sup> and <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> had <a href="/wiki/First-class_function" title="First-class function">first class functions</a> from their inception.<sup id="cite_ref-53" class="reference"><a href="#cite_note-53">[53]</a></sup> Amrit Prem added support to Python for "<a href="/wiki/Anonymous_function" title="Anonymous function">lambda</a>", "<a href="/wiki/Map_(higher-order_function)" title="Map (higher-order function)">map</a>", "<a href="/wiki/Fold_(higher-order_function)" title="Fold (higher-order function)">reduce</a>", and "<a href="/wiki/Filter_(higher-order_function)" title="Filter (higher-order function)">filter</a>" in 1994, as well as closures in Python 2.2,<sup id="cite_ref-54" class="reference"><a href="#cite_note-54">[54]</a></sup> though Python 3 relegated "reduce" to the <code>functools</code> standard library module.<sup id="cite_ref-55" class="reference"><a href="#cite_note-55">[55]</a></sup> First-class functions have been introduced into other mainstream languages such as <a href="/wiki/PHP" title="PHP">PHP</a> 5.3, <a href="/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a> 9, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> 3.0, and <a href="/wiki/C%2B%2B11" title="C++11">C++11</a>.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2015)">citation needed</span></a></i>]</sup></p>/n<p>In <a href="/wiki/PHP" title="PHP">PHP</a>, <a href="/wiki/Anonymous_class" class="mw-redirect" title="Anonymous class">anonymous classes</a>, <a href="/wiki/Closure_(computer_science)" class="mw-redirect" title="Closure (computer science)">closures</a> and lambdas are fully supported. Libraries and language extensions for immutable data structures are being developed to aid programming in the functional style.</p>/n<p>In <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Anonymous_class" class="mw-redirect" title="Anonymous class">anonymous classes</a> can sometimes be used to simulate <a href="/wiki/Closure_(computer_science)" class="mw-redirect" title="Closure (computer science)">closures</a>;<sup id="cite_ref-56" class="reference"><a href="#cite_note-56">[56]</a></sup> however, anonymous classes are not always proper replacements to <a href="/wiki/Closure_(computer_science)" class="mw-redirect" title="Closure (computer science)">closures</a> because they have more limited capabilities.<sup id="cite_ref-57" class="reference"><a href="#cite_note-57">[57]</a></sup> Java 8 supports lambda expressions as a replacement for some anonymous classes.<sup id="cite_ref-58" class="reference"><a href="#cite_note-58">[58]</a></sup> However, the presence of checked exceptions in Java can make functional programming inconvenient, because it can be necessary to catch checked exceptions and then rethrow them—a problem that does not occur in other JVM languages that do not have checked exceptions, such as Scala.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (March 2014)">citation needed</span></a></i>]</sup></p>/n<p>In <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>, <a href="/wiki/Anonymous_class" class="mw-redirect" title="Anonymous class">anonymous classes</a> are not necessary, because <a href="/wiki/Closure_(computer_science)" class="mw-redirect" title="Closure (computer science)">closures</a> and lambdas are fully supported. Libraries and language extensions for immutable data structures are being developed to aid programming in the functional style in C#.</p>/n<p>Many <a href="/wiki/Object-oriented" class="mw-redirect" title="Object-oriented">object-oriented</a> <a href="/wiki/Design_pattern_(computer_science)" class="mw-redirect" title="Design pattern (computer science)">design patterns</a> are expressible in functional programming terms: for example, the <a href="/wiki/Strategy_pattern" title="Strategy pattern">strategy pattern</a> simply dictates use of a higher-order function, and the <a href="/wiki/Visitor_(design_pattern)" class="mw-redirect" title="Visitor (design pattern)">visitor</a> pattern roughly corresponds to a <a href="/wiki/Catamorphism" title="Catamorphism">catamorphism</a>, or <a href="/wiki/Fold_(higher-order_function)" title="Fold (higher-order function)">fold</a>.</p>/n<p>Similarly, the idea of immutable data from functional programming is often included in imperative programming languages,<sup id="cite_ref-59" class="reference"><a href="#cite_note-59">[59]</a></sup> for example the tuple in Python, which is an immutable array.</p>/n<h3><span class="mw-headline" id="Data_structures">Data structures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=10" title="Edit section: Data structures">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<div role="note" class="hatnote navigation-not-searchable">Main article: <a href="/wiki/Purely_functional_data_structure" title="Purely functional data structure">Purely functional data structure</a></div>/n<p>Purely functional <a href="/wiki/Data_structure" title="Data structure">data structures</a> are often represented in a different way than their <a href="/wiki/Imperative_programming" title="Imperative programming">imperative</a> counterparts.<sup id="cite_ref-60" class="reference"><a href="#cite_note-60">[60]</a></sup> For example, <a href="/wiki/Array_data_structure" title="Array data structure">array</a> with constant-time access and update is a basic component of most imperative languages and many imperative data-structure, such as <a href="/wiki/Hash_table" title="Hash table">hash table</a> and <a href="/wiki/Binary_heap" title="Binary heap">binary heap</a>, are based on arrays. Arrays can be replaced by <a href="/wiki/Map_(computer_science)" class="mw-redirect" title="Map (computer science)">map</a> or <a href="/w/index.php?title=Random_access_list&amp;action=edit&amp;redlink=1" class="new" title="Random access list (page does not exist)">random access list</a>, which admits purely functional implementation, but the access and update time is <a href="/wiki/Logarithm" title="Logarithm">logarithmic</a>. Therefore, purely functional data structures can be used in non-functional languages, but they may not be the most efficient tool, especially if persistence is not required.</p>/n<h2><span class="mw-headline" id="Comparison_to_imperative_programming">Comparison to imperative programming</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=11" title="Edit section: Comparison to imperative programming">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>Functional programming is very different from <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a>. The most significant differences stem from the fact that functional programming avoids <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>, which are used in imperative programming to implement state and I/O. Pure functional programming completely prevents side-effects and provides <a href="/wiki/Referential_transparency_(computer_science)" class="mw-redirect" title="Referential transparency (computer science)">referential transparency</a>.</p>/n<p>Higher-order functions are rarely used in older imperative programming. A traditional imperative program might use a loop to traverse and modify a list. A functional program, on the other hand, would probably use a higher-order “map” function that takes a function and a list, generating and returning a new list by applying the function to each list item.</p>/n<h3><span class="mw-headline" id="Simulating_state">Simulating state</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=12" title="Edit section: Simulating state">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<p>There are tasks (for example, maintaining a bank account balance) that often seem most naturally implemented with state. Pure functional programming performs these tasks, and I/O tasks such as accepting user input and printing to the screen, in a different way.</p>/n<p>The pure functional programming language <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> implements them using <a href="/wiki/Monad_(functional_programming)" title="Monad (functional programming)">monads</a>, derived from <a href="/wiki/Category_theory" title="Category theory">category theory</a>. Monads offer a way to abstract certain types of computational patterns, including (but not limited to) modeling of computations with mutable state (and other side effects such as I/O) in an imperative manner without losing purity. While existing monads may be easy to apply in a program, given appropriate templates and examples, many students find them difficult to understand conceptually, e.g., when asked to define new monads (which is sometimes needed for certain types of libraries).<sup id="cite_ref-61" class="reference"><a href="#cite_note-61">[61]</a></sup></p>/n<p>Another way that functional languages can simulate state is by passing around a <a href="/wiki/Data_structure" title="Data structure">data structure</a> that represents the current state as a parameter to function calls. On each function call, a copy of this data structure is created with whatever differences are the result of the function. This is referred to as '<a href="/w/index.php?title=State-passing_style&amp;action=edit&amp;redlink=1" class="new" title="State-passing style (page does not exist)">state-passing style</a>'.</p>/n<p>Impure functional languages usually include a more direct method of managing mutable state. <a href="/wiki/Clojure" title="Clojure">Clojure</a>, for example, uses managed references that can be updated by applying pure functions to the current state. This kind of approach enables mutability while still promoting the use of pure functions as the preferred way to express computations.</p>/n<p>Alternative methods such as <a href="/wiki/Hoare_logic" title="Hoare logic">Hoare logic</a> and <a href="/wiki/Uniqueness_type" title="Uniqueness type">uniqueness</a> have been developed to track side effects in programs. Some modern research languages use <a href="/wiki/Effect_system" title="Effect system">effect systems</a> to make the presence of side effects explicit.</p>/n<h3><span class="mw-headline" id="Efficiency_issues">Efficiency issues</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=13" title="Edit section: Efficiency issues">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<p>Functional programming languages are typically less efficient in their use of <a href="/wiki/Central_processing_unit" title="Central processing unit">CPU</a> and memory than imperative languages such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>.<sup id="cite_ref-62" class="reference"><a href="#cite_note-62">[62]</a></sup> This is related to the fact that some mutable data structures like arrays have a very straightforward implementation using present hardware (which is a highly evolved Turing machine). Flat arrays may be accessed very efficiently with deeply pipelined CPUs, prefetched efficiently through caches (with no complex <a href="/w/index.php?title=Pointer_chasing&amp;action=edit&amp;redlink=1" class="new" title="Pointer chasing (page does not exist)">pointer chasing</a>), or handled with SIMD instructions. It is also not easy to create their equally efficient general-purpose immutable counterparts. For purely functional languages, the worst-case slowdown is logarithmic in the number of memory cells used, because mutable memory can be represented by a purely functional data structure with logarithmic access time (such as a balanced tree).<sup id="cite_ref-Spiewak_63-0" class="reference"><a href="#cite_note-Spiewak-63">[63]</a></sup> However, such slowdowns are not universal. For programs that perform intensive numerical computations, functional languages such as <a href="/wiki/OCaml" title="OCaml">OCaml</a> and <a href="/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a> are only slightly slower than C according to <a href="/wiki/The_Computer_Language_Benchmarks_Game" title="The Computer Language Benchmarks Game">The Computer Language Benchmarks Game</a>.<sup id="cite_ref-64" class="reference"><a href="#cite_note-64">[64]</a></sup> For programs that handle large <a href="/wiki/Matrix_(mathematics)" title="Matrix (mathematics)">matrices</a> and multidimensional <a href="/wiki/Database" title="Database">databases</a>, <a href="/wiki/Array_programming" title="Array programming">array</a> functional languages (such as <a href="/wiki/J_(programming_language)" title="J (programming language)">J</a> and <a href="/wiki/K_(programming_language)" title="K (programming language)">K</a>) were designed with speed optimizations.</p>/n<p>Immutability of data can in many cases lead to execution efficiency by allowing the compiler to make assumptions that are unsafe in an imperative language, thus increasing opportunities for <a href="/wiki/Inline_expansion" title="Inline expansion">inline expansion</a>.<sup id="cite_ref-65" class="reference"><a href="#cite_note-65">[65]</a></sup></p>/n<p><a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> may also speed up the program, even asymptotically, whereas it may slow it down at most by a constant factor (however, it may introduce <a href="/wiki/Memory_leak" title="Memory leak">memory leaks</a> if used improperly). Launchbury 1993<sup id="cite_ref-launchbury1993_44-1" class="reference"><a href="#cite_note-launchbury1993-44">[44]</a></sup> discusses theoretical issues related to memory leaks from lazy evaluation, and O'Sullivan <i>et al.</i> 2008<sup id="cite_ref-66" class="reference"><a href="#cite_note-66">[66]</a></sup> give some practical advice for analyzing and fixing them. However, the most general implementations of lazy evaluation making extensive use of dereferenced code and data perform poorly on modern processors with deep pipelines and multi-level caches (where a cache miss may cost hundreds of cycles)<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (June 2014)">citation needed</span></a></i>]</sup>.</p>/n<h3><span class="mw-headline" id="Coding_styles">Coding styles</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=14" title="Edit section: Coding styles">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<table class="plainlinks metadata ambox ambox-content ambox-Unreferenced" role="presentation">/n<tr>/n<td class="mbox-image">/n<div style="width:52px"><a href="/wiki/File:Question_book-new.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" data-file-width="512" data-file-height="399" /></a></div>/n</td>/n<td class="mbox-text">/n<div class="mbox-text-span">This section <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">sources</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="//en.wikipedia.org/w/index.php?title=Functional_programming&amp;action=edit">improve this section</a> by <a href="/wiki/Help:Introduction_to_referencing_with_Wiki_Markup/1" title="Help:Introduction to referencing with Wiki Markup/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(July 2013)</i></small> <small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></div>/n</td>/n</tr>/n</table>/n<p>Imperative programs have the environment and a sequence of steps manipulating the environment. Functional programs have an expression that is successively substituted until it reaches normal form. An example illustrates this with different solutions to the same programming goal (calculating <a href="/wiki/Fibonacci_number" title="Fibonacci number">Fibonacci numbers</a>).</p>/n<h4><span class="mw-headline" id="PHP"><a href="/wiki/PHP" title="PHP">PHP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=15" title="Edit section: PHP">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>Printing first 10 Fibonacci numbers, using function</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">function</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$n</span><span class="p">)</span> <span class="o">:</span> <span class="nx">int</span> <span class="p">{</span>/n    <span class="k">return</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nv">$n</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$n</span> <span class="o">:</span> <span class="nx">fib</span><span class="p">(</span><span class="nv">$n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">fib</span><span class="p">(</span><span class="nv">$n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>/n<span class="p">}</span>/n/n<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="k">echo</span> <span class="nx">fib</span><span class="p">(</span><span class="nv">$i</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>/n</pre></div>/n<p>Printing first 10 Fibonacci numbers, using closure</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nv">$fib</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$n</span><span class="p">)</span> <span class="k">use</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$fib</span><span class="p">)</span> <span class="o">:</span> <span class="nx">int</span> <span class="p">{</span>/n    <span class="k">return</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nv">$n</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$n</span> <span class="o">:</span> <span class="nv">$fib</span><span class="p">(</span><span class="nv">$n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$fib</span><span class="p">(</span><span class="nv">$n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>/n<span class="p">};</span>/n/n<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="k">echo</span> <span class="nv">$fib</span><span class="p">(</span><span class="nv">$i</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>/n</pre></div>/n<p>Printing a list with first 10 Fibonacci numbers, with generators</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">function</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>/n    <span class="k">yield</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$n</span><span class="o">--</span><span class="p">;</span>/n    <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$n</span><span class="o">--</span><span class="p">;</span>/n    <span class="nv">$second</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$first</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>/n    <span class="k">while</span> <span class="p">(</span><span class="nv">$n</span><span class="o">--</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>/n        <span class="k">yield</span> <span class="nv">$first</span><span class="p">;</span>/n        <span class="p">[</span><span class="nv">$second</span><span class="p">,</span> <span class="nv">$first</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$first</span> <span class="o">+</span> <span class="nv">$second</span><span class="p">,</span> <span class="nv">$second</span><span class="p">];</span>/n    <span class="p">}</span>/n<span class="p">}</span>/n/n<span class="nv">$fibo</span> <span class="o">=</span> <span class="nx">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>/n<span class="k">foreach</span> <span class="p">(</span><span class="nv">$fibo</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>/n    <span class="k">echo</span> <span class="nv">$value</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>/n<span class="p">}</span>/n</pre></div>/n<h4><span class="mw-headline" id="Python"><a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=16" title="Edit section: Python">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>Printing first 10 Fibonacci numbers, iterative</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">first</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>/n    <span class="k">while</span> <span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>/n        <span class="k">print</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span> <span class="c1"># side-effect</span>/n        <span class="n">n</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">second</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">first</span> <span class="o">+</span> <span class="n">second</span> <span class="c1"># assignment</span>/n<span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>/n</pre></div>/n<p>Printing first 10 Fibonacci numbers, functional expression style</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="n">fibonacci</span> <span class="o">=</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">,</span> <span class="n">first</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mi">1</span><span class="p">:</span>/n    <span class="s2">""</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span>/n    <span class="nb">str</span><span class="p">(</span><span class="n">first</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">first</span> <span class="o">+</span> <span class="n">second</span><span class="p">))</span>/n<span class="k">print</span><span class="p">(</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>/n</pre></div>/n<p>Printing a list with first 10 Fibonacci numbers, with generators</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">first</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>/n    <span class="k">while</span> <span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>/n        <span class="k">yield</span> <span class="n">first</span>/n        <span class="n">n</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">second</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">first</span> <span class="o">+</span> <span class="n">second</span> <span class="c1"># assignment</span>/n<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)))</span>/n</pre></div>/n<p>Printing a list with first 10 Fibonacci numbers, functional expression style</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="n">fibonacci</span> <span class="o">=</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">,</span> <span class="n">first</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mi">1</span><span class="p">:</span>/n    <span class="p">[]</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span>/n    <span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">first</span> <span class="o">+</span> <span class="n">second</span><span class="p">))</span>/n<span class="k">print</span><span class="p">(</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>/n</pre></div>/n<h4><span class="mw-headline" id="Haskell"><a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=17" title="Edit section: Haskell">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>Printing first 10 Fibonacci numbers, functional expression style<sup id="cite_ref-expression_style_1-1" class="reference"><a href="#cite_note-expression_style-1">[1]</a></sup></p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibonacci_aux</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span> <span class="n">first</span> <span class="n">second</span><span class="ow">-&gt;</span>/n    <span class="kr">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span> <span class="s">""</span> <span class="kr">else</span>/n    <span class="n">show</span> <span class="n">first</span> <span class="o">++</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span> <span class="o">++</span> <span class="n">fibonacci_aux</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">second</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">second</span><span class="p">)</span>/n<span class="nf">fibonacci</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span><span class="ow">-&gt;</span> <span class="n">fibonacci_aux</span> <span class="n">n</span> <span class="mi">0</span> <span class="mi">1</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStr</span> <span class="p">(</span><span class="n">fibonacci</span> <span class="mi">10</span><span class="p">)</span>/n</pre></div>/n<p>Printing a list with first 10 Fibonacci numbers, functional expression style<sup id="cite_ref-expression_style_1-2" class="reference"><a href="#cite_note-expression_style-1">[1]</a></sup></p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibonacci_aux</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span> <span class="n">first</span> <span class="n">second</span><span class="ow">-&gt;</span>/n    <span class="kr">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span> <span class="kt">[]</span> <span class="kr">else</span>/n    <span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">++</span> <span class="n">fibonacci_aux</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">second</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">second</span><span class="p">)</span>/n<span class="nf">fibonacci</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span><span class="ow">-&gt;</span> <span class="n">fibonacci_aux</span> <span class="n">n</span> <span class="mi">0</span> <span class="mi">1</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">show</span> <span class="p">(</span><span class="n">fibonacci</span> <span class="mi">10</span><span class="p">))</span>/n</pre></div>/n<p>Printing the 11th Fibonacci number, functional expression style<sup id="cite_ref-expression_style_1-3" class="reference"><a href="#cite_note-expression_style-1">[1]</a></sup></p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibonacci</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span><span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span> <span class="mi">0</span>/n                 <span class="kr">else</span> <span class="kr">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="kr">then</span> <span class="mi">1</span>/n                      <span class="kr">else</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">show</span> <span class="p">(</span><span class="n">fibonacci</span> <span class="mi">10</span><span class="p">))</span>/n</pre></div>/n<p>Printing the 11th Fibonacci number, functional expression style,<sup id="cite_ref-expression_style_1-4" class="reference"><a href="#cite_note-expression_style-1">[1]</a></sup> <a href="/wiki/Tail_recursive" class="mw-redirect" title="Tail recursive">tail recursive</a></p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibonacci_aux</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span> <span class="n">first</span> <span class="n">second</span><span class="ow">-&gt;</span>/n    <span class="kr">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">first</span> <span class="kr">else</span>/n    <span class="n">fibonacci_aux</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">second</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">second</span><span class="p">)</span>/n<span class="nf">fibonacci</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span><span class="ow">-&gt;</span> <span class="kt">Fibonacci_aux</span> <span class="n">n</span> <span class="mi">0</span> <span class="mi">1</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">show</span> <span class="p">(</span><span class="n">fibonacci</span> <span class="mi">10</span><span class="p">))</span>/n</pre></div>/n<p>Printing the 11th Fibonacci number, functional expression style<sup id="cite_ref-expression_style_1-5" class="reference"><a href="#cite_note-expression_style-1">[1]</a></sup> with recursive lists</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibonacci_aux</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">first</span> <span class="n">second</span><span class="ow">-&gt;</span> <span class="n">first</span> <span class="kt">:</span> <span class="n">fibonacci_aux</span> <span class="n">second</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">second</span><span class="p">)</span>/n<span class="nf">select</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span> <span class="n">zs</span><span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="kr">then</span> <span class="n">head</span> <span class="n">zs</span>/n                 <span class="kr">else</span> <span class="n">select</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">zs</span><span class="p">)</span>/n<span class="nf">fibonacci</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span><span class="ow">-&gt;</span> <span class="n">select</span> <span class="n">n</span> <span class="p">(</span><span class="n">fibonacci_aux</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">)</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">show</span> <span class="p">(</span><span class="n">fibonacci</span> <span class="mi">10</span><span class="p">))</span>/n</pre></div>/n<p>Printing the 11th Fibonacci number, functional expression style<sup id="cite_ref-expression_style_1-6" class="reference"><a href="#cite_note-expression_style-1">[1]</a></sup> with primitives for recursive lists</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibonacci_aux</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">first</span> <span class="n">second</span><span class="ow">-&gt;</span> <span class="n">first</span> <span class="kt">:</span> <span class="n">fibonacci_aux</span> <span class="n">second</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">second</span><span class="p">)</span>/n<span class="nf">fibonacci</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span><span class="ow">-&gt;</span> <span class="p">(</span><span class="n">fibonacci_aux</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!!</span> <span class="n">n</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">show</span> <span class="p">(</span><span class="n">fibonacci</span> <span class="mi">10</span><span class="p">))</span>/n</pre></div>/n<p>Printing the 11th Fibonacci number, functional expression style<sup id="cite_ref-expression_style_1-7" class="reference"><a href="#cite_note-expression_style-1">[1]</a></sup> with primitives for recursive lists, more concisely</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibonacci_aux</span> <span class="ow">=</span> <span class="mi">0</span><span class="kt">:</span><span class="mi">1</span><span class="kt">:</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">fibonacci_aux</span> <span class="p">(</span><span class="n">tail</span> <span class="n">fibonacci_aux</span><span class="p">)</span>/n<span class="nf">fibonacci</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">n</span><span class="ow">-&gt;</span> <span class="n">fibonacci_aux</span> <span class="o">!!</span> <span class="n">n</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">show</span> <span class="p">(</span><span class="n">fibonacci</span> <span class="mi">10</span><span class="p">))</span>/n</pre></div>/n<p>Printing the 11th Fibonacci number, functional declaration style,<sup id="cite_ref-declaration_style_2-1" class="reference"><a href="#cite_note-declaration_style-2">[2]</a></sup> <a href="/wiki/Tail_recursive" class="mw-redirect" title="Tail recursive">tail recursive</a></p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibonacci_aux</span> <span class="mi">0</span> <span class="n">first</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">first</span>/n<span class="nf">fibonacci_aux</span> <span class="n">n</span> <span class="n">first</span> <span class="n">second</span> <span class="ow">=</span> <span class="n">fibonacci_aux</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">second</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">second</span><span class="p">)</span>/n<span class="nf">fibonacci</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">fibonacci_aux</span> <span class="n">n</span> <span class="mi">0</span> <span class="mi">1</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">show</span> <span class="p">(</span><span class="n">fibonacci</span> <span class="mi">10</span><span class="p">))</span>/n</pre></div>/n<p>Printing the 11th Fibonacci number, functional declaration style, using <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy</a> <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">infinite lists</a> and primitives</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fibs</span> <span class="ow">=</span> <span class="mi">1</span> <span class="kt">:</span> <span class="mi">1</span> <span class="kt">:</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">fibs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">fibs</span><span class="p">)</span> /n<span class="c1">-- an infinite list of the fibonacci numbers</span>/n<span class="c1">-- fibs is defined in terms of fibs</span>/n<span class="nf">fibonacci</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fibs</span> <span class="o">!!</span><span class="p">)</span>/n<span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">show</span> <span class="o">$</span> <span class="n">fibonacci</span> <span class="mi">11</span>/n</pre></div>/n<h4><span class="mw-headline" id="Perl_6">Perl 6</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=18" title="Edit section: Perl 6">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>As influenced by Haskell and others, <a href="/wiki/Perl_6" title="Perl 6">Perl 6</a> has several functional and declarative approaches to problems. For example, you can declaratively build up a well-typed recursive version (the type constraints are optional) through signature pattern matching:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="c c-Singleline"># define constraints that are common to all candidates</span>/n<span class="k">proto</span> <span class="n">fib</span> ( <span class="nb">UInt:D</span> \<span class="n">n</span> --&gt; <span class="nb">UInt:D</span> ) {*}/n/n<span class="k">multi</span> <span class="n">fib</span> ( <span class="mi">0</span> --&gt; <span class="mi">0</span> ) { }/n<span class="k">multi</span> <span class="n">fib</span> ( <span class="mi">1</span> --&gt; <span class="mi">1</span> ) { }/n/n<span class="k">multi</span> <span class="n">fib</span> ( \<span class="n">n</span> ) {/n    <span class="n">fib</span>(<span class="n">n</span> - <span class="mi">1</span>) + <span class="n">fib</span>(<span class="n">n</span> - <span class="mi">2</span>)/n}/n/n<span class="k">for</span> ^<span class="mi">10</span> -&gt; <span class="nv">$n</span> { <span class="nb">say</span> <span class="n">fib</span>(<span class="nv">$n</span>) }/n</pre></div>/n<p>An alternative to this is to construct a lazy iterative sequence, which appears as an almost direct illustration of the sequence:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">my</span> <span class="nv">@fib</span> = <span class="mi">0</span>, <span class="mi">1</span>, *+* ... *; <span class="c c-Singleline"># Each additional entry is the sum of the previous two</span>/n                           <span class="c c-Singleline"># and this sequence extends lazily indefinitely</span>/n<span class="nb">say</span> <span class="nv">@fib</span>[^<span class="mi">10</span>];             <span class="c c-Singleline"># Display the first 10 entries</span>/n</pre></div>/n<h4><span class="mw-headline" id="Erlang"><a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=19" title="Edit section: Erlang">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p><b><a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a></b> is a functional, concurrent, general-purpose programming language. A <a href="/wiki/Fibonacci_number" title="Fibonacci number">Fibonacci</a> algorithm implemented in Erlang (Note: This is only for demonstrating the Erlang <a href="/wiki/Syntax_(programming_languages)" title="Syntax (programming languages)">syntax</a>. Use other algorithms for fast performance<sup id="cite_ref-67" class="reference"><a href="#cite_note-67">[67]</a></sup>):</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">fib</span><span class="p">).</span>    <span class="c">% This is the file 'fib.erl', the module and the filename must match</span>/n<span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">fib</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span> <span class="c">% This exports the function 'fib' of arity 1</span>/n/n<span class="nf">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="c">% If 1, then return 1, otherwise (note the semicolon ; meaning 'else')</span>/n<span class="nf">fib</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="c">% If 2, then return 1, otherwise</span>/n<span class="nf">fib</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="nv">N</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="nv">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span>/n</pre></div>/n<h4><span class="mw-headline" id="Elixir">Elixir</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=20" title="Edit section: Elixir">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p><b><a href="/wiki/Elixir_(programming_language)" title="Elixir (programming language)">Elixir</a></b> is a functional, concurrent, general-purpose programming language that runs on the <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang virtual machine (BEAM)</a>.</p>/n<p>The Fibonacci function can be written in Elixir as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="kd">defmodule</span> <span class="nc">Fibonacci</span> <span class="k">do</span>/n  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>/n  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>/n  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>/n<span class="k">end</span>/n</pre></div>/n<h4><span class="mw-headline" id="Lisp">Lisp</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=21" title="Edit section: Lisp">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>The Fibonacci function can be written in <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="p">(</span><span class="nb">defun</span> <span class="nv">fib</span> <span class="p">(</span><span class="nv">n</span> <span class="k">&amp;optional</span> <span class="p">(</span><span class="nv">a</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nv">b</span> <span class="mi">1</span><span class="p">))</span>/n  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>/n      <span class="nv">a</span>/n      <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>/n</pre></div>/n<p>or</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="p">(</span><span class="nb">defun</span> <span class="nv">fib</span> <span class="p">(</span><span class="nv">k</span><span class="p">)</span>/n     <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">zerop</span> <span class="nv">k</span><span class="p">)</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">))</span>/n         <span class="nv">k</span>/n        <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">k</span> <span class="mi">2</span><span class="p">)))))</span>/n</pre></div>/n<p>The program can then be called as</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="p">(</span><span class="nv">fib</span> <span class="mi">10</span><span class="p">)</span>/n</pre></div>/n<h4><span class="mw-headline" id="Clojure"><a href="/wiki/Clojure" title="Clojure">Clojure</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=22" title="Edit section: Clojure">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>The Fibonacci function can be written in <a href="/wiki/Clojure" title="Clojure">Clojure</a> as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="p">(</span><span class="kd">defn </span><span class="nv">fib</span>/n  <span class="p">[</span><span class="nv">n</span><span class="p">]</span>/n  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">a</span> <span class="mi">0</span> <span class="nv">b</span> <span class="mi">1</span> <span class="nv">i</span> <span class="nv">n</span><span class="p">]</span>/n    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">i</span><span class="p">)</span>/n      <span class="nv">a</span>/n      <span class="p">(</span><span class="nf">recur</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">)))))</span>/n</pre></div>/n<p>The program can then be called as</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="p">(</span><span class="nf">fib</span> <span class="mi">7</span><span class="p">)</span>/n</pre></div>/n<p>Explicitly using "lazy-seq", the infinite sequence of Fibonacci numbers can be defined recursively.</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="c1">;; lazy infinite sequence</span>/n<span class="p">(</span><span class="k">def </span><span class="nv">fibs</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">0</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nb">map </span><span class="nv">+</span><span class="o">'</span> <span class="nv">fibs</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">fibs</span><span class="p">))))))</span>/n/n<span class="c1">;; list of first 10 Fibonacci numbers taken from infinite sequence</span>/n<span class="p">(</span><span class="nb">take </span><span class="mi">10</span> <span class="nv">fibs</span><span class="p">)</span>/n</pre></div>/n<h4><span class="mw-headline" id="Kotlin"><a href="/wiki/Kotlin_(programming_language)" title="Kotlin (programming language)">Kotlin</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=23" title="Edit section: Kotlin">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>The Fibonacci function can be written in <a href="/wiki/Kotlin_(programming_language)" title="Kotlin (programming language)">Kotlin</a> as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">fun</span> <span class="nf">fib</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">x</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span> <span class="n">x</span> <span class="k">else</span> <span class="n">fib</span><span class="p">(</span><span class="n">x</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span> <span class="p">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">x</span> <span class="p">-</span> <span class="m">2</span><span class="p">)</span>/n</pre></div>/n<p>The program can then be called as</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="n">fib</span><span class="p">(</span><span class="m">7</span><span class="p">)</span>/n</pre></div>/n<h4><span class="mw-headline" id="JavaScript"><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=24" title="Edit section: JavaScript">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>The Fibonacci function can be written in <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="kd">function</span> <span class="nx">fib</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>/n  <span class="k">return</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">x</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="nx">x</span> <span class="o">:</span> <span class="nx">fib</span><span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">fib</span><span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>/n<span class="p">}</span>/n</pre></div>/n<h4><span class="mw-headline" id="D">D</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=25" title="Edit section: D">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p><a href="/wiki/D_(programming_language)" title="D (programming language)">D</a> has support for functional programming<sup class="noprint Inline-Template" style="margin-left:0.1em; white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Please_clarify" title="Wikipedia:Please clarify"><span title="The text near this tag may need clarification or removal of jargon. (April 2015)">clarification needed</span></a></i>]</sup><sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2015)">citation needed</span></a></i>]</sup>:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">stdio</span><span class="p">;</span>/n<span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">range</span><span class="p">;</span>/n/n<span class="kt">void</span> <span class="n">main</span><span class="p">()</span>/n<span class="p">{</span>/n    <span class="cm">/* 'f' is a range representing the first 10 Fibonacci numbers */</span>/n    <span class="k">auto</span> <span class="n">f</span> <span class="p">=</span> <span class="n">recurrence</span><span class="p">!((</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">+</span> <span class="n">seq</span><span class="p">[</span><span class="mi">1</span><span class="p">])(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>/n             <span class="p">.</span><span class="n">take</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>/n/n    <span class="n">writeln</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>/n<span class="p">}</span>/n</pre></div>/n<h4><span class="mw-headline" id="R">R</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=26" title="Edit section: R">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p><a href="/wiki/R_(programming_language)" title="R (programming language)">R</a> is an environment for statistical computing and graphics. It is also a functional programming language.</p>/n<p>The Fibonacci function can be written in <a href="/wiki/R_(programming_language)" title="R (programming language)">R</a> as a recursive function as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/nfib <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>n<span class="p">)</span> <span class="p">{</span>/n <span class="kr">if</span> <span class="p">(</span>n <span class="o">&lt;=</span> <span class="m">2</span><span class="p">)</span> <span class="m">1</span>/n <span class="kr">else</span> fib<span class="p">(</span>n <span class="o">-</span> <span class="m">1</span><span class="p">)</span> <span class="o">+</span> fib<span class="p">(</span>n <span class="o">-</span> <span class="m">2</span><span class="p">)</span>/n<span class="p">}</span>/n</pre></div>/n<p>Or it can be written as a singly recursive function:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/nfib <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>n<span class="p">,</span>a<span class="o">=</span><span class="m">1</span><span class="p">,</span>b<span class="o">=</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span> /n <span class="kr">if</span> <span class="p">(</span>n <span class="o">==</span> <span class="m">1</span><span class="p">)</span> a /n <span class="kr">else</span> fib<span class="p">(</span>n<span class="m">-1</span><span class="p">,</span>b<span class="p">,</span>a<span class="o">+</span>b<span class="p">)</span> /n<span class="p">}</span>/n</pre></div>/n<p>Or it can be written as an iterative function:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/nfib <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>n<span class="p">)</span> <span class="p">{</span>/n <span class="kr">if</span> <span class="p">(</span>n <span class="o">==</span> <span class="m">1</span><span class="p">)</span> <span class="m">1</span>/n <span class="kr">else</span> <span class="kr">if</span> <span class="p">(</span>n <span class="o">==</span> <span class="m">2</span><span class="p">)</span> <span class="m">1</span>/n <span class="kr">else</span> <span class="p">{</span>/n  fibval<span class="o">&lt;-</span><span class="kt">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">)</span>/n  <span class="kr">for</span> <span class="p">(</span>i <span class="kr">in</span> <span class="m">3</span><span class="o">:</span>n<span class="p">)</span> fibval<span class="o">&lt;-</span><span class="kt">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span>fibval<span class="p">[</span><span class="m">1</span><span class="p">])</span><span class="o">+</span>fibval<span class="p">[</span><span class="m">2</span><span class="p">]</span>/n  fibval<span class="p">[</span><span class="m">2</span><span class="p">]</span>/n <span class="p">}</span>/n<span class="p">}</span>/n</pre></div>/n<p>The function can then be called as</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/nfib<span class="p">(</span><span class="m">10</span><span class="p">)</span>/n</pre></div>/n<h4><span class="mw-headline" id="SequenceL"><a href="/wiki/SequenceL" title="SequenceL">SequenceL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=27" title="Edit section: SequenceL">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>SequenceL is a functional, concurrent, general-purpose programming language. The Fibonacci function can be written in SequenceL as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="kt">:=</span> <span class="n">n</span> <span class="n">when</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="kr">else</span>/n          <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>/n</pre></div>/n<p>The function can then be called as</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>/n</pre></div>/n<p>To reduce the memory consumed by the call stack when computing a large Fibonacci term, a tail-recursive version can be used. A tail-recursive function is implemented by the SequenceL compiler as a memory-efficient looping structure:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="kt">:=</span> <span class="n">fib_Helper</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>/n/n<span class="nf">fib_Helper</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">next</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="kt">:=</span>/n    <span class="n">prev</span> <span class="n">when</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="kr">else</span>/n    <span class="n">next</span> <span class="n">when</span> <span class="n">n</span> <span class="ow">=</span> <span class="mi">1</span> <span class="kr">else</span>/n    <span class="n">fib_Helper</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">next</span> <span class="o">+</span> <span class="n">prev</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>/n</pre></div>/n<h4><span class="mw-headline" id="Tcl">Tcl</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=28" title="Edit section: Tcl">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>The Fibonacci function can be written in <a href="/wiki/Tcl" title="Tcl">Tcl</a> as a recursive function as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">proc</span> fibo <span class="k">{</span><span class="nv">x</span><span class="k">}</span> <span class="k">{</span>/n    <span class="k">expr</span> <span class="k">{</span><span class="nv">$x</span><span class="o">&lt;</span><span class="nv">2</span><span class="o">?</span> <span class="nv">$x:</span> <span class="k">[</span><span class="nv">fibo</span> <span class="k">[</span><span class="nb">incr</span> x <span class="o">-</span><span class="mi">1</span><span class="k">]]</span> <span class="o">+</span> <span class="k">[</span><span class="nv">fibo</span> <span class="k">[</span><span class="nb">incr</span> x <span class="o">-</span><span class="mi">1</span><span class="k">]]}</span>/n<span class="k">}</span>/n</pre></div>/n<h4><span class="mw-headline" id="Scala">Scala</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=29" title="Edit section: Scala">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>The Fibonacci function can be written in <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a> in a bunch of ways:</p>/n<p>Imperative "Java" style</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">def</span> <span class="n">fibImper</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>/n  <span class="k">var</span> <span class="n">i</span> <span class="k">=</span> <span class="mi">0</span>/n  <span class="k">var</span> <span class="n">j</span> <span class="k">=</span> <span class="mi">1</span>/n/n  <span class="k">for</span> <span class="o">(</span><span class="n">k</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>/n    <span class="k">val</span> <span class="n">l</span> <span class="k">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span>/n    <span class="n">i</span> <span class="k">=</span> <span class="n">j</span>/n    <span class="n">j</span> <span class="k">=</span> <span class="n">l</span>/n  <span class="o">}</span>/n  <span class="n">i</span>/n<span class="o">}</span>/n</pre></div>/n<p>Recursive style, slow</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">def</span> <span class="n">fibRec</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>/n  <span class="n">n</span> <span class="k">match</span> <span class="o">{</span>/n    <span class="k">case</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="mi">0</span>/n    <span class="k">case</span> <span class="mi">1</span> <span class="k">=&gt;</span> <span class="mi">1</span>/n    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">fib1</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fib1</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">)</span>/n  <span class="o">}</span>/n<span class="o">}</span>/n</pre></div>/n<p>Recursive style, fast</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">def</span> <span class="n">fibTailRec</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>/n  <span class="nd">@tailrec</span> <span class="k">def</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">c</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="mi">0</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="n">c</span> <span class="k">else</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">)</span>/n  <span class="n">f</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>/n<span class="o">}</span>/n</pre></div>/n<p>Using Scala streams</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">val</span> <span class="n">fibStream</span><span class="k">:</span><span class="kt">Stream</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="mi">0</span> <span class="o">#::</span> <span class="mi">1</span> <span class="o">#::</span> <span class="o">(</span><span class="n">fibStream</span> <span class="n">zip</span> <span class="n">fibStream</span><span class="o">.</span><span class="n">tail</span><span class="o">).</span><span class="n">map</span><span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">_1</span> <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="n">_2</span> <span class="o">}</span>/n</pre></div>/n<h2><span class="mw-headline" id="Use_in_industry">Use in industry</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=30" title="Edit section: Use in industry">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>Functional programming has long been popular in academia, but with few industrial applications.<sup id="cite_ref-programmingScala_68-0" class="reference"><a href="#cite_note-programmingScala-68">[68]</a></sup><sup class="reference" style="white-space:nowrap;">:page 11</sup> However, recently several prominent functional programming languages have been used in commercial or industrial systems. For example, the <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a> programming language, which was developed by the <a href="/wiki/Sweden" title="Sweden">Swedish</a> company <a href="/wiki/Ericsson" title="Ericsson">Ericsson</a> in the late 1980s, was originally used to implement fault-tolerant telecommunications systems.<sup id="cite_ref-armstrong2007_13-1" class="reference"><a href="#cite_note-armstrong2007-13">[13]</a></sup> It has since become popular for building a range of applications at companies such as <a href="/wiki/T-Mobile" title="T-Mobile">T-Mobile</a>, <a href="/wiki/Nortel" title="Nortel">Nortel</a>, <a href="/wiki/Facebook" title="Facebook">Facebook</a>, <a href="/wiki/%C3%89lectricit%C3%A9_de_France" title="Électricité de France">Électricité de France</a> and <a href="/wiki/WhatsApp" title="WhatsApp">WhatsApp</a>.<sup id="cite_ref-erlang-faq_12-1" class="reference"><a href="#cite_note-erlang-faq-12">[12]</a></sup><sup id="cite_ref-larson2009_14-1" class="reference"><a href="#cite_note-larson2009-14">[14]</a></sup><sup id="cite_ref-69" class="reference"><a href="#cite_note-69">[69]</a></sup><sup id="cite_ref-Sim-Diasca_70-0" class="reference"><a href="#cite_note-Sim-Diasca-70">[70]</a></sup><sup id="cite_ref-whatsapp.blog.2012_71-0" class="reference"><a href="#cite_note-whatsapp.blog.2012-71">[71]</a></sup> The <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> dialect of <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> was used as the basis for several applications on early <a href="/wiki/Apple_Macintosh" class="mw-redirect" title="Apple Macintosh">Apple Macintosh</a> computers,<sup id="cite_ref-clinger1987_4-1" class="reference"><a href="#cite_note-clinger1987-4">[4]</a></sup><sup id="cite_ref-hartheimer1987_5-1" class="reference"><a href="#cite_note-hartheimer1987-5">[5]</a></sup> and has more recently been applied to problems such as training <a href="/wiki/Computer_simulation" title="Computer simulation">simulation software</a><sup id="cite_ref-kidd2007_6-1" class="reference"><a href="#cite_note-kidd2007-6">[6]</a></sup> and <a href="/wiki/Telescope" title="Telescope">telescope</a> control.<sup id="cite_ref-cleis2006_7-1" class="reference"><a href="#cite_note-cleis2006-7">[7]</a></sup> <a href="/wiki/OCaml" title="OCaml">OCaml</a>, which was introduced in the mid-1990s, has seen commercial use in areas such as financial analysis,<sup id="cite_ref-minksy2008_15-1" class="reference"><a href="#cite_note-minksy2008-15">[15]</a></sup> <a href="/wiki/Software_driver" class="mw-redirect" title="Software driver">driver</a> verification, industrial <a href="/wiki/Robot" title="Robot">robot</a> programming, and static analysis of <a href="/wiki/Embedded_software" title="Embedded software">embedded software</a>.<sup id="cite_ref-leroy2007_16-1" class="reference"><a href="#cite_note-leroy2007-16">[16]</a></sup> <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, though initially intended as a research language,<sup id="cite_ref-hudak2007_18-1" class="reference"><a href="#cite_note-hudak2007-18">[18]</a></sup> has also been applied by a range of companies, in areas such as aerospace systems, hardware design, and web programming.<sup id="cite_ref-haskell-industry_17-1" class="reference"><a href="#cite_note-haskell-industry-17">[17]</a></sup><sup id="cite_ref-hudak2007_18-2" class="reference"><a href="#cite_note-hudak2007-18">[18]</a></sup></p>/n<p>Other functional programming languages that have seen use in industry include <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>,<sup id="cite_ref-72" class="reference"><a href="#cite_note-72">[72]</a></sup> <a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a>,<sup id="cite_ref-quantFSharp_19-1" class="reference"><a href="#cite_note-quantFSharp-19">[19]</a></sup><sup id="cite_ref-businessAppsFSharp_20-1" class="reference"><a href="#cite_note-businessAppsFSharp-20">[20]</a></sup> (both being functional-OO hybrids with support for both purely functional and imperative programming) <a href="/wiki/Wolfram_Language" title="Wolfram Language">Wolfram Language</a>,<sup id="cite_ref-reference.wolfram.com_10-1" class="reference"><a href="#cite_note-reference.wolfram.com-10">[10]</a></sup> <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>,<sup id="cite_ref-73" class="reference"><a href="#cite_note-73">[73]</a></sup> <a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a><sup id="cite_ref-74" class="reference"><a href="#cite_note-74">[74]</a></sup><sup id="cite_ref-75" class="reference"><a href="#cite_note-75">[75]</a></sup> and <a href="/wiki/Clojure" title="Clojure">Clojure</a>.<sup id="cite_ref-76" class="reference"><a href="#cite_note-76">[76]</a></sup></p>/n<h2><span class="mw-headline" id="In_education">In education</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=31" title="Edit section: In education">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>Functional programming is being used as a method to teach problem solving, algebra and geometric concepts.<sup id="cite_ref-bootstrapworld_77-0" class="reference"><a href="#cite_note-bootstrapworld-77">[77]</a></sup> It has also been used as a tool to teach classical mechanics in <a href="/wiki/Structure_and_Interpretation_of_Classical_Mechanics" title="Structure and Interpretation of Classical Mechanics">Structure and Interpretation of Classical Mechanics</a>.</p>/n<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=32" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<div role="navigation" aria-label="Portals" class="noprint portal plainlist tright" style="margin:0.5em 0 0.5em 1em;border:solid #aaa 1px">/n<ul style="display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold">/n<li style="display:table-row"><span style="display:table-cell;padding:0.2em;vertical-align:middle;text-align:center"><a href="/wiki/File:8bit-dynamiclist_(reversed).gif" class="image"><img alt="icon" src="//upload.wikimedia.org/wikipedia/commons/thumb/c/cc/8bit-dynamiclist_%28reversed%29.gif/28px-8bit-dynamiclist_%28reversed%29.gif" width="28" height="28" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/commons/c/cc/8bit-dynamiclist_%28reversed%29.gif 1.5x" data-file-width="32" data-file-height="32" /></a></span><span style="display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle"><a href="/wiki/Portal:Computer_programming" title="Portal:Computer programming">Computer programming portal</a></span></li>/n</ul>/n</div>/n<ul>/n<li><a href="/wiki/Purely_functional_programming" title="Purely functional programming">Purely functional programming</a></li>/n<li><a href="/wiki/Comparison_of_programming_paradigms" title="Comparison of programming paradigms">Comparison of programming paradigms</a></li>/n<li><a href="/wiki/Eager_evaluation" title="Eager evaluation">Eager evaluation</a></li>/n<li><a href="/wiki/List_of_functional_programming_topics" title="List of functional programming topics">List of functional programming topics</a></li>/n<li><a href="/wiki/Nested_function" title="Nested function">Nested function</a></li>/n<li><a href="/wiki/Inductive_functional_programming" class="mw-redirect" title="Inductive functional programming">Inductive functional programming</a></li>/n<li><a href="/wiki/Functional_reactive_programming" title="Functional reactive programming">Functional reactive programming</a></li>/n</ul>/n<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=33" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<div class="reflist columns references-column-width" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;">/n<ol class="references">/n<li id="cite_note-expression_style-1"><span class="mw-cite-backlink">^ <a href="#cite_ref-expression_style_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-expression_style_1-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-expression_style_1-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-expression_style_1-3"><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-expression_style_1-4"><sup><i><b>e</b></i></sup></a> <a href="#cite_ref-expression_style_1-5"><sup><i><b>f</b></i></sup></a> <a href="#cite_ref-expression_style_1-6"><sup><i><b>g</b></i></sup></a> <a href="#cite_ref-expression_style_1-7"><sup><i><b>h</b></i></sup></a></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://wiki.haskell.org/Declaration_vs._expression_style#Expression_style">"Declaration vs. expression style - HaskellWiki"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Declaration+vs.+expression+style+-+HaskellWiki&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fwiki.haskell.org%2FDeclaration_vs._expression_style%23Expression_style&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-declaration_style-2"><span class="mw-cite-backlink">^ <a href="#cite_ref-declaration_style_2-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-declaration_style_2-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://wiki.haskell.org/Declaration_vs._expression_style#Declaration_style">"Declaration vs. expression style - HaskellWiki"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Declaration+vs.+expression+style+-+HaskellWiki&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fwiki.haskell.org%2FDeclaration_vs._expression_style%23Declaration_style&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-hudak1989-3"><span class="mw-cite-backlink">^ <a href="#cite_ref-hudak1989_3-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-hudak1989_3-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal"><a href="/wiki/Paul_Hudak" title="Paul Hudak">Hudak, Paul</a> (September 1989). <a rel="nofollow" class="external text" href="http://www.dbnet.ece.ntua.gr/~adamo/languages/books/p359-hudak.pdf">"Conception, evolution, and application of functional programming languages"</a> <span style="font-size:85%;">(PDF)</span>. <i><a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> Computing Surveys</i>. <b>21</b> (3): 359–411. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1145%2F72551.72554">10.1145/72551.72554</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Conception%2C+evolution%2C+and+application+of+functional+programming+languages&amp;rft.aufirst=Paul&amp;rft.aulast=Hudak&amp;rft.date=1989-09&amp;rft.genre=article&amp;rft.issue=3&amp;rft.jtitle=ACM+Computing+Surveys&amp;rft.pages=359-411&amp;rft.volume=21&amp;rft_id=http%3A%2F%2Fwww.dbnet.ece.ntua.gr%2F~adamo%2Flanguages%2Fbooks%2Fp359-hudak.pdf&amp;rft_id=info%3Adoi%2F10.1145%2F72551.72554&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-clinger1987-4"><span class="mw-cite-backlink">^ <a href="#cite_ref-clinger1987_4-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-clinger1987_4-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Clinger, Will (1987). <a rel="nofollow" class="external text" href="http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html">"MultiTasking and MacScheme"</a>. <i>MacTech</i>. <b>3</b> (12)<span class="reference-accessdate">. Retrieved <span class="nowrap">2008-08-28</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=MultiTasking+and+MacScheme&amp;rft.aufirst=Will&amp;rft.aulast=Clinger&amp;rft.date=1987&amp;rft.genre=article&amp;rft.issue=12&amp;rft.jtitle=MacTech&amp;rft.volume=3&amp;rft_id=http%3A%2F%2Fwww.mactech.com%2Farticles%2Fmactech%2FVol.03%2F03.12%2FMultitasking%2Findex.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-hartheimer1987-5"><span class="mw-cite-backlink">^ <a href="#cite_ref-hartheimer1987_5-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-hartheimer1987_5-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Hartheimer, Anne (1987). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20110629183752/http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html">"Programming a Text Editor in MacScheme+Toolsmith"</a>. <i>MacTech</i>. <b>3</b> (1). Archived from <a rel="nofollow" class="external text" href="http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html">the original</a> on 2011-06-29<span class="reference-accessdate">. Retrieved <span class="nowrap">2008-08-28</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Programming+a+Text+Editor+in+MacScheme%2BToolsmith&amp;rft.aufirst=Anne&amp;rft.aulast=Hartheimer&amp;rft.date=1987&amp;rft.genre=article&amp;rft.issue=1&amp;rft.jtitle=MacTech&amp;rft.volume=3&amp;rft_id=http%3A%2F%2Fwww.mactech.com%2Farticles%2Fmactech%2FVol.03%2F03.1%2FSchemeWindows%2Findex.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-kidd2007-6"><span class="mw-cite-backlink">^ <a href="#cite_ref-kidd2007_6-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-kidd2007_6-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation conference">Kidd, Eric. <a rel="nofollow" class="external text" href="http://cufp.galois.com/2007/abstracts.html#EricKidd"><i>Terrorism Response Training in Scheme</i></a>. CUFP 2007<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-26</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Eric&amp;rft.aulast=Kidd&amp;rft.btitle=Terrorism+Response+Training+in+Scheme&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2007%2Fabstracts.html%23EricKidd&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-cleis2006-7"><span class="mw-cite-backlink">^ <a href="#cite_ref-cleis2006_7-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-cleis2006_7-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation conference">Cleis, Richard. <a rel="nofollow" class="external text" href="http://cufp.galois.com/2006/abstracts.html#RichardCleis"><i>Scheme in Space</i></a>. CUFP 2006<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-26</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Richard&amp;rft.aulast=Cleis&amp;rft.btitle=Scheme+in+Space&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2006%2Fabstracts.html%23RichardCleis&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-useR-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-useR_8-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.r-project.org/useR-2006/program.html">"The useR! 2006 conference schedule includes papers on the commercial use of R"</a>. R-project.org. 2006-06-08<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-06-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=The+useR%21+2006+conference+schedule+includes+papers+on+the+commercial+use+of+R&amp;rft.date=2006-06-08&amp;rft.genre=unknown&amp;rft.pub=R-project.org&amp;rft_id=http%3A%2F%2Fwww.r-project.org%2FuseR-2006%2Fprogram.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Chambers-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-Chambers_9-0">^</a></b></span> <span class="reference-text"><cite class="citation book"><a href="/wiki/John_Chambers_(programmer)" class="mw-redirect" title="John Chambers (programmer)">Chambers, John M.</a> (1998). <i>Programming with Data: A Guide to the S Language</i>. Springer Verlag. pp.&#160;67–70. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-0-387-98503-9" title="Special:BookSources/978-0-387-98503-9">978-0-387-98503-9</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=John+M.&amp;rft.aulast=Chambers&amp;rft.btitle=Programming+with+Data%3A+A+Guide+to+the+S+Language&amp;rft.date=1998&amp;rft.genre=book&amp;rft.isbn=978-0-387-98503-9&amp;rft.pages=67-70&amp;rft.pub=Springer+Verlag&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-reference.wolfram.com-10"><span class="mw-cite-backlink">^ <a href="#cite_ref-reference.wolfram.com_10-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-reference.wolfram.com_10-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://reference.wolfram.com/language/guide/FunctionalProgramming.html">"Wolfram Language Guide: Functional Programming"</a>. 2015<span class="reference-accessdate">. Retrieved <span class="nowrap">2015-08-24</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Wolfram+Language+Guide%3A+Functional+Programming&amp;rft.date=2015&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Freference.wolfram.com%2Flanguage%2Fguide%2FFunctionalProgramming.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-racket-video-games-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-racket-video-games_11-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://web.archive.org/web/20121215014637/http://www.gameenginebook.com/gdc09-statescripting-uncharted2.pdf">"State-Based Scripting in Uncharted 2"</a> <span style="font-size:85%;">(PDF)</span>. Archived from <a rel="nofollow" class="external text" href="http://www.gameenginebook.com/gdc09-statescripting-uncharted2.pdf">the original</a> <span style="font-size:85%;">(PDF)</span> on 2012-12-15<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-08-08</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=State-Based+Scripting+in+Uncharted+2&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.gameenginebook.com%2Fgdc09-statescripting-uncharted2.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-erlang-faq-12"><span class="mw-cite-backlink">^ <a href="#cite_ref-erlang-faq_12-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-erlang-faq_12-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.erlang.org/faq/faq.html#AEN50">"Who uses Erlang for product development?"</a>. <i>Frequently asked questions about Erlang</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2007-08-05</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Who+uses+Erlang+for+product+development%3F&amp;rft.genre=unknown&amp;rft.jtitle=Frequently+asked+questions+about+Erlang&amp;rft_id=http%3A%2F%2Fwww.erlang.org%2Ffaq%2Ffaq.html%23AEN50&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-armstrong2007-13"><span class="mw-cite-backlink">^ <a href="#cite_ref-armstrong2007_13-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-armstrong2007_13-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation conference">Armstrong, Joe (June 2007). <a rel="nofollow" class="external text" href="http://doi.acm.org/10.1145/1238844.1238850"><i>A history of Erlang</i></a>. Third ACM SIGPLAN Conference on History of Programming Languages. San Diego, California<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Joe&amp;rft.aulast=Armstrong&amp;rft.btitle=A+history+of+Erlang&amp;rft.date=2007-06&amp;rft.genre=conference&amp;rft.place=San+Diego%2C+California&amp;rft_id=http%3A%2F%2Fdoi.acm.org%2F10.1145%2F1238844.1238850&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-larson2009-14"><span class="mw-cite-backlink">^ <a href="#cite_ref-larson2009_14-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-larson2009_14-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Larson, Jim (March 2009). "Erlang for concurrent programming". <i>Communications of the ACM</i>. <b>52</b> (3): 48. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1145%2F1467247.1467263">10.1145/1467247.1467263</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Erlang+for+concurrent+programming&amp;rft.aufirst=Jim&amp;rft.aulast=Larson&amp;rft.date=2009-03&amp;rft.genre=article&amp;rft.issue=3&amp;rft.jtitle=Communications+of+the+ACM&amp;rft.pages=48&amp;rft.volume=52&amp;rft_id=info%3Adoi%2F10.1145%2F1467247.1467263&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-minksy2008-15"><span class="mw-cite-backlink">^ <a href="#cite_ref-minksy2008_15-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-minksy2008_15-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Minsky, Yaron; Weeks, Stephen (July 2008). <a rel="nofollow" class="external text" href="http://journals.cambridge.org/action/displayAbstract?aid=1899164">"Caml Trading&#160;— experiences with functional programming on Wall Street"</a>. <i>Journal of Functional Programming</i>. Cambridge University Press. <b>18</b> (4): 553–564. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1017%2FS095679680800676X">10.1017/S095679680800676X</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2008-08-27</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Caml+Trading+%E2%80%94+experiences+with+functional+programming+on+Wall+Street&amp;rft.au=Weeks%2C+Stephen&amp;rft.aufirst=Yaron&amp;rft.aulast=Minsky&amp;rft.date=2008-07&amp;rft.genre=article&amp;rft.issue=4&amp;rft.jtitle=Journal+of+Functional+Programming&amp;rft.pages=553-564&amp;rft.volume=18&amp;rft_id=http%3A%2F%2Fjournals.cambridge.org%2Faction%2FdisplayAbstract%3Faid%3D1899164&amp;rft_id=info%3Adoi%2F10.1017%2FS095679680800676X&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-leroy2007-16"><span class="mw-cite-backlink">^ <a href="#cite_ref-leroy2007_16-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-leroy2007_16-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation conference">Leroy, Xavier. <a rel="nofollow" class="external text" href="http://cufp.galois.com/2007/slides/XavierLeroy.pdf"><i>Some uses of Caml in Industry</i></a> <span style="font-size:85%;">(PDF)</span>. CUFP 2007<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-26</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Xavier&amp;rft.aulast=Leroy&amp;rft.btitle=Some+uses+of+Caml+in+Industry&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2007%2Fslides%2FXavierLeroy.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-haskell-industry-17"><span class="mw-cite-backlink">^ <a href="#cite_ref-haskell-industry_17-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-haskell-industry_17-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.haskell.org/haskellwiki/Haskell_in_industry">"Haskell in industry"</a>. <i>Haskell Wiki</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-26</span></span>. <q>Haskell has a diverse range of use commercially, from aerospace and defense, to finance, to web startups, hardware design firms and lawnmower manufacturers.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Haskell+in+industry&amp;rft.genre=unknown&amp;rft.jtitle=Haskell+Wiki&amp;rft_id=http%3A%2F%2Fwww.haskell.org%2Fhaskellwiki%2FHaskell_in_industry&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-hudak2007-18"><span class="mw-cite-backlink">^ <a href="#cite_ref-hudak2007_18-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-hudak2007_18-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-hudak2007_18-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><cite class="citation conference"><a href="/wiki/Paul_Hudak" title="Paul Hudak">Hudak, Paul</a>; Hughes, J.; Jones, S. P.; Wadler, P. (June 2007). <a rel="nofollow" class="external text" href="http://dl.acm.org/citation.cfm?doid=1238844.1238856"><i>A history of Haskell: being lazy with class</i></a>. Third ACM SIGPLAN Conference on History of Programming Languages. San Diego, California. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1145%2F1238844.1238856">10.1145/1238844.1238856</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2013-09-26</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Hughes%2C+J.&amp;rft.au=Jones%2C+S.+P.&amp;rft.au=Wadler%2C+P.&amp;rft.aufirst=Paul&amp;rft.aulast=Hudak&amp;rft.btitle=A+history+of+Haskell%3A+being+lazy+with+class&amp;rft.date=2007-06&amp;rft.genre=conference&amp;rft.place=San+Diego%2C+California&amp;rft_id=http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fdoid%3D1238844.1238856&amp;rft_id=info%3Adoi%2F10.1145%2F1238844.1238856&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-quantFSharp-19"><span class="mw-cite-backlink">^ <a href="#cite_ref-quantFSharp_19-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-quantFSharp_19-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation conference">Mansell, Howard (2008). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2008/abstracts.html#MansellHoward"><i>Quantitative Finance in F#</i></a>. CUFP 2008<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Howard&amp;rft.aulast=Mansell&amp;rft.btitle=Quantitative+Finance+in+F%23&amp;rft.date=2008&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2008%2Fabstracts.html%23MansellHoward&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-businessAppsFSharp-20"><span class="mw-cite-backlink">^ <a href="#cite_ref-businessAppsFSharp_20-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-businessAppsFSharp_20-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation conference">Peake, Alex (2009). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2009/abstracts.html#AlexPeakeAdamGranicz"><i>The First Substantial Line of Business Application in F#</i></a>. CUFP 2009<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Alex&amp;rft.aulast=Peake&amp;rft.btitle=The+First+Substantial+Line+of+Business+Application+in+F%23&amp;rft.date=2009&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2009%2Fabstracts.html%23AlexPeakeAdamGranicz&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-mostPopularLanguages-21"><span class="mw-cite-backlink"><b><a href="#cite_ref-mostPopularLanguages_21-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.businessinsider.com/github-most-popular-coding-languages-2016-9/">"The 15 most popular computer languages, according to the Facebook for programmers"</a>. 2016<span class="reference-accessdate">. Retrieved <span class="nowrap">2017-07-31</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=The+15+most+popular+computer+languages%2C+according+to+the+Facebook+for+programmers&amp;rft.date=2016&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.businessinsider.com%2Fgithub-most-popular-coding-languages-2016-9%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-javaScriptWidelyUsed-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-javaScriptWidelyUsed_22-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://arc.applause.com/2016/03/22/javascript-is-the-worlds-dominant-programming-language/">"JavaScript is the World's Dominant Programming Language"</a>. 2016<span class="reference-accessdate">. Retrieved <span class="nowrap">2017-07-31</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=JavaScript+is+the+World%27s+Dominant+Programming+Language&amp;rft.date=2016&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Farc.applause.com%2F2016%2F03%2F22%2Fjavascript-is-the-worlds-dominant-programming-language%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-javaScriptFunctional-23"><span class="mw-cite-backlink"><b><a href="#cite_ref-javaScriptFunctional_23-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external free" href="http://www.crockford.com/javascript/javascript.html">http://www.crockford.com/javascript/javascript.html</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2017-07-31</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.crockford.com%2Fjavascript%2Fjavascript.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="font-size:100%" class="error citation-comment">Missing or empty <code style="color:inherit; border:inherit; padding:inherit;">|title=</code> (<a href="/wiki/Help:CS1_errors#citation_missing_title" title="Help:CS1 errors">help</a>)</span></span></li>/n<li id="cite_note-Amath-CO-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-Amath-CO_24-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Department of Applied Math, University of Colorado. <a rel="nofollow" class="external text" href="https://web.archive.org/web/20071113175801/http://amath.colorado.edu/computing/mmm/funcproc.html">"Functional vs. Procedural Programming Language"</a>. Archived from <a rel="nofollow" class="external text" href="http://amath.colorado.edu/computing/mmm/funcproc.html">the original</a> on 2007-11-13<span class="reference-accessdate">. Retrieved <span class="nowrap">2006-08-28</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Department+of+Applied+Math%2C+University+of+Colorado&amp;rft.btitle=Functional+vs.+Procedural+Programming+Language&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Famath.colorado.edu%2Fcomputing%2Fmmm%2Ffuncproc.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Novatchev-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-Novatchev_25-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Dimitre Novatchev. <a rel="nofollow" class="external text" href="http://www.topxml.com/xsl/articles/fp/">"The Functional Programming Language XSLT&#160;— A proof through examples"</a>. <i>TopXML</i><span class="reference-accessdate">. Retrieved <span class="nowrap">May 27,</span> 2006</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=The+Functional+Programming+Language+XSLT+%E2%80%94+A+proof+through+examples&amp;rft.au=Dimitre+Novatchev&amp;rft.genre=unknown&amp;rft.jtitle=TopXML&amp;rft_id=http%3A%2F%2Fwww.topxml.com%2Fxsl%2Farticles%2Ffp%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Mertz-26"><span class="mw-cite-backlink"><b><a href="#cite_ref-Mertz_26-0">^</a></b></span> <span class="reference-text"><cite class="citation web">David Mertz. <a rel="nofollow" class="external text" href="http://gnosis.cx/publish/programming/xml_models_fp.html">"XML Programming Paradigms (part four): Functional Programming approached to XML processing"</a>. <i>IBM developerWorks</i><span class="reference-accessdate">. Retrieved <span class="nowrap">May 27,</span> 2006</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=XML+Programming+Paradigms+%28part+four%29%3A+Functional+Programming+approached+to+XML+processing&amp;rft.au=David+Mertz&amp;rft.genre=unknown&amp;rft.jtitle=IBM+developerWorks&amp;rft_id=http%3A%2F%2Fgnosis.cx%2Fpublish%2Fprogramming%2Fxml_models_fp.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Opal_.28programming_language.29-27"><span class="mw-cite-backlink"><b><a href="#cite_ref-Opal_.28programming_language.29_27-0">^</a></b></span> <span class="reference-text"><a href="/wiki/Opal_(programming_language)" title="Opal (programming language)">OPtimized Applicative Language</a></span></li>/n<li id="cite_note-Chamberlin_Boyce-28"><span class="mw-cite-backlink"><b><a href="#cite_ref-Chamberlin_Boyce_28-0">^</a></b></span> <span class="reference-text"><cite class="citation journal"><a href="/wiki/Donald_D._Chamberlin" title="Donald D. Chamberlin">Donald D. Chamberlin</a> and <a href="/wiki/Raymond_F._Boyce" title="Raymond F. Boyce">Raymond F. Boyce</a> (1974). "SEQUEL: A structured English query language". <i>Proceedings of the 1974 ACM SIGFIDET</i>: 249–264.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=SEQUEL%3A+A+structured+English+query+language&amp;rft.au=Donald+D.+Chamberlin+and+Raymond+F.+Boyce&amp;rft.date=1974&amp;rft.genre=article&amp;rft.jtitle=Proceedings+of+the+1974+ACM+SIGFIDET&amp;rft.pages=249-264&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-29"><span class="mw-cite-backlink"><b><a href="#cite_ref-29">^</a></b></span> <span class="reference-text"><cite class="citation book"><a href="/wiki/Mark_Jason_Dominus" class="mw-redirect" title="Mark Jason Dominus">Dominus, Mark J.</a> (2005). <i><a href="/wiki/Higher-Order_Perl" title="Higher-Order Perl">Higher-Order Perl</a></i>. <a href="/wiki/Morgan_Kaufmann" class="mw-redirect" title="Morgan Kaufmann">Morgan Kaufmann</a>. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/1-55860-701-3" title="Special:BookSources/1-55860-701-3">1-55860-701-3</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Mark+J.&amp;rft.aulast=Dominus&amp;rft.btitle=Higher-Order+Perl&amp;rft.date=2005&amp;rft.genre=book&amp;rft.isbn=1-55860-701-3&amp;rft.pub=Morgan+Kaufmann&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-30"><span class="mw-cite-backlink"><b><a href="#cite_ref-30">^</a></b></span> <span class="reference-text"><cite class="citation book">Holywell, Simon (2014). <i>Functional Programming in PHP</i>. php[architect]. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/9781940111056" title="Special:BookSources/9781940111056">9781940111056</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Simon&amp;rft.aulast=Holywell&amp;rft.btitle=Functional+Programming+in+PHP&amp;rft.date=2014&amp;rft.genre=book&amp;rft.isbn=9781940111056&amp;rft.pub=php%5Barchitect%5D&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-effective-scala-31"><span class="mw-cite-backlink"><b><a href="#cite_ref-effective-scala_31-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://twitter.github.com/effectivescala/?sd">"Effective Scala"</a>. <i>Scala Wiki</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2012-02-21</span></span>. <q>Effective Scala.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Effective+Scala&amp;rft.genre=unknown&amp;rft.jtitle=Scala+Wiki&amp;rft_id=https%3A%2F%2Ftwitter.github.com%2Feffectivescala%2F%3Fsd&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-32"><span class="mw-cite-backlink"><b><a href="#cite_ref-32">^</a></b></span> <span class="reference-text"><cite class="citation book">Haskell Brooks Curry; Robert Feys (1958). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=fEnuAAAAMAAJ"><i>Combinatory Logic</i></a>. North-Holland Publishing Company<span class="reference-accessdate">. Retrieved <span class="nowrap">10 February</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Haskell+Brooks+Curry&amp;rft.au=Robert+Feys&amp;rft.btitle=Combinatory+Logic&amp;rft.date=1958&amp;rft.genre=book&amp;rft.pub=North-Holland+Publishing+Company&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DfEnuAAAAMAAJ&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-33"><span class="mw-cite-backlink"><b><a href="#cite_ref-33">^</a></b></span> <span class="reference-text"><cite class="citation journal"><a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">McCarthy, John</a> (June 1978). <a rel="nofollow" class="external text" href="http://citeseer.ist.psu.edu/mccarthy78history.html">"History of Lisp"</a>. <i>In <a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a>/SIGPLAN History of Programming Languages Conference</i>: 217–223. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1145%2F800025.808387">10.1145/800025.808387</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=History+of+Lisp&amp;rft.aufirst=John&amp;rft.aulast=McCarthy&amp;rft.date=1978-06&amp;rft.genre=article&amp;rft.jtitle=In+ACM%2FSIGPLAN+History+of+Programming+Languages+Conference&amp;rft.pages=217-223&amp;rft_id=http%3A%2F%2Fciteseer.ist.psu.edu%2Fmccarthy78history.html&amp;rft_id=info%3Adoi%2F10.1145%2F800025.808387&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-34"><span class="mw-cite-backlink"><b><a href="#cite_ref-34">^</a></b></span> <span class="reference-text"><cite class="citation journal">Guy L. Steele; Richard P. Gabriel (February 1996). <a rel="nofollow" class="external text" href="http://dreamsongs.com/Files/HOPL2-Uncut.pdf">"The Evolution of Lisp"</a> <span style="font-size:85%;">(PDF)</span>. <i>In <a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a>/SIGPLAN Second History of Programming Languages</i>: 233–330. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1145%2F234286.1057818">10.1145/234286.1057818</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=The+Evolution+of+Lisp&amp;rft.au=Guy+L.+Steele&amp;rft.au=Richard+P.+Gabriel&amp;rft.date=1996-02&amp;rft.genre=article&amp;rft.jtitle=In+ACM%2FSIGPLAN+Second+History+of+Programming+Languages&amp;rft.pages=233-330&amp;rft_id=http%3A%2F%2Fdreamsongs.com%2FFiles%2FHOPL2-Uncut.pdf&amp;rft_id=info%3Adoi%2F10.1145%2F234286.1057818&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-35"><span class="mw-cite-backlink"><b><a href="#cite_ref-35">^</a></b></span> <span class="reference-text">The memoir of <a href="/wiki/Herbert_A._Simon" title="Herbert A. Simon">Herbert A. Simon</a> (1991), <i>Models of My Life</i> pp.189-190 <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-465-04640-1" title="Special:BookSources/0-465-04640-1">0-465-04640-1</a> claims that he, Al Newell, and Cliff Shaw are "...commonly adjudged to be the parents of [the] artificial intelligence [field]," for writing <a href="/wiki/Logic_Theorist" title="Logic Theorist">Logic Theorist</a>, a program that proved theorems from <i><a href="/wiki/Principia_Mathematica" title="Principia Mathematica">Principia Mathematica</a></i> automatically. To accomplish this, they had to invent a language and a paradigm that, viewed retrospectively, embeds functional programming.</span></li>/n<li id="cite_note-36"><span class="mw-cite-backlink"><b><a href="#cite_ref-36">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://worrydream.com/refs/Backus-CanProgrammingBeLiberated.pdf">"Can Programming Be Liberated from the von Neumann Style? A Functional Style and Its Algebra of Programs"</a> <span style="font-size:85%;">(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Can+Programming+Be+Liberated+from+the+von+Neumann+Style%3F+A+Functional+Style+and+Its+Algebra+of+Programs&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fworrydream.com%2Frefs%2FBackus-CanProgrammingBeLiberated.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-37"><span class="mw-cite-backlink"><b><a href="#cite_ref-37">^</a></b></span> <span class="reference-text">R.M. Burstall. Design considerations for a functional programming language. Invited paper, Proc. Infotech State of the Art Conf. "The Software Revolution", Copenhagen, 45–57 (1977)</span></li>/n<li id="cite_note-38"><span class="mw-cite-backlink"><b><a href="#cite_ref-38">^</a></b></span> <span class="reference-text">R.M. Burstall and J. Darlington. A transformation system for developing recursive programs. Journal of the Association for Computing Machinery 24(1):44–67 (1977)</span></li>/n<li id="cite_note-39"><span class="mw-cite-backlink"><b><a href="#cite_ref-39">^</a></b></span> <span class="reference-text">R.M. Burstall, D.B. MacQueen and D.T. Sannella. HOPE: an experimental applicative language. Proc. 1980 LISP Conference, Stanford, 136–143 (1980).</span></li>/n<li id="cite_note-40"><span class="mw-cite-backlink"><b><a href="#cite_ref-40">^</a></b></span> <span class="reference-text"><cite class="citation web">Dick Pountain. <a rel="nofollow" class="external text" href="https://web.archive.org/web/20060827094123/http://byte.com/art/9408/sec11/art1.htm">"Functional Programming Comes of Age"</a>. <i>BYTE.com (August 1994)</i>. Archived from <a rel="nofollow" class="external text" href="http://byte.com/art/9408/sec11/art1.htm">the original</a> on 2006-08-27<span class="reference-accessdate">. Retrieved <span class="nowrap">August 31,</span> 2006</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Functional+Programming+Comes+of+Age&amp;rft.au=Dick+Pountain&amp;rft.genre=unknown&amp;rft.jtitle=BYTE.com+%28August+1994%29&amp;rft_id=http%3A%2F%2Fbyte.com%2Fart%2F9408%2Fsec11%2Fart1.htm&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-totalfp-41"><span class="mw-cite-backlink"><b><a href="#cite_ref-totalfp_41-0">^</a></b></span> <span class="reference-text"><cite class="citation journal"><a href="/wiki/David_Turner_(computer_scientist)" title="David Turner (computer scientist)">Turner, D.A.</a> (2004-07-28). <a rel="nofollow" class="external text" href="http://www.jucs.org/jucs_10_7/total_functional_programming">"Total Functional Programming"</a>. <i>Journal of Universal Computer Science</i>. <b>10</b> (7): 751–768. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.3217%2Fjucs-010-07-0751">10.3217/jucs-010-07-0751</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Total+Functional+Programming&amp;rft.aufirst=D.A.&amp;rft.aulast=Turner&amp;rft.date=2004-07-28&amp;rft.genre=article&amp;rft.issue=7&amp;rft.jtitle=Journal+of+Universal+Computer+Science&amp;rft.pages=751-768&amp;rft.volume=10&amp;rft_id=http%3A%2F%2Fwww.jucs.org%2Fjucs_10_7%2Ftotal_functional_programming&amp;rft_id=info%3Adoi%2F10.3217%2Fjucs-010-07-0751&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-42"><span class="mw-cite-backlink"><b><a href="#cite_ref-42">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://research.microsoft.com/~simonpj/papers/slpj-book-1987/index.htm">The Implementation of Functional Programming Languages</a>. Simon Peyton Jones, published by Prentice Hall, 1987</span></li>/n<li id="cite_note-43"><span class="mw-cite-backlink"><b><a href="#cite_ref-43">^</a></b></span> <span class="reference-text"><cite id="CITEREFHughes1984" class="citation web"><a href="/wiki/John_Hughes_(computer_scientist)" title="John Hughes (computer scientist)">Hughes, John</a> (1984). <a rel="nofollow" class="external text" href="http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html">"Why Functional Programming Matters"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=John&amp;rft.aulast=Hughes&amp;rft.btitle=Why+Functional+Programming+Matters&amp;rft.date=1984&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.cse.chalmers.se%2F~rjmh%2FPapers%2Fwhyfp.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-launchbury1993-44"><span class="mw-cite-backlink">^ <a href="#cite_ref-launchbury1993_44-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-launchbury1993_44-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web">John Launchbury (1993). <a rel="nofollow" class="external text" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016">"A Natural Semantics for Lazy Evaluation"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=John+Launchbury&amp;rft.btitle=A+Natural+Semantics+for+Lazy+Evaluation&amp;rft.date=1993&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.35.2016&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-45"><span class="mw-cite-backlink"><b><a href="#cite_ref-45">^</a></b></span> <span class="reference-text"><cite class="citation book"><a href="/wiki/Robert_Harper_(computer_scientist)" title="Robert Harper (computer scientist)">Robert W. Harper</a> (2009). <a rel="nofollow" class="external text" href="http://www.cs.cmu.edu/~rwh/plbook/book.pdf"><i>Practical Foundations for Programming Languages</i></a> <span style="font-size:85%;">(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Robert+W.+Harper&amp;rft.btitle=Practical+Foundations+for+Programming+Languages&amp;rft.date=2009&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.cs.cmu.edu%2F~rwh%2Fplbook%2Fbook.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-46"><span class="mw-cite-backlink"><b><a href="#cite_ref-46">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://compcert.inria.fr/doc/index.html">"The Compcert verified compiler"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=The+Compcert+verified+compiler&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fcompcert.inria.fr%2Fdoc%2Findex.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-47"><span class="mw-cite-backlink"><b><a href="#cite_ref-47">^</a></b></span> <span class="reference-text"><cite class="citation web">Simon Peyton Jones; Dimitrios Vytiniotis; Stephanie Weirich; Geoffrey Washburn. <a rel="nofollow" class="external text" href="http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/">"Simple unification-based type inference for GADTs"</a>. <i>ICFP 2006</i>. pp.&#160;50–61.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Simple+unification-based+type+inference+for+GADTs&amp;rft.au=Dimitrios+Vytiniotis&amp;rft.au=Geoffrey+Washburn&amp;rft.au=Simon+Peyton+Jones&amp;rft.au=Stephanie+Weirich&amp;rft.genre=unknown&amp;rft.jtitle=ICFP+2006&amp;rft.pages=50-61&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2Fpapers%2Fgadt%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-48"><span class="mw-cite-backlink"><b><a href="#cite_ref-48">^</a></b></span> <span class="reference-text"><cite class="citation web">Andrew Kennedy; Claudio Russo (October 2005). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20061229164852/http://research.microsoft.com/~akenn/generics/gadtoop.pdf">"Generalized Algebraic Data Types and Object-Oriented Programming"</a> <span style="font-size:85%;">(PDF)</span>. <i>OOPSLA</i>. San Diego, California. Archived from <a rel="nofollow" class="external text" href="http://research.microsoft.com/~akenn/generics/gadtoop.pdf">the original</a> <span style="font-size:85%;">(PDF)</span> on 2006-12-29.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Generalized+Algebraic+Data+Types+and+Object-Oriented+Programming&amp;rft.au=Andrew+Kennedy&amp;rft.au=Claudio+Russo&amp;rft.date=2005-10&amp;rft.genre=unknown&amp;rft.jtitle=OOPSLA&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2F~akenn%2Fgenerics%2Fgadtoop.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span> <a rel="nofollow" class="external text" href="http://lambda-the-ultimate.org/node/1134">source of citation</a></span></li>/n<li id="cite_note-49"><span class="mw-cite-backlink"><b><a href="#cite_ref-49">^</a></b></span> <span class="reference-text"><cite class="citation web">Huges, John. <a rel="nofollow" class="external text" href="http://www.cse.chalmers.se/~rjmh/Papers/whyfp.pdf">"Why Functional Programming Matters"</a> <span style="font-size:85%;">(PDF)</span>. <i><a rel="nofollow" class="external free" href="http://www.chalmers.se/cse">http://www.chalmers.se/cse</a></i>. Chalmers Tekniska H¨ogskola.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Why+Functional+Programming+Matters&amp;rft.aufirst=John&amp;rft.aulast=Huges&amp;rft.genre=unknown&amp;rft.jtitle=http%3A%2F%2Fwww.chalmers.se%2Fcse&amp;rft_id=http%3A%2F%2Fwww.cse.chalmers.se%2F~rjmh%2FPapers%2Fwhyfp.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="font-size:100%" class="error citation-comment">External link in <code style="color:inherit; border:inherit; padding:inherit;">|website=</code> (<a href="/wiki/Help:CS1_errors#param_has_ext_link" title="Help:CS1 errors">help</a>)</span></span></li>/n<li id="cite_note-50"><span class="mw-cite-backlink"><b><a href="#cite_ref-50">^</a></b></span> <span class="reference-text"><cite class="citation journal">Hartel, Pieter; Henk Muller; Hugh Glaser (March 2004). <a rel="nofollow" class="external text" href="http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf">"The Functional C experience"</a> <span style="font-size:85%;">(PDF)</span>. <i>Journal of Functional Programming</i>. <b>14</b> (2): 129–135. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1017%2FS0956796803004817">10.1017/S0956796803004817</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=The+Functional+C+experience&amp;rft.au=Henk+Muller&amp;rft.au=Hugh+Glaser&amp;rft.aufirst=Pieter&amp;rft.aulast=Hartel&amp;rft.date=2004-03&amp;rft.genre=article&amp;rft.issue=2&amp;rft.jtitle=Journal+of+Functional+Programming&amp;rft.pages=129-135&amp;rft.volume=14&amp;rft_id=http%3A%2F%2Fwww.ub.utwente.nl%2Fwebdocs%2Fctit%2F1%2F00000084.pdf&amp;rft_id=info%3Adoi%2F10.1017%2FS0956796803004817&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span>; <cite class="citation web">David Mertz. <a rel="nofollow" class="external text" href="https://web.archive.org/web/20071016124848/http://www-128.ibm.com/developerworks/linux/library/l-prog3.html">"Functional programming in Python, Part 3"</a>. <i>IBM developerWorks</i>. Archived from <a rel="nofollow" class="external text" href="http://www-128.ibm.com/developerworks/linux/library/l-prog3.html">the original</a> on 2007-10-16<span class="reference-accessdate">. Retrieved <span class="nowrap">2006-09-17</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Functional+programming+in+Python%2C+Part+3&amp;rft.au=David+Mertz&amp;rft.genre=unknown&amp;rft.jtitle=IBM+developerWorks&amp;rft_id=http%3A%2F%2Fwww-128.ibm.com%2Fdeveloperworks%2Flinux%2Flibrary%2Fl-prog3.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span>(<a rel="nofollow" class="external text" href="https://web.archive.org/web/20071016124848/http://www-128.ibm.com/developerworks/linux/library/l-prog.html">Part 1</a>, <a rel="nofollow" class="external text" href="https://web.archive.org/web/20071016124848/http://www-128.ibm.com/developerworks/linux/library/l-prog2.html">Part 2</a>)</span></li>/n<li id="cite_note-51"><span class="mw-cite-backlink"><b><a href="#cite_ref-51">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.digitalmars.com/d/2.0/function.html#pure-functions">"Functions&#160;— D Programming Language 2.0"</a>. Digital Mars<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-06-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Functions+%E2%80%94+D+Programming+Language+2.0&amp;rft.genre=unknown&amp;rft.pub=Digital+Mars&amp;rft_id=http%3A%2F%2Fwww.digitalmars.com%2Fd%2F2.0%2Ffunction.html%23pure-functions&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-52"><span class="mw-cite-backlink"><b><a href="#cite_ref-52">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.luafaq.org/#T1.2">"Lua Unofficial FAQ (uFAQ)"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Lua+Unofficial+FAQ+%28uFAQ%29&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.luafaq.org%2F%23T1.2&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-53"><span class="mw-cite-backlink"><b><a href="#cite_ref-53">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://brendaneich.com/2008/04/popularity/">"Brendan Eich"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Brendan+Eich&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fbrendaneich.com%2F2008%2F04%2Fpopularity%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-54"><span class="mw-cite-backlink"><b><a href="#cite_ref-54">^</a></b></span> <span class="reference-text"><cite class="citation web"><a href="/wiki/Guido_van_Rossum" title="Guido van Rossum">van Rossum, Guido</a> (2009-04-21). <a rel="nofollow" class="external text" href="http://python-history.blogspot.de/2009/04/origins-of-pythons-functional-features.html">"Origins of Python's "Functional" Features"</a>. <a rel="nofollow" class="external text" href="http://python-history.blogspot.de/">The History of Python</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2012-09-27</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Guido&amp;rft.aulast=van+Rossum&amp;rft.btitle=Origins+of+Python%27s+%22Functional%22+Features&amp;rft.date=2009-04-21&amp;rft.genre=unknown&amp;rft.pub=%5Bhttp%3A%2F%2Fpython-history.blogspot.de%2F+The+History+of+Python%5D&amp;rft_id=http%3A%2F%2Fpython-history.blogspot.de%2F2009%2F04%2Forigins-of-pythons-functional-features.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="font-size:100%" class="error citation-comment">External link in <code style="color:inherit; border:inherit; padding:inherit;">|publisher=</code> (<a href="/wiki/Help:CS1_errors#param_has_ext_link" title="Help:CS1 errors">help</a>)</span></span></li>/n<li id="cite_note-55"><span class="mw-cite-backlink"><b><a href="#cite_ref-55">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://docs.python.org/dev/library/functools.html#functools.reduce">"functools — Higher order functions and operations on callable objects"</a>. Python Software Foundation. 2011-07-31<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-07-31</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=functools+%E2%80%94+Higher+order+functions+and+operations+on+callable+objects&amp;rft.date=2011-07-31&amp;rft.genre=unknown&amp;rft.pub=Python+Software+Foundation&amp;rft_id=https%3A%2F%2Fdocs.python.org%2Fdev%2Flibrary%2Ffunctools.html%23functools.reduce&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-56"><span class="mw-cite-backlink"><b><a href="#cite_ref-56">^</a></b></span> <span class="reference-text"><cite class="citation book">Skarsaune, Martin (2008). <i>The SICS Java Port Project Automatic Translation of a Large Object Oriented System from Smalltalk to Java</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Martin&amp;rft.aulast=Skarsaune&amp;rft.btitle=The+SICS+Java+Port+Project+Automatic+Translation+of+a+Large+Object+Oriented+System+from+Smalltalk+to+Java&amp;rft.date=2008&amp;rft.genre=book&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-57"><span class="mw-cite-backlink"><b><a href="#cite_ref-57">^</a></b></span> <span class="reference-text"><cite class="citation web">Gosling, James. <a rel="nofollow" class="external text" href="http://blogs.oracle.com/jag/entry/closures">"Closures"</a>. <i>James Gosling: on the Java Road</i>. Oracle<span class="reference-accessdate">. Retrieved <span class="nowrap">11 May</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Closures&amp;rft.aufirst=James&amp;rft.aulast=Gosling&amp;rft.genre=unknown&amp;rft.jtitle=James+Gosling%3A+on+the+Java+Road&amp;rft_id=http%3A%2F%2Fblogs.oracle.com%2Fjag%2Fentry%2Fclosures&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-58"><span class="mw-cite-backlink"><b><a href="#cite_ref-58">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://blogs.oracle.com/javatraining/entry/java_se_8_lambda_quick">"Java SE 8 Lambda Quick Start"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Java+SE+8+Lambda+Quick+Start&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fblogs.oracle.com%2Fjavatraining%2Fentry%2Fjava_se_8_lambda_quick&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-59"><span class="mw-cite-backlink"><b><a href="#cite_ref-59">^</a></b></span> <span class="reference-text"><cite class="citation book">Bloch, Joshua. <i>Effective Java</i> (Second ed.). pp.&#160;Item 15.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Joshua&amp;rft.aulast=Bloch&amp;rft.btitle=Effective+Java&amp;rft.edition=Second&amp;rft.genre=book&amp;rft.pages=Item+15&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-60"><span class="mw-cite-backlink"><b><a href="#cite_ref-60">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.cambridge.org/us/academic/subjects/computer-science/algorithmics-complexity-computer-algebra-and-computational-g/purely-functional-data-structures"><i>Purely functional data structures</i></a> by <a href="/wiki/Chris_Okasaki" title="Chris Okasaki">Chris Okasaki</a>, <a href="/wiki/Cambridge_University_Press" title="Cambridge University Press">Cambridge University Press</a>, 1998, <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-521-66350-4" title="Special:BookSources/0-521-66350-4">0-521-66350-4</a></span></li>/n<li id="cite_note-61"><span class="mw-cite-backlink"><b><a href="#cite_ref-61">^</a></b></span> <span class="reference-text"><cite class="citation web">Newbern, J. <a rel="nofollow" class="external text" href="http://monads.haskell.cz/html/index.html/html/">"All About Monads: A comprehensive guide to the theory and practice of monadic programming in Haskell"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2008-02-14</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=J.&amp;rft.aulast=Newbern&amp;rft.btitle=All+About+Monads%3A+A+comprehensive+guide+to+the+theory+and+practice+of+monadic+programming+in+Haskell&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fmonads.haskell.cz%2Fhtml%2Findex.html%2Fhtml%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-62"><span class="mw-cite-backlink"><b><a href="#cite_ref-62">^</a></b></span> <span class="reference-text"><cite class="citation book">Larry C. Paulson (28 June 1996). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=XppZdaDs7e0C"><i>ML for the Working Programmer</i></a>. Cambridge University Press. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-0-521-56543-1" title="Special:BookSources/978-0-521-56543-1">978-0-521-56543-1</a><span class="reference-accessdate">. Retrieved <span class="nowrap">10 February</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Larry+C.+Paulson&amp;rft.btitle=ML+for+the+Working+Programmer&amp;rft.date=1996-06-28&amp;rft.genre=book&amp;rft.isbn=978-0-521-56543-1&amp;rft.pub=Cambridge+University+Press&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DXppZdaDs7e0C&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Spiewak-63"><span class="mw-cite-backlink"><b><a href="#cite_ref-Spiewak_63-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Daniel Spiewak. <a rel="nofollow" class="external text" href="http://www.codecommit.com/blog/scala/implementing-persistent-vectors-in-scala">"Implementing Persistent Vectors in Scala"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">Apr 17,</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Daniel+Spiewak&amp;rft.btitle=Implementing+Persistent+Vectors+in+Scala&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.codecommit.com%2Fblog%2Fscala%2Fimplementing-persistent-vectors-in-scala&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-64"><span class="mw-cite-backlink"><b><a href="#cite_ref-64">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://benchmarksgame.alioth.debian.org/u32/which-programs-are-fastest.php?gcc=on&amp;ghc=on&amp;clean=on&amp;ocaml=on&amp;sbcl=on&amp;fsharp=on&amp;racket=on&amp;clojure=on&amp;hipe=on&amp;calc=chart">"Which programs are fastest? | Computer Language Benchmarks Game"</a>. benchmarksgame.alioth.debian.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-06-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Which+programs+are+fastest%3F+%26%23124%3B+Computer+Language+Benchmarks+Game&amp;rft.genre=unknown&amp;rft.pub=benchmarksgame.alioth.debian.org&amp;rft_id=http%3A%2F%2Fbenchmarksgame.alioth.debian.org%2Fu32%2Fwhich-programs-are-fastest.php%3Fgcc%3Don%26ghc%3Don%26clean%3Don%26ocaml%3Don%26sbcl%3Don%26fsharp%3Don%26racket%3Don%26clojure%3Don%26hipe%3Don%26calc%3Dchart&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-65"><span class="mw-cite-backlink"><b><a href="#cite_ref-65">^</a></b></span> <span class="reference-text"><cite class="citation journal">Igor Pechtchanski; Vivek Sarkar (2005). "Immutability specification and its applications". <i>Concurrency and Computation: Practice and Experience</i>. <b>17</b> (5–6): 639–662. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1002%2Fcpe.853">10.1002/cpe.853</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.atitle=Immutability+specification+and+its+applications&amp;rft.au=Igor+Pechtchanski&amp;rft.au=Vivek+Sarkar&amp;rft.date=2005&amp;rft.genre=article&amp;rft.issue=5%E2%80%936&amp;rft.jtitle=Concurrency+and+Computation%3A+Practice+and+Experience&amp;rft.pages=639-662&amp;rft.volume=17&amp;rft_id=info%3Adoi%2F10.1002%2Fcpe.853&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-66"><span class="mw-cite-backlink"><b><a href="#cite_ref-66">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://book.realworldhaskell.org/read/profiling-and-optimization.html#x_eK1">"Chapter 25. Profiling and optimization"</a>. Book.realworldhaskell.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-06-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Chapter+25.+Profiling+and+optimization&amp;rft.genre=unknown&amp;rft.pub=Book.realworldhaskell.org&amp;rft_id=http%3A%2F%2Fbook.realworldhaskell.org%2Fread%2Fprofiling-and-optimization.html%23x_eK1&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-67"><span class="mw-cite-backlink"><b><a href="#cite_ref-67">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external autonumber" href="https://web.archive.org/web/20131226033005/http://www.aquabu.com/2008/02/16/fibonacci-sequence-recursion-in-erlang">[1]</a></span></li>/n<li id="cite_note-programmingScala-68"><span class="mw-cite-backlink"><b><a href="#cite_ref-programmingScala_68-0">^</a></b></span> <span class="reference-text"><cite class="citation book">Odersky, Martin; Spoon, Lex; Venners, Bill (December 13, 2010). <a rel="nofollow" class="external text" href="http://www.artima.com/shop/programming_in_scala_2ed"><i>Programming in Scala: A Comprehensive Step-by-step Guide</i></a> (2nd ed.). <a href="/w/index.php?title=Artima_Inc&amp;action=edit&amp;redlink=1" class="new" title="Artima Inc (page does not exist)">Artima Inc</a>. pp.&#160;883/852. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-0-9815316-4-9" title="Special:BookSources/978-0-9815316-4-9">978-0-9815316-4-9</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Spoon%2C+Lex&amp;rft.au=Venners%2C+Bill&amp;rft.aufirst=Martin&amp;rft.aulast=Odersky&amp;rft.btitle=Programming+in+Scala%3A+A+Comprehensive+Step-by-step+Guide&amp;rft.date=2010-12-13&amp;rft.edition=2nd&amp;rft.genre=book&amp;rft.isbn=978-0-9815316-4-9&amp;rft.pages=883%2F852&amp;rft.pub=Artima+Inc&amp;rft_id=http%3A%2F%2Fwww.artima.com%2Fshop%2Fprogramming_in_scala_2ed&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-69"><span class="mw-cite-backlink"><b><a href="#cite_ref-69">^</a></b></span> <span class="reference-text"><cite class="citation conference">Piro, Christopher (2009). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2009/abstracts.html#ChristopherPiroEugeneLetuchy"><i>Functional Programming at Facebook</i></a>. CUFP 2009<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Christopher&amp;rft.aulast=Piro&amp;rft.btitle=Functional+Programming+at+Facebook&amp;rft.date=2009&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2009%2Fabstracts.html%23ChristopherPiroEugeneLetuchy&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-Sim-Diasca-70"><span class="mw-cite-backlink"><b><a href="#cite_ref-Sim-Diasca_70-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://research.edf.com/research-and-the-scientific-community/software/sim-diasca-80704.html">"Sim-Diasca: a large-scale discrete event concurrent simulation engine in Erlang"</a>. November 2011.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.btitle=Sim-Diasca%3A+a+large-scale+discrete+event+concurrent+simulation+engine+in+Erlang&amp;rft.date=2011-11&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fresearch.edf.com%2Fresearch-and-the-scientific-community%2Fsoftware%2Fsim-diasca-80704.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-whatsapp.blog.2012-71"><span class="mw-cite-backlink"><b><a href="#cite_ref-whatsapp.blog.2012_71-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://blog.whatsapp.com/index.php/2012/01/1-million-is-so-2011/">1 million is so 2011</a> // WhatsApp blog, 2012-01-06: "the last important piece of our infrastracture is Erlang"</span></li>/n<li id="cite_note-72"><span class="mw-cite-backlink"><b><a href="#cite_ref-72">^</a></b></span> <span class="reference-text"><cite class="citation conference">Momtahan, Lee (2009). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2009/abstracts.html#LeeMomtahan"><i>Scala at EDF Trading: Implementing a Domain-Specific Language for Derivative Pricing with Scala</i></a>. CUFP 2009<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Lee&amp;rft.aulast=Momtahan&amp;rft.btitle=Scala+at+EDF+Trading%3A+Implementing+a+Domain-Specific+Language+for+Derivative+Pricing+with+Scala&amp;rft.date=2009&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2009%2Fabstracts.html%23LeeMomtahan&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-73"><span class="mw-cite-backlink"><b><a href="#cite_ref-73">^</a></b></span> <span class="reference-text"><cite class="citation web">Graham, Paul (2003). <a rel="nofollow" class="external text" href="http://www.paulgraham.com/avg.html">"Beating the Averages"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Paul&amp;rft.aulast=Graham&amp;rft.btitle=Beating+the+Averages&amp;rft.date=2003&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.paulgraham.com%2Favg.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-74"><span class="mw-cite-backlink"><b><a href="#cite_ref-74">^</a></b></span> <span class="reference-text"><cite class="citation conference">Sims, Steve (2006). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2006/slides/SteveSims.pdf"><i>Building a Startup with Standard ML</i></a> <span style="font-size:85%;">(PDF)</span>. CUFP 2006<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Steve&amp;rft.aulast=Sims&amp;rft.btitle=Building+a+Startup+with+Standard+ML&amp;rft.date=2006&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2006%2Fslides%2FSteveSims.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-75"><span class="mw-cite-backlink"><b><a href="#cite_ref-75">^</a></b></span> <span class="reference-text"><cite class="citation conference">Laurikari, Ville (2007). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2007/abstracts.html#VilleLaurikari"><i>Functional Programming in Communications Security.</i></a> CUFP 2007<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-08-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Ville&amp;rft.aulast=Laurikari&amp;rft.btitle=Functional+Programming+in+Communications+Security.&amp;rft.date=2007&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2007%2Fabstracts.html%23VilleLaurikari&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-76"><span class="mw-cite-backlink"><b><a href="#cite_ref-76">^</a></b></span> <span class="reference-text"><cite class="citation web">Lorimer, R. J. <a rel="nofollow" class="external text" href="http://www.infoq.com/news/2009/01/clojure_production">"Live Production Clojure Application Announced"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=R.+J.&amp;rft.aulast=Lorimer&amp;rft.btitle=Live+Production+Clojure+Application+Announced&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.infoq.com%2Fnews%2F2009%2F01%2Fclojure_production&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-bootstrapworld-77"><span class="mw-cite-backlink"><b><a href="#cite_ref-bootstrapworld_77-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="https://twit.tv/shows/triangulation/episodes/196/">Emmanuel Schanzer of Bootstrap</a> interviewed on the TV show Triangulation on the <a href="/wiki/TWiT.tv" title="TWiT.tv">TWiT.tv</a> network</span></li>/n</ol>/n</div>/n<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=34" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<ul>/n<li><cite class="citation book"><a href="/wiki/Hal_Abelson" title="Hal Abelson">Abelson, Hal</a>; <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Sussman, Gerald Jay</a> (1985). <a rel="nofollow" class="external text" href="http://mitpress.mit.edu/sicp/"><i>Structure and Interpretation of Computer Programs</i></a>. MIT Press.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Sussman%2C+Gerald+Jay&amp;rft.aufirst=Hal&amp;rft.aulast=Abelson&amp;rft.btitle=Structure+and+Interpretation+of+Computer+Programs&amp;rft.date=1985&amp;rft.genre=book&amp;rft.pub=MIT+Press&amp;rft_id=http%3A%2F%2Fmitpress.mit.edu%2Fsicp%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n<li>Cousineau, Guy and Michel Mauny. <i>The Functional Approach to Programming</i>. Cambridge, UK: <a href="/wiki/Cambridge_University_Press" title="Cambridge University Press">Cambridge University Press</a>, 1998.</li>/n<li>Curry, Haskell Brooks and Feys, Robert and Craig, William. <i>Combinatory Logic</i>. Volume I. North-Holland Publishing Company, Amsterdam, 1958.</li>/n<li><cite class="citation book"><a href="/wiki/Haskell_Curry" title="Haskell Curry">Curry, Haskell B.</a>; <a href="/wiki/J._Roger_Hindley" title="J. Roger Hindley">Hindley, J. Roger</a>; <a href="/w/index.php?title=Jonathan_P._Seldin&amp;action=edit&amp;redlink=1" class="new" title="Jonathan P. Seldin (page does not exist)">Seldin, Jonathan P.</a> (1972). <i>Combinatory Logic</i>. Vol. II. Amsterdam: North Holland. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-7204-2208-6" title="Special:BookSources/0-7204-2208-6">0-7204-2208-6</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Hindley%2C+J.+Roger&amp;rft.au=Seldin%2C+Jonathan+P.&amp;rft.aufirst=Haskell+B.&amp;rft.aulast=Curry&amp;rft.btitle=Combinatory+Logic&amp;rft.date=1972&amp;rft.genre=book&amp;rft.isbn=0-7204-2208-6&amp;rft.place=Amsterdam&amp;rft.pub=North+Holland&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n<li>Dominus, Mark Jason. <i><a rel="nofollow" class="external text" href="http://hop.perl.plover.com/book/pdf/HigherOrderPerl.pdf">Higher-Order Perl</a></i>. <a href="/wiki/Morgan_Kaufmann" class="mw-redirect" title="Morgan Kaufmann">Morgan Kaufmann</a>. 2005.</li>/n<li><cite class="citation book">Felleisen, Matthias; Findler, Robert; Flatt, Matthew; Krishnamurthi, Shriram (2001). <a rel="nofollow" class="external text" href="http://www.htdp.org"><i>How to Design Programs</i></a>. MIT Press.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Findler%2C+Robert&amp;rft.au=Flatt%2C+Matthew&amp;rft.au=Krishnamurthi%2C+Shriram&amp;rft.aufirst=Matthias&amp;rft.aulast=Felleisen&amp;rft.btitle=How+to+Design+Programs&amp;rft.date=2001&amp;rft.genre=book&amp;rft.pub=MIT+Press&amp;rft_id=http%3A%2F%2Fwww.htdp.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n<li>Graham, Paul. <i>ANSI Common LISP</i>. Englewood Cliffs, New Jersey: <a href="/wiki/Prentice_Hall" title="Prentice Hall">Prentice Hall</a>, 1996.</li>/n<li>MacLennan, Bruce J. <i>Functional Programming: Practice and Theory</i>. Addison-Wesley, 1990.</li>/n<li><cite class="citation book">O'Sullivan, Brian; Stewart, Don; Goerzen, John (2008). <a rel="nofollow" class="external text" href="http://book.realworldhaskell.org/read/"><i>Real World Haskell</i></a>. O'Reilly.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.au=Goerzen%2C+John&amp;rft.au=Stewart%2C+Don&amp;rft.aufirst=Brian&amp;rft.aulast=O%27Sullivan&amp;rft.btitle=Real+World+Haskell&amp;rft.date=2008&amp;rft.genre=book&amp;rft.pub=O%27Reilly&amp;rft_id=http%3A%2F%2Fbook.realworldhaskell.org%2Fread%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n<li>Pratt, Terrence, W. and Marvin V. Zelkowitz. <i>Programming Languages: Design and Implementation</i>. 3rd ed. Englewood Cliffs, New Jersey: <a href="/wiki/Prentice_Hall" title="Prentice Hall">Prentice Hall</a>, 1996.</li>/n<li>Salus, Peter H. <i>Functional and Logic Programming Languages</i>. Vol. 4 of Handbook of Programming Languages. Indianapolis, Indiana: <a href="/w/index.php?title=Macmillan_Technical_Publishing&amp;action=edit&amp;redlink=1" class="new" title="Macmillan Technical Publishing (page does not exist)">Macmillan Technical Publishing</a>, 1998.</li>/n<li>Thompson, Simon. <i>Haskell: The Craft of Functional Programming</i>. Harlow, England: <a href="/w/index.php?title=Addison-Wesley_Longman_Limited&amp;action=edit&amp;redlink=1" class="new" title="Addison-Wesley Longman Limited (page does not exist)">Addison-Wesley Longman Limited</a>, 1996.</li>/n</ul>/n<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=35" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<div id="section_SpokenWikipedia" class="infobox sisterproject plainlinks haudio">/n<div style="text-align: center; white-space:nowrap"><b>Listen to this article</b> (<a href="/wiki/File:En-Functional_programming.ogg" title="File:En-Functional programming.ogg">info/dl</a>)/n<div class="center">/n<div class="floatnone">/n<div class="mediaContainer" style="width:200px"><audio id="mwe_player_0" controls="" preload="none" style="width:200px" class="kskin" data-durationhint="1678.0480725624" data-startoffset="0" data-mwtitle="En-Functional_programming.ogg" data-mwprovider="wikimediacommons">/n<source src="//upload.wikimedia.org/wikipedia/commons/8/83/En-Functional_programming.ogg" type="audio/ogg; codecs=&quot;vorbis&quot;" data-title="Original Ogg file (69 kbps)" data-shorttitle="Ogg source" data-width="0" data-height="0" data-bandwidth="69182" /></audio></div>/n</div>/n</div>/n</div>/n<p><br /></p>/n<div style="float: left; margin-left: 5px;">/n<div class="floatnone"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/45px-Sound-icon.svg.png" title="Spoken Wikipedia" width="45" height="34" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/68px-Sound-icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/90px-Sound-icon.svg.png 2x" data-file-width="128" data-file-height="96" /></div>/n</div>/n<div style="font-size: xx-small; line-height: 1.6em; margin-left: 60px;">This audio file was created from a revision of the article "<span class="fn">Functional programming</span>" dated 2011-08-25, and does not reflect subsequent edits to the article. (<a href="/wiki/Wikipedia:Media_help" title="Wikipedia:Media help">Audio help</a>)</div>/n<div style="text-align: center; clear: both"><b><a href="/wiki/Wikipedia:Spoken_articles" title="Wikipedia:Spoken articles">More spoken articles</a></b></div>/n</div>/n<ul>/n<li><cite class="citation web">Ford, Neal (2012-01-29). <a rel="nofollow" class="external text" href="http://www.ibm.com/developerworks/java/library/j-ft20/index.html">"Functional thinking: Why functional programming is on the rise"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2013-02-24</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Neal&amp;rft.aulast=Ford&amp;rft.btitle=Functional+thinking%3A+Why+functional+programming+is+on+the+rise&amp;rft.date=2012-01-29&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Flibrary%2Fj-ft20%2Findex.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n<li><cite class="citation web">Akhmechet, Slava (2006-06-19). <a rel="nofollow" class="external text" href="http://www.defmacro.org/ramblings/fp.html">"defmacro – Functional Programming For The Rest of Us"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2013-02-24</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AFunctional+programming&amp;rft.aufirst=Slava&amp;rft.aulast=Akhmechet&amp;rft.btitle=defmacro+%E2%80%93+Functional+Programming+For+The+Rest+of+Us&amp;rft.date=2006-06-19&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.defmacro.org%2Framblings%2Ffp.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> An introduction</li>/n<li><i>Functional programming in Python</i> (by David Mertz): <a rel="nofollow" class="external text" href="http://gnosis.cx/publish/programming/charming_python_13.html">part 1</a>, <a rel="nofollow" class="external text" href="http://gnosis.cx/publish/programming/charming_python_16.html">part 2</a>, <a rel="nofollow" class="external text" href="http://gnosis.cx/publish/programming/charming_python_19.html">part 3</a></li>/n</ul>/n<div role="navigation" class="navbox" aria-labelledby="Types_of_programming_languages" style="padding:3px">/n<table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">/n<tr>/n<th scope="col" class="navbox-title" colspan="2">/n<div class="plainlinks hlist navbar mini">/n<ul>/n<li class="nv-view"><a href="/wiki/Template:Types_of_programming_languages" title="Template:Types of programming languages"><abbr title="View this template" style=";;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none;">v</abbr></a></li>/n<li class="nv-talk"><a href="/wiki/Template_talk:Types_of_programming_languages" title="Template talk:Types of programming languages"><abbr title="Discuss this template" style=";;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none;">t</abbr></a></li>/n<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Types_of_programming_languages&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none;">e</abbr></a></li>/n</ul>/n</div>/n<div id="Types_of_programming_languages" style="font-size:114%;margin:0 4em"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Types of programming languages</a></div>/n</th>/n</tr>/n<tr>/n<td colspan="2" class="navbox-list navbox-odd hlist" style="width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Actor_model" title="Actor model">Actor-based</a></li>/n<li><a href="/wiki/Array_programming" title="Array programming">Array</a></li>/n<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>/n<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>/n<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>/n<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent</a></li>/n<li><a href="/wiki/Data-structured_language" title="Data-structured language">Data-structured</a></li>/n<li><a href="/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a></li>/n<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a></li>/n<li><a href="/wiki/Domain-specific_language" title="Domain-specific language">Domain-specific</a></li>/n<li><a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a></li>/n<li><a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">Esoteric</a></li>/n<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>/n<li><a href="/wiki/Extensible_programming" title="Extensible programming">Extensible</a></li>/n<li><a class="mw-selflink selflink">Functional</a></li>/n<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a></li>/n<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a></li>/n<li><a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a></li>/n<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a></li>/n<li><a href="/wiki/Multi-paradigm_programming_language" class="mw-redirect" title="Multi-paradigm programming language">Multi-paradigm</a></li>/n<li><a href="/wiki/Object-based_language" title="Object-based language">Object-based</a></li>/n<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a></li>/n<li><a href="/wiki/Pipeline_programming" class="mw-redirect" title="Pipeline programming">Pipeline</a></li>/n<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a></li>/n<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>/n<li><a href="/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">Reflective</a></li>/n<li><a href="/wiki/Rule-based_system" title="Rule-based system">Rule-based</a></li>/n<li><a href="/wiki/Scripting_language" title="Scripting language">Scripting</a></li>/n<li><a href="/wiki/Synchronous_programming_language" title="Synchronous programming language">Synchronous</a></li>/n<li><a href="/wiki/Templating_language" class="mw-redirect" title="Templating language">Templating</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<td colspan="2" class="navbox-list navbox-even hlist" style="width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Assembly_language" title="Assembly language">Assembly</a></li>/n<li><a href="/wiki/Compiled_language" title="Compiled language">Compiled</a></li>/n<li><a href="/wiki/Interpreted_language" title="Interpreted language">Interpreted</a></li>/n<li><a href="/wiki/Machine_code" title="Machine code">Machine</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<td colspan="2" class="navbox-list navbox-odd hlist" style="width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Low-level_programming_language" title="Low-level programming language">Low-level</a></li>/n<li><a href="/wiki/High-level_programming_language" title="High-level programming language">High-level</a></li>/n<li><a href="/wiki/Very_high-level_programming_language" title="Very high-level programming language">Very high-level</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<td colspan="2" class="navbox-list navbox-even hlist" style="width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/First-generation_programming_language" title="First-generation programming language">First generation</a></li>/n<li><a href="/wiki/Second-generation_programming_language" title="Second-generation programming language">Second generation</a></li>/n<li><a href="/wiki/Third-generation_programming_language" title="Third-generation programming language">Third generation</a></li>/n<li><a href="/wiki/Fourth-generation_programming_language" title="Fourth-generation programming language">Fourth generation</a></li>/n<li><a href="/wiki/Fifth-generation_programming_language" title="Fifth-generation programming language">Fifth generation</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<td colspan="2" class="navbox-list navbox-odd hlist" style="width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Non-English-based_programming_languages" title="Non-English-based programming languages">Non-English-based</a></li>/n<li><a href="/wiki/Visual_programming_language" title="Visual programming language">Visual</a></li>/n</ul>/n</div>/n</td>/n</tr>/n</table>/n</div>/n<div role="navigation" class="navbox" aria-label="Navbox" style="padding:3px">/n<table class="nowraplinks hlist navbox-inner" style="border-spacing:0;background:transparent;color:inherit">/n<tr>/n<th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Help:Authority_control" title="Help:Authority control">Authority control</a></th>/n<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><span class="nowrap"><a href="/wiki/Library_of_Congress_Control_Number" title="Library of Congress Control Number">LCCN</a>: <span class="uid"><a rel="nofollow" class="external text" href="http://id.loc.gov/authorities/subjects/sh87007844">sh87007844</a></span></span></li>/n<li><span class="nowrap"><a href="/wiki/Integrated_Authority_File" title="Integrated Authority File">GND</a>: <span class="uid"><a rel="nofollow" class="external text" href="http://d-nb.info/gnd/4198740-8">4198740-8</a></span></span></li>/n<li><span class="nowrap"><a href="/wiki/Biblioth%C3%A8que_nationale_de_France" title="Bibliothèque nationale de France">BNF</a>: <span class="uid"><a rel="nofollow" class="external text" href="http://catalogue.bnf.fr/ark:/12148/cb121910539">cb121910539</a> <a rel="nofollow" class="external text" href="http://data.bnf.fr/ark:/12148/cb121910539">(data)</a></span></span></li>/n<li><span class="nowrap"><a href="/wiki/Biblioteca_Nacional_de_Espa%C3%B1a" title="Biblioteca Nacional de España">BNE</a>: <span class="uid"><a rel="nofollow" class="external text" href="http://catalogo.bne.es/uhtbin/authoritybrowse.cgi?action=display&amp;authority_id=XX547935">XX547935</a></span></span></li>/n</ul>/n</div>/n</td>/n</tr>/n</table>/n</div>/n/n/n<!-- /nNewPP limit report/nParsed by mw1276/nCached time: 20171026013235/nCache expiry: 1900800/nDynamic content: false/nCPU time usage: 0.732 seconds/nReal time usage: 0.932 seconds/nPreprocessor visited node count: 5461/1000000/nPreprocessor generated node count: 0/1500000/nPost‐expand include size: 165901/2097152 bytes/nTemplate argument size: 6354/2097152 bytes/nHighest expansion depth: 16/40/nExpensive parser function count: 7/500/nLua time usage: 0.369/10.000 seconds/nLua memory usage: 6.3 MB/50 MB/n-->/n<!--/nTransclusion expansion time report (%,ms,calls,template)/n100.00%  735.435      1 -total/n 44.26%  325.520      1 Template:Reflist/n 20.56%  151.220     39 Template:Cite_web/n 15.59%  114.653      6 Template:Citation_needed/n 14.30%  105.152      6 Template:Fix/n  8.88%   65.295      7 Template:Delink/n  6.56%   48.253     15 Template:Category_handler/n  5.81%   42.741     13 Template:Cite_book/n  5.66%   41.597      3 Template:ISBN/n  4.89%   35.958     11 Template:Cite_journal/n-->/n</div>/n<!-- Saved in parser cache with key enwiki:pcache:idhash:10933-0!canonical!math=5 and timestamp 20171026013250 and revision id 807122652/n -->/n<noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>					<div class="printfooter">/n						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Functional_programming&amp;oldid=807122652">https://en.wikipedia.org/w/index.php?title=Functional_programming&amp;oldid=807122652</a>"					</div>/n				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Programming_paradigms" title="Category:Programming paradigms">Programming paradigms</a></li><li><a href="/wiki/Category:Functional_programming" title="Category:Functional programming">Functional programming</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:Pages_with_citations_lacking_titles" title="Category:Pages with citations lacking titles">Pages with citations lacking titles</a></li><li><a href="/wiki/Category:Pages_with_citations_having_bare_URLs" title="Category:Pages with citations having bare URLs">Pages with citations having bare URLs</a></li><li><a href="/wiki/Category:CS1_errors:_external_links" title="Category:CS1 errors: external links">CS1 errors: external links</a></li><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_February_2017" title="Category:Articles with unsourced statements from February 2017">Articles with unsourced statements from February 2017</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_December_2011" title="Category:Articles with unsourced statements from December 2011">Articles with unsourced statements from December 2011</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_April_2015" title="Category:Articles with unsourced statements from April 2015">Articles with unsourced statements from April 2015</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_March_2014" title="Category:Articles with unsourced statements from March 2014">Articles with unsourced statements from March 2014</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_June_2014" title="Category:Articles with unsourced statements from June 2014">Articles with unsourced statements from June 2014</a></li><li><a href="/wiki/Category:Articles_needing_additional_references_from_July_2013" title="Category:Articles needing additional references from July 2013">Articles needing additional references from July 2013</a></li><li><a href="/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li><li><a href="/wiki/Category:Wikipedia_articles_needing_clarification_from_April_2015" title="Category:Wikipedia articles needing clarification from April 2015">Wikipedia articles needing clarification from April 2015</a></li><li><a href="/wiki/Category:Spoken_articles" title="Category:Spoken articles">Spoken articles</a></li><li><a href="/wiki/Category:Articles_with_hAudio_microformats" title="Category:Articles with hAudio microformats">Articles with hAudio microformats</a></li><li><a href="/wiki/Category:Wikipedia_articles_with_LCCN_identifiers" title="Category:Wikipedia articles with LCCN identifiers">Wikipedia articles with LCCN identifiers</a></li><li><a href="/wiki/Category:Wikipedia_articles_with_GND_identifiers" title="Category:Wikipedia articles with GND identifiers">Wikipedia articles with GND identifiers</a></li><li><a href="/wiki/Category:Wikipedia_articles_with_BNF_identifiers" title="Category:Wikipedia articles with BNF identifiers">Wikipedia articles with BNF identifiers</a></li></ul></div></div>				<div class="visualClear"></div>/n							</div>/n		</div>/n		<div id="mw-navigation">/n			<h2>Navigation menu</h2>/n/n			<div id="mw-head">/n									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">/n						<h3 id="p-personal-label">Personal tools</h3>/n						<ul>/n							<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Functional+programming" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Functional+programming" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>						</ul>/n					</div>/n									<div id="left-navigation">/n										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">/n						<h3 id="p-namespaces-label">Namespaces</h3>/n						<ul>/n														<li id="ca-nstab-main" class="selected"><span><a href="/wiki/Functional_programming" title="View the content page [c]" accesskey="c">Article</a></span></li>/n							<li id="ca-talk"><span><a href="/wiki/Talk:Functional_programming" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>/n						</ul>/n					</div>/n										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">/n												<h3 id="p-variants-label">/n							<span>Variants</span>/n						</h3>/n/n						<div class="menu">/n							<ul>/n															</ul>/n						</div>/n					</div>/n									</div>/n				<div id="right-navigation">/n										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">/n						<h3 id="p-views-label">Views</h3>/n						<ul>/n														<li id="ca-view" class="collapsible selected"><span><a href="/wiki/Functional_programming">Read</a></span></li>/n							<li id="ca-edit" class="collapsible"><span><a href="/w/index.php?title=Functional_programming&amp;action=edit" title="Edit this page [e]" accesskey="e">Edit</a></span></li>/n							<li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Functional_programming&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>/n						</ul>/n					</div>/n										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">/n						<h3 id="p-cactions-label"><span>More</span></h3>/n/n						<div class="menu">/n							<ul>/n															</ul>/n						</div>/n					</div>/n										<div id="p-search" role="search">/n						<h3>/n							<label for="searchInput">Search</label>/n						</h3>/n/n						<form action="/w/index.php" id="searchform">/n							<div id="simpleSearch">/n							<input type="search" name="search" placeholder="Search Wikipedia" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>/n						</form>/n					</div>/n									</div>/n			</div>/n			<div id="mw-panel">/n				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>/n						<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>/n			<h3 id='p-navigation-label'>Navigation</h3>/n/n			<div class="body">/n									<ul>/n						<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>/n			<h3 id='p-interaction-label'>Interaction</h3>/n/n			<div class="body">/n									<ul>/n						<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>/n			<h3 id='p-tb-label'>Tools</h3>/n/n			<div class="body">/n									<ul>/n						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Functional_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Functional_programming" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Functional_programming&amp;oldid=807122652" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Functional_programming&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q193076" title="Link to connected data repository item [g]" accesskey="g">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Functional_programming&amp;id=807122652" title="Information on how to cite this page">Cite this page</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>/n			<h3 id='p-coll-print_export-label'>Print/export</h3>/n/n			<div class="body">/n									<ul>/n						<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Functional+programming">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:ElectronPdf&amp;page=Functional+programming&amp;action=show-download-screen">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Functional_programming&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-wikibase-otherprojects' aria-labelledby='p-wikibase-otherprojects-label'>/n			<h3 id='p-wikibase-otherprojects-label'>In other projects</h3>/n/n			<div class="body">/n									<ul>/n						<li class="wb-otherproject-link wb-otherproject-commons"><a href="https://commons.wikimedia.org/wiki/Category:Functional_programming" hreflang="en">Wikimedia Commons</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>/n			<h3 id='p-lang-label'>Languages</h3>/n/n			<div class="body">/n									<ul>/n						<li class="interlanguage-link interwiki-ar"><a href="https://ar.wikipedia.org/wiki/%D8%A8%D8%B1%D9%85%D8%AC%D8%A9_%D9%88%D8%B8%D9%8A%D9%81%D9%8A%D8%A9" title="برمجة وظيفية – Arabic" lang="ar" hreflang="ar" class="interlanguage-link-target">العربية</a></li><li class="interlanguage-link interwiki-bn"><a href="https://bn.wikipedia.org/wiki/%E0%A6%AB%E0%A6%BE%E0%A6%82%E0%A6%B6%E0%A6%A8%E0%A6%AD%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%A4%E0%A6%BF%E0%A6%95_%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82" title="ফাংশনভিত্তিক প্রোগ্রামিং – Bangla" lang="bn" hreflang="bn" class="interlanguage-link-target">বাংলা</a></li><li class="interlanguage-link interwiki-be"><a href="https://be.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D1%8B%D1%8F%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D0%B5_%D0%BF%D1%80%D0%B0%D0%B3%D1%80%D0%B0%D0%BC%D0%B0%D0%B2%D0%B0%D0%BD%D0%BD%D0%B5" title="Функцыянальнае праграмаванне – Belarusian" lang="be" hreflang="be" class="interlanguage-link-target">Беларуская</a></li><li class="interlanguage-link interwiki-bg"><a href="https://bg.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D0%BD%D0%BE_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D0%BD%D0%B5" title="Функционално програмиране – Bulgarian" lang="bg" hreflang="bg" class="interlanguage-link-target">Български</a></li><li class="interlanguage-link interwiki-ca"><a href="https://ca.wikipedia.org/wiki/Programaci%C3%B3_funcional" title="Programació funcional – Catalan" lang="ca" hreflang="ca" class="interlanguage-link-target">Català</a></li><li class="interlanguage-link interwiki-cs"><a href="https://cs.wikipedia.org/wiki/Funkcion%C3%A1ln%C3%AD_programov%C3%A1n%C3%AD" title="Funkcionální programování – Czech" lang="cs" hreflang="cs" class="interlanguage-link-target">Čeština</a></li><li class="interlanguage-link interwiki-da"><a href="https://da.wikipedia.org/wiki/Funktionsprogrammering" title="Funktionsprogrammering – Danish" lang="da" hreflang="da" class="interlanguage-link-target">Dansk</a></li><li class="interlanguage-link interwiki-de"><a href="https://de.wikipedia.org/wiki/Funktionale_Programmierung" title="Funktionale Programmierung – German" lang="de" hreflang="de" class="interlanguage-link-target">Deutsch</a></li><li class="interlanguage-link interwiki-et"><a href="https://et.wikipedia.org/wiki/Funktsionaalne_programmeerimine" title="Funktsionaalne programmeerimine – Estonian" lang="et" hreflang="et" class="interlanguage-link-target">Eesti</a></li><li class="interlanguage-link interwiki-el"><a href="https://el.wikipedia.org/wiki/%CE%A3%CF%85%CE%BD%CE%B1%CF%81%CF%84%CE%B7%CF%83%CE%B9%CE%B1%CE%BA%CF%8C%CF%82_%CF%80%CF%81%CE%BF%CE%B3%CF%81%CE%B1%CE%BC%CE%BC%CE%B1%CF%84%CE%B9%CF%83%CE%BC%CF%8C%CF%82" title="Συναρτησιακός προγραμματισμός – Greek" lang="el" hreflang="el" class="interlanguage-link-target">Ελληνικά</a></li><li class="interlanguage-link interwiki-es"><a href="https://es.wikipedia.org/wiki/Programaci%C3%B3n_funcional" title="Programación funcional – Spanish" lang="es" hreflang="es" class="interlanguage-link-target">Español</a></li><li class="interlanguage-link interwiki-fa"><a href="https://fa.wikipedia.org/wiki/%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%E2%80%8C%D9%86%D9%88%DB%8C%D8%B3%DB%8C_%D8%AA%D8%A7%D8%A8%D8%B9%DB%8C" title="برنامه‌نویسی تابعی – Persian" lang="fa" hreflang="fa" class="interlanguage-link-target">فارسی</a></li><li class="interlanguage-link interwiki-fr"><a href="https://fr.wikipedia.org/wiki/Programmation_fonctionnelle" title="Programmation fonctionnelle – French" lang="fr" hreflang="fr" class="interlanguage-link-target">Français</a></li><li class="interlanguage-link interwiki-ga"><a href="https://ga.wikipedia.org/wiki/R%C3%ADomhchl%C3%A1r%C3%BA_feidhmi%C3%BAil" title="Ríomhchlárú feidhmiúil – Irish" lang="ga" hreflang="ga" class="interlanguage-link-target">Gaeilge</a></li><li class="interlanguage-link interwiki-gl"><a href="https://gl.wikipedia.org/wiki/Programaci%C3%B3n_funcional" title="Programación funcional – Galician" lang="gl" hreflang="gl" class="interlanguage-link-target">Galego</a></li><li class="interlanguage-link interwiki-ko"><a href="https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D" title="함수형 프로그래밍 – Korean" lang="ko" hreflang="ko" class="interlanguage-link-target">한국어</a></li><li class="interlanguage-link interwiki-hy"><a href="https://hy.wikipedia.org/wiki/%D5%96%D5%B8%D6%82%D5%B6%D5%AF%D6%81%D5%AB%D5%B8%D5%B6%D5%A1%D5%AC_%D5%AE%D6%80%D5%A1%D5%A3%D6%80%D5%A1%D5%BE%D5%B8%D6%80%D5%B8%D6%82%D5%B4" title="Ֆունկցիոնալ ծրագրավորում – Armenian" lang="hy" hreflang="hy" class="interlanguage-link-target">Հայերեն</a></li><li class="interlanguage-link interwiki-hr"><a href="https://hr.wikipedia.org/wiki/Funkcijsko_programiranje" title="Funkcijsko programiranje – Croatian" lang="hr" hreflang="hr" class="interlanguage-link-target">Hrvatski</a></li><li class="interlanguage-link interwiki-id"><a href="https://id.wikipedia.org/wiki/Pemrograman_Fungsional" title="Pemrograman Fungsional – Indonesian" lang="id" hreflang="id" class="interlanguage-link-target">Bahasa Indonesia</a></li><li class="interlanguage-link interwiki-it"><a href="https://it.wikipedia.org/wiki/Programmazione_funzionale" title="Programmazione funzionale – Italian" lang="it" hreflang="it" class="interlanguage-link-target">Italiano</a></li><li class="interlanguage-link interwiki-he"><a href="https://he.wikipedia.org/wiki/%D7%AA%D7%9B%D7%A0%D7%95%D7%AA_%D7%A4%D7%95%D7%A0%D7%A7%D7%A6%D7%99%D7%95%D7%A0%D7%9C%D7%99" title="תכנות פונקציונלי – Hebrew" lang="he" hreflang="he" class="interlanguage-link-target">עברית</a></li><li class="interlanguage-link interwiki-la"><a href="https://la.wikipedia.org/wiki/Programmatura_functionalis" title="Programmatura functionalis – Latin" lang="la" hreflang="la" class="interlanguage-link-target">Latina</a></li><li class="interlanguage-link interwiki-hu"><a href="https://hu.wikipedia.org/wiki/Funkcion%C3%A1lis_programoz%C3%A1s" title="Funkcionális programozás – Hungarian" lang="hu" hreflang="hu" class="interlanguage-link-target">Magyar</a></li><li class="interlanguage-link interwiki-ms"><a href="https://ms.wikipedia.org/wiki/Pengaturcaraan_kefungsian" title="Pengaturcaraan kefungsian – Malay" lang="ms" hreflang="ms" class="interlanguage-link-target">Bahasa Melayu</a></li><li class="interlanguage-link interwiki-mwl"><a href="https://mwl.wikipedia.org/wiki/Porgrama%C3%A7on_funcional" title="Porgramaçon funcional – Mirandese" lang="mwl" hreflang="mwl" class="interlanguage-link-target">Mirandés</a></li><li class="interlanguage-link interwiki-nl"><a href="https://nl.wikipedia.org/wiki/Functioneel_programmeren" title="Functioneel programmeren – Dutch" lang="nl" hreflang="nl" class="interlanguage-link-target">Nederlands</a></li><li class="interlanguage-link interwiki-ja"><a href="https://ja.wikipedia.org/wiki/%E9%96%A2%E6%95%B0%E5%9E%8B%E8%A8%80%E8%AA%9E" title="関数型言語 – Japanese" lang="ja" hreflang="ja" class="interlanguage-link-target">日本語</a></li><li class="interlanguage-link interwiki-no"><a href="https://no.wikipedia.org/wiki/Funksjonell_programmering" title="Funksjonell programmering – Norwegian" lang="no" hreflang="no" class="interlanguage-link-target">Norsk</a></li><li class="interlanguage-link interwiki-pl"><a href="https://pl.wikipedia.org/wiki/Programowanie_funkcyjne" title="Programowanie funkcyjne – Polish" lang="pl" hreflang="pl" class="interlanguage-link-target">Polski</a></li><li class="interlanguage-link interwiki-pt"><a href="https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional" title="Programação funcional – Portuguese" lang="pt" hreflang="pt" class="interlanguage-link-target">Português</a></li><li class="interlanguage-link interwiki-ro"><a href="https://ro.wikipedia.org/wiki/Programare_func%C8%9Bional%C4%83" title="Programare funcțională – Romanian" lang="ro" hreflang="ro" class="interlanguage-link-target">Română</a></li><li class="interlanguage-link interwiki-rue"><a href="https://rue.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D1%96%D0%BE%D0%BD%D0%B0%D0%BB%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D2%91%D1%80%D0%B0%D0%BC%D0%BE%D0%B2%D0%B0%D0%BD%D1%8F" title="Функціоналне проґрамованя – Rusyn" lang="rue" hreflang="rue" class="interlanguage-link-target">Русиньскый</a></li><li class="interlanguage-link interwiki-ru"><a href="https://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Функциональное программирование – Russian" lang="ru" hreflang="ru" class="interlanguage-link-target">Русский</a></li><li class="interlanguage-link interwiki-sco"><a href="https://sco.wikipedia.org/wiki/Functional_programmin" title="Functional programmin – Scots" lang="sco" hreflang="sco" class="interlanguage-link-target">Scots</a></li><li class="interlanguage-link interwiki-sk"><a href="https://sk.wikipedia.org/wiki/Funkcion%C3%A1lne_programovanie" title="Funkcionálne programovanie – Slovak" lang="sk" hreflang="sk" class="interlanguage-link-target">Slovenčina</a></li><li class="interlanguage-link interwiki-sr"><a href="https://sr.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D0%BD%D0%BE_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D1%9A%D0%B5" title="Функционално програмирање – Serbian" lang="sr" hreflang="sr" class="interlanguage-link-target">Српски / srpski</a></li><li class="interlanguage-link interwiki-sh"><a href="https://sh.wikipedia.org/wiki/Funkcijsko_programiranje" title="Funkcijsko programiranje – Serbo-Croatian" lang="sh" hreflang="sh" class="interlanguage-link-target">Srpskohrvatski / српскохрватски</a></li><li class="interlanguage-link interwiki-fi"><a href="https://fi.wikipedia.org/wiki/Funktionaalinen_ohjelmointi" title="Funktionaalinen ohjelmointi – Finnish" lang="fi" hreflang="fi" class="interlanguage-link-target">Suomi</a></li><li class="interlanguage-link interwiki-sv"><a href="https://sv.wikipedia.org/wiki/Funktionell_programmering" title="Funktionell programmering – Swedish" lang="sv" hreflang="sv" class="interlanguage-link-target">Svenska</a></li><li class="interlanguage-link interwiki-ta"><a href="https://ta.wikipedia.org/wiki/%E0%AE%AA%E0%AE%A3%E0%AE%BF%E0%AE%AE%E0%AF%81%E0%AE%B1%E0%AF%88_%E0%AE%A8%E0%AE%BF%E0%AE%B0%E0%AE%B2%E0%AF%8D_%E0%AE%AE%E0%AF%8A%E0%AE%B4%E0%AE%BF" title="பணிமுறை நிரல் மொழி – Tamil" lang="ta" hreflang="ta" class="interlanguage-link-target">தமிழ்</a></li><li class="interlanguage-link interwiki-th"><a href="https://th.wikipedia.org/wiki/%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B9%80%E0%B8%82%E0%B8%B5%E0%B8%A2%E0%B8%99%E0%B9%82%E0%B8%9B%E0%B8%A3%E0%B9%81%E0%B8%81%E0%B8%A3%E0%B8%A1%E0%B9%80%E0%B8%8A%E0%B8%B4%E0%B8%87%E0%B8%9F%E0%B8%B1%E0%B8%87%E0%B8%81%E0%B9%8C%E0%B8%8A%E0%B8%B1%E0%B8%99" title="การเขียนโปรแกรมเชิงฟังก์ชัน – Thai" lang="th" hreflang="th" class="interlanguage-link-target">ไทย</a></li><li class="interlanguage-link interwiki-tr"><a href="https://tr.wikipedia.org/wiki/Fonksiyonel_programlama" title="Fonksiyonel programlama – Turkish" lang="tr" hreflang="tr" class="interlanguage-link-target">Türkçe</a></li><li class="interlanguage-link interwiki-uk"><a href="https://uk.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D1%96%D0%B9%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F" title="Функційне програмування – Ukrainian" lang="uk" hreflang="uk" class="interlanguage-link-target">Українська</a></li><li class="interlanguage-link interwiki-vi"><a href="https://vi.wikipedia.org/wiki/L%E1%BA%ADp_tr%C3%ACnh_h%C3%A0m" title="Lập trình hàm – Vietnamese" lang="vi" hreflang="vi" class="interlanguage-link-target">Tiếng Việt</a></li><li class="interlanguage-link interwiki-diq"><a href="https://diq.wikipedia.org/wiki/Programnay%C4%B1%C5%9Fo_fonksiyonal" title="Programnayışo fonksiyonal – Zazaki" lang="diq" hreflang="diq" class="interlanguage-link-target">Zazaki</a></li><li class="interlanguage-link interwiki-zh"><a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80" title="函數程式語言 – Chinese" lang="zh" hreflang="zh" class="interlanguage-link-target">中文</a></li>					</ul>/n				<div class="after-portlet after-portlet-lang"><span class="wb-langlinks-edit wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q193076#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>			</div>/n		</div>/n				</div>/n		</div>/n		<div id="footer" role="contentinfo">/n							<ul id="footer-info">/n											<li id="footer-info-lastmod"> This page was last edited on 26 October 2017, at 01:32.</li>/n											<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;/nadditional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>/n									</ul>/n							<ul id="footer-places">/n											<li id="footer-places-privacy"><a href="https://wikimediafoundation.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li>/n											<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>/n											<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>/n											<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>/n											<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>/n											<li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>/n											<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Functional_programming&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>/n									</ul>/n										<ul id="footer-icons" class="noprint">/n											<li id="footer-copyrightico">/n							<a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"/></a>						</li>/n											<li id="footer-poweredbyico">/n							<a href="//www.mediawiki.org/"><img src="/static/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>						</li>/n									</ul>/n						<div style="clear:both"></div>/n		</div>/n		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.732","walltime":"0.932","ppvisitednodes":{"value":5461,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":165901,"limit":2097152},"templateargumentsize":{"value":6354,"limit":2097152},"expansiondepth":{"value":16,"limit":40},"expensivefunctioncount":{"value":7,"limit":500},"entityaccesscount":{"value":1,"limit":400},"timingprofile":["100.00%  735.435      1 -total"," 44.26%  325.520      1 Template:Reflist"," 20.56%  151.220     39 Template:Cite_web"," 15.59%  114.653      6 Template:Citation_needed"," 14.30%  105.152      6 Template:Fix","  8.88%   65.295      7 Template:Delink","  6.56%   48.253     15 Template:Category_handler","  5.81%   42.741     13 Template:Cite_book","  5.66%   41.597      3 Template:ISBN","  4.89%   35.958     11 Template:Cite_journal"]},"scribunto":{"limitreport-timeusage":{"value":"0.369","limit":"10.000"},"limitreport-memusage":{"value":6608485,"limit":52428800}},"cachereport":{"origin":"mw1276","timestamp":"20171026013235","ttl":1900800,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":82,"wgHostname":"mw1241"});});</script>/n	</body>/n</html>/n