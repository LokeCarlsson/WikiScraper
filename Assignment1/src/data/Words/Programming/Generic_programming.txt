<!DOCTYPE html>/n<html class="client-nojs" lang="en" dir="ltr">/n<head>/n<meta charset="UTF-8"/>/n<title>Generic programming - Wikipedia</title>/n<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>/n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Generic_programming","wgTitle":"Generic programming","wgCurRevisionId":807351467,"wgRevisionId":807351467,"wgArticleId":105837,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using citations with accessdate and no URL","All articles with unsourced statements","Articles with unsourced statements from August 2015","Articles with unsourced statements from May 2010","Articles with unsourced statements from March 2009","Wikipedia articles with LCCN identifiers","Wikipedia articles with GND identifiers","Wikipedia articles with BNF identifiers","Use dmy dates from January 2012","Generic programming"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Generic_programming","wgRelevantArticleId":105837,"wgRequestId":"WfMj9gpAIDEAADIL3B0AAADC","wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":{"toolbar":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":false,"wgPopupsShouldSendModuleToUser":true,"wgPopupsConflictsWithNavPopupGadget":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":false,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q1051282","wgCentralAuthMobileDomain":false,"wgCodeMirrorEnabled":false,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":false});mw.loader.state({"ext.gadget.charinsert-styles":"ready","ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","skins.vector.styles.experimental.print":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {/nmw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*//n/n});mw.loader.load(["ext.cite.a11y","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.interface","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});</script>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cskins.vector.styles.experimental.print%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>/n<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>/n<meta name="ResourceLoaderDynamicStyles" content=""/>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.charinsert-styles&amp;only=styles&amp;skin=vector"/>/n<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>/n<meta name="generator" content="MediaWiki 1.31.0-wmf.4"/>/n<meta name="referrer" content="origin-when-cross-origin"/>/n<link rel="alternate" href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Generic_programming"/>/n<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Generic_programming&amp;action=edit"/>/n<link rel="edit" title="Edit this page" href="/w/index.php?title=Generic_programming&amp;action=edit"/>/n<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>/n<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>/n<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>/n<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>/n<link rel="license" href="//creativecommons.org/licenses/by-sa/3.0/"/>/n<link rel="canonical" href="https://en.wikipedia.org/wiki/Generic_programming"/>/n<link rel="dns-prefetch" href="//login.wikimedia.org"/>/n<link rel="dns-prefetch" href="//meta.wikimedia.org" />/n<!--[if lt IE 9]><script src="/w/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1"></script><![endif]-->/n</head>/n<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Generic_programming rootpage-Generic_programming vector-experimental-print-styles vector-nav-directionality skin-vector action-view">		<div id="mw-page-base" class="noprint"></div>/n		<div id="mw-head-base" class="noprint"></div>/n		<div id="content" class="mw-body" role="main">/n			<a id="top"></a>/n/n							<div id="siteNotice" class="mw-body-content"><!-- CentralNotice --></div>/n						<div class="mw-indicators mw-body-content">/n</div>/n			<h1 id="firstHeading" class="firstHeading" lang="en">Generic programming</h1>/n									<div id="bodyContent" class="mw-body-content">/n									<div id="siteSub" class="noprint">From Wikipedia, the free encyclopedia</div>/n								<div id="contentSub"></div>/n												<div id="jump-to-nav" class="mw-jump">/n					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>/n				</div>/n				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><table class="vertical-navbox nowraplinks" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%">/n<tr>/n<th style="padding:0.2em 0.4em 0.2em;font-size:145%;line-height:1.2em"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>/n</tr>/n<tr>/n<td style="padding:0 0.1em 0.4em;text-align: left">/n<ul>/n<li><a href="/wiki/Action_language" title="Action language">Action</a></li>/n<li><a href="/wiki/Agent-oriented_programming" title="Agent-oriented programming">Agent-oriented</a></li>/n<li><a href="/wiki/Array_programming" title="Array programming">Array-oriented</a></li>/n<li><a href="/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>/n<li><a href="/wiki/Concept_programming" title="Concept programming">Concept</a></li>/n<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a>/n<ul>/n<li><a href="/wiki/Relativistic_programming" title="Relativistic programming">Relativistic programming</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Data-driven_programming" title="Data-driven programming">Data-driven</a></li>/n<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)/n<ul>/n<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a>/n<ul>/n<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a>/n<ul>/n<li><a href="/wiki/Concurrent_constraint_logic_programming" title="Concurrent constraint logic programming">Concurrent constraint logic</a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li><a href="/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a>/n<ul>/n<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>/n<li>Cell-oriented (<a href="/wiki/Spreadsheet" title="Spreadsheet">spreadsheets</a>)</li>/n<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Functional_programming" title="Functional programming">Functional</a>/n<ul>/n<li><a href="/wiki/Functional_logic_programming" title="Functional logic programming">Functional logic</a></li>/n<li><a href="/wiki/Purely_functional_programming" title="Purely functional programming">Purely functional</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a>/n<ul>/n<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>/n<li><a href="/wiki/Answer_set_programming" title="Answer set programming">Answer set</a></li>/n<li><a href="/wiki/Concurrent_logic_programming" title="Concurrent logic programming">Concurrent logic</a></li>/n<li><a href="/wiki/Functional_logic_programming" title="Functional logic programming">Functional logic</a></li>/n<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li><a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a></li>/n<li><a href="/wiki/End-user_development" title="End-user development">End-user programming</a></li>/n<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a>/n<ul>/n<li><a href="/wiki/Service-oriented_architecture" title="Service-oriented architecture">Service-oriented</a></li>/n<li><a href="/wiki/Time-driven_programming" title="Time-driven programming">Time-driven</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Expression-oriented_programming_language" title="Expression-oriented programming language">Expression-oriented</a></li>/n<li><a href="/wiki/Feature-oriented_programming" title="Feature-oriented programming">Feature-oriented</a></li>/n<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>/n<li><a class="mw-selflink selflink">Generic</a></li>/n<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)/n<ul>/n<li><a href="/wiki/Literate_programming" title="Literate programming">Literate</a></li>/n<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>/n<ul>/n<li><a href="/wiki/Natural_language_programming" title="Natural language programming">Natural language programming</a></li>/n<li><a href="/wiki/Service-oriented_modeling#Discipline-specific_modeling" title="Service-oriented modeling">Discipline-specific</a></li>/n<li><a href="/wiki/Domain-specific_language" title="Domain-specific language">Domain-specific</a></li>/n<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>/n<ul>/n<li><a href="/wiki/Dialect_(computing)" title="Dialect (computing)">Dialecting</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>/n<ul>/n<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>/n<ul>/n<li><a href="/wiki/Inductive_programming" title="Inductive programming">Inductive programming</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">Reflective</a>/n<ul>/n<li><a href="/wiki/Attribute-oriented_programming" title="Attribute-oriented programming">Attribute-oriented</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Homoiconicity" title="Homoiconicity">Homoiconic</a></li>/n<li><a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a></li>/n<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>/n<ul>/n<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li><a href="/wiki/Non-structured_programming" title="Non-structured programming">Non-structured</a> (contrast: <a href="/wiki/Structured_programming" title="Structured programming">Structured</a>)/n<ul>/n<li><a href="/wiki/Array_programming" title="Array programming">Array</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>/n<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>/n<ul>/n<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Tacit_programming" title="Tacit programming">Point-free style</a>/n<ul>/n<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Probabilistic_programming_language" title="Probabilistic programming language">Probabilistic</a></li>/n<li><a href="/wiki/Semantic-oriented_programming" title="Semantic-oriented programming">Semantic</a></li>/n<li><a href="/wiki/Structured_programming" title="Structured programming">Structured</a> (contrast: <a href="/wiki/Non-structured_programming" title="Non-structured programming">Non-structured</a>)/n<ul>/n<li><a href="/wiki/Block_(programming)" title="Block (programming)">Block-structured</a></li>/n<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a> (contrast: <a href="/wiki/Monolithic_application" title="Monolithic application">Monolithic</a>)</li>/n<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>/n<ul>/n<li><a href="/wiki/Actor_model" title="Actor model">Actor-based</a></li>/n<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>/n<li><a href="/wiki/Concurrent_object-oriented_programming" title="Concurrent object-oriented programming">Concurrent</a></li>/n<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>/n<li>By <a href="/wiki/Separation_of_concerns" title="Separation of concerns">separation of concerns</a>:/n<ul>/n<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>/n<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>/n<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>/n</ul>/n</li>/n</ul>/n</li>/n<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>/n</ul>/n</td>/n</tr>/n<tr>/n<td style="text-align:right;font-size:115%">/n<div class="plainlinks hlist navbar mini">/n<ul>/n<li class="nv-view"><a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><abbr title="View this template">v</abbr></a></li>/n<li class="nv-talk"><a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><abbr title="Discuss this template">t</abbr></a></li>/n<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit"><abbr title="Edit this template">e</abbr></a></li>/n</ul>/n</div>/n</td>/n</tr>/n</table>/n<p><b>Generic programming</b> is a style of <a href="/wiki/Computer_programming" title="Computer programming">computer programming</a> in which <a href="/wiki/Algorithm" title="Algorithm">algorithms</a> are written in terms of <a href="/wiki/Data_type" title="Data type">types</a> <i>to-be-specified-later</i> that are then <i>instantiated</i> when needed for specific types provided as <a href="/wiki/Parameter_(computer_programming)" title="Parameter (computer programming)">parameters</a>. This approach, pioneered by <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a> in 1973,<sup id="cite_ref-Lee2008_1-0" class="reference"><a href="#cite_note-Lee2008-1">[1]</a></sup><sup id="cite_ref-2" class="reference"><a href="#cite_note-2">[2]</a></sup> permits writing common <a href="/wiki/Function_(computer_science)" class="mw-redirect" title="Function (computer science)">functions</a> or <a href="/wiki/Type_(computer_science)" class="mw-redirect" title="Type (computer science)">types</a> that differ only in the set of types on which they operate when used, thus reducing <a href="/wiki/Duplicate_code" title="Duplicate code">duplication</a>. Such software entities are known as <i>generics</i> in <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>, <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>, <a href="/wiki/Delphi_(programming_language)" title="Delphi (programming language)">Delphi</a>, <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a>, <a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>, <a href="/wiki/Rust_(programming_language)" title="Rust (programming language)">Rust</a>, <a href="/wiki/Swift_(programming_language)" title="Swift (programming language)">Swift</a>, <a href="/wiki/TypeScript" title="TypeScript">TypeScript</a> and <a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a>. They are known as <i><a href="/wiki/Parametric_polymorphism" title="Parametric polymorphism">parametric polymorphism</a></i> in <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>, <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> (the Haskell community also uses the term "generic" for a related but somewhat different concept) and <a href="/wiki/Julia_(programming_language)" title="Julia (programming language)">Julia</a>; <i><a href="/wiki/Template_(C%2B%2B)" title="Template (C++)">templates</a></i> in <a href="/wiki/C%2B%2B" title="C++">C++</a> and <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a>; and <i>parameterized types</i> in the influential 1994 book <i><a href="/wiki/Design_Patterns_(book)" class="mw-redirect" title="Design Patterns (book)">Design Patterns</a></i>.<sup id="cite_ref-GoF_3-0" class="reference"><a href="#cite_note-GoF-3">[3]</a></sup> The authors of <i>Design Patterns</i> note that this technique, especially when combined with <a href="/wiki/Delegation_(programming)" class="mw-redirect" title="Delegation (programming)">delegation</a>, is very powerful, however,</p>/n<blockquote class="templatequote">/n<p>Dynamic, highly parameterized software is harder to understand than more static software.</p>/n<div class="templatequotecite">— <cite>Gang of Four, <i>Design Patterns</i><sup id="cite_ref-GoF_3-1" class="reference"><a href="#cite_note-GoF-3">[3]</a></sup> (Chapter 1)</cite></div>/n</blockquote>/n<p>The term <b>generic programming</b> was originally coined by <a href="/wiki/David_Musser" title="David Musser">David Musser</a> and <a href="/wiki/Alexander_Stepanov" title="Alexander Stepanov">Alexander Stepanov</a><sup id="cite_ref-FOOTNOTEMusserStepanov1989_4-0" class="reference"><a href="#cite_note-FOOTNOTEMusserStepanov1989-4">[4]</a></sup> in a more specific sense than the above, to describe a programming paradigm whereby fundamental requirements on types are abstracted from across concrete examples of algorithms and data structures and formalised as <a href="/wiki/Concept_(generic_programming)" title="Concept (generic programming)">concepts</a>, with <a href="/wiki/Generic_function" title="Generic function">generic functions</a> implemented in terms of these concepts, typically using language genericity mechanisms as described above.</p>/n<p></p>/n<div id="toc" class="toc">/n<div class="toctitle">/n<h2>Contents</h2>/n</div>/n<ul>/n<li class="toclevel-1 tocsection-1"><a href="#Stepanov.E2.80.93Musser_and_other_generic_programming_paradigms"><span class="tocnumber">1</span> <span class="toctext">Stepanov–Musser and other generic programming paradigms</span></a></li>/n<li class="toclevel-1 tocsection-2"><a href="#Programming_language_support_for_genericity"><span class="tocnumber">2</span> <span class="toctext">Programming language support for genericity</span></a>/n<ul>/n<li class="toclevel-2 tocsection-3"><a href="#In_object-oriented_languages"><span class="tocnumber">2.1</span> <span class="toctext">In object-oriented languages</span></a>/n<ul>/n<li class="toclevel-3 tocsection-4"><a href="#Generics_in_Ada"><span class="tocnumber">2.1.1</span> <span class="toctext">Generics in Ada</span></a>/n<ul>/n<li class="toclevel-4 tocsection-5"><a href="#Example"><span class="tocnumber">2.1.1.1</span> <span class="toctext">Example</span></a></li>/n<li class="toclevel-4 tocsection-6"><a href="#Advantages_and_limitations"><span class="tocnumber">2.1.1.2</span> <span class="toctext">Advantages and limitations</span></a></li>/n</ul>/n</li>/n<li class="toclevel-3 tocsection-7"><a href="#Templates_in_C.2B.2B"><span class="tocnumber">2.1.2</span> <span class="toctext">Templates in C++</span></a>/n<ul>/n<li class="toclevel-4 tocsection-8"><a href="#Technical_overview"><span class="tocnumber">2.1.2.1</span> <span class="toctext">Technical overview</span></a></li>/n<li class="toclevel-4 tocsection-9"><a href="#Template_specialization"><span class="tocnumber">2.1.2.2</span> <span class="toctext">Template specialization</span></a></li>/n<li class="toclevel-4 tocsection-10"><a href="#Advantages_and_disadvantages"><span class="tocnumber">2.1.2.3</span> <span class="toctext">Advantages and disadvantages</span></a></li>/n</ul>/n</li>/n<li class="toclevel-3 tocsection-11"><a href="#Templates_in_D"><span class="tocnumber">2.1.3</span> <span class="toctext">Templates in D</span></a>/n<ul>/n<li class="toclevel-4 tocsection-12"><a href="#Code_generation"><span class="tocnumber">2.1.3.1</span> <span class="toctext">Code generation</span></a></li>/n</ul>/n</li>/n<li class="toclevel-3 tocsection-13"><a href="#Genericity_in_Eiffel"><span class="tocnumber">2.1.4</span> <span class="toctext">Genericity in Eiffel</span></a>/n<ul>/n<li class="toclevel-4 tocsection-14"><a href="#Basic.2FUnconstrained_genericity"><span class="tocnumber">2.1.4.1</span> <span class="toctext">Basic/Unconstrained genericity</span></a></li>/n<li class="toclevel-4 tocsection-15"><a href="#Constrained_genericity"><span class="tocnumber">2.1.4.2</span> <span class="toctext">Constrained genericity</span></a></li>/n</ul>/n</li>/n<li class="toclevel-3 tocsection-16"><a href="#Generics_in_Java"><span class="tocnumber">2.1.5</span> <span class="toctext">Generics in Java</span></a></li>/n<li class="toclevel-3 tocsection-17"><a href="#Genericity_in_.NET_.5BC.23.2C_VB.NET.5D"><span class="tocnumber">2.1.6</span> <span class="toctext">Genericity in .NET [C#, VB.NET]</span></a></li>/n<li class="toclevel-3 tocsection-18"><a href="#Genericity_in_Delphi"><span class="tocnumber">2.1.7</span> <span class="toctext">Genericity in Delphi</span></a></li>/n<li class="toclevel-3 tocsection-19"><a href="#Genericity_in_Free_Pascal"><span class="tocnumber">2.1.8</span> <span class="toctext">Genericity in Free Pascal</span></a></li>/n</ul>/n</li>/n<li class="toclevel-2 tocsection-20"><a href="#Functional_languages"><span class="tocnumber">2.2</span> <span class="toctext">Functional languages</span></a>/n<ul>/n<li class="toclevel-3 tocsection-21"><a href="#Genericity_in_Haskell"><span class="tocnumber">2.2.1</span> <span class="toctext">Genericity in Haskell</span></a>/n<ul>/n<li class="toclevel-4 tocsection-22"><a href="#PolyP"><span class="tocnumber">2.2.1.1</span> <span class="toctext">PolyP</span></a></li>/n<li class="toclevel-4 tocsection-23"><a href="#Generic_Haskell"><span class="tocnumber">2.2.1.2</span> <span class="toctext">Generic Haskell</span></a></li>/n</ul>/n</li>/n<li class="toclevel-3 tocsection-24"><a href="#Clean"><span class="tocnumber">2.2.2</span> <span class="toctext">Clean</span></a></li>/n</ul>/n</li>/n<li class="toclevel-2 tocsection-25"><a href="#Other_languages"><span class="tocnumber">2.3</span> <span class="toctext">Other languages</span></a></li>/n</ul>/n</li>/n<li class="toclevel-1 tocsection-26"><a href="#See_also"><span class="tocnumber">3</span> <span class="toctext">See also</span></a></li>/n<li class="toclevel-1 tocsection-27"><a href="#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>/n<li class="toclevel-1 tocsection-28"><a href="#Citations"><span class="tocnumber">5</span> <span class="toctext">Citations</span></a></li>/n<li class="toclevel-1 tocsection-29"><a href="#Further_reading"><span class="tocnumber">6</span> <span class="toctext">Further reading</span></a></li>/n<li class="toclevel-1 tocsection-30"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>/n</ul>/n</div>/n<p></p>/n<h2><span id="Stepanov–Musser_and_other_generic_programming_paradigms"></span><span class="mw-headline" id="Stepanov.E2.80.93Musser_and_other_generic_programming_paradigms">Stepanov–Musser and other generic programming paradigms</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=1" title="Edit section: Stepanov–Musser and other generic programming paradigms">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>Generic programming is defined in <a href="#CITEREFMusserStepanov1989">Musser &amp; Stepanov (1989)</a> as follows,</p>/n<blockquote class="templatequote">/n<p>Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software.</p>/n<div class="templatequotecite">— <cite>Musser, David R.; Stepanov, Alexander A., Generic Programming<sup id="cite_ref-5" class="reference"><a href="#cite_note-5">[5]</a></sup></cite></div>/n</blockquote>/n<p>Generic programming paradigm is an approach to software decomposition whereby fundamental requirements on types are abstracted from across concrete examples of algorithms and data structures and formalised as <a href="/wiki/Concept_(generic_programming)" title="Concept (generic programming)">concepts</a>, analogously to the abstraction of algebraic theories in <a href="/wiki/Abstract_algebra" title="Abstract algebra">abstract algebra</a>.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6">[6]</a></sup> Early examples of this programming approach were implemented in Scheme and Ada,<sup id="cite_ref-7" class="reference"><a href="#cite_note-7">[7]</a></sup> although the best known example is the <a href="/wiki/Standard_Template_Library" title="Standard Template Library">Standard Template Library</a> (STL),<sup id="cite_ref-8" class="reference"><a href="#cite_note-8">[8]</a></sup><sup id="cite_ref-9" class="reference"><a href="#cite_note-9">[9]</a></sup> which developed a theory of <a href="/wiki/Iterator" title="Iterator">iterators</a> that is used to decouple sequence data structures and the algorithms operating on them.</p>/n<p>For example, given <i>N</i> sequence data structures, e.g. singly linked list, vector etc., and <i>M</i> algorithms to operate on them, e.g. <tt>find</tt>, <tt>sort</tt> etc., a direct approach would implement each algorithm specifically for each data structure, giving <span class="nowrap"><i>N</i> × <i>M</i></span> combinations to implement. However, in the generic programming approach, each data structure returns a model of an iterator concept (a simple value type that can be dereferenced to retrieve the current value, or changed to point to another value in the sequence) and each algorithm is instead written generically with arguments of such iterators, e.g. a pair of iterators pointing to the beginning and end of the subsequence to process. Thus, only <span class="nowrap"><i>N</i> + <i>M</i></span> data structure-algorithm combinations need be implemented. Several iterator concepts are specified in the STL, each a refinement of more restrictive concepts e.g. forward iterators only provide movement to the next value in a sequence (e.g. suitable for a singly linked list or a stream of input data), whereas a random-access iterator also provides direct constant-time access to any element of the sequence (e.g. suitable for a vector). An important point is that a data structure will return a model of the most general concept that can be implemented efficiently—<a href="/wiki/Analysis_of_algorithms" title="Analysis of algorithms">computational complexity</a> requirements are explicitly part of the concept definition. This limits the data structures a given algorithm can be applied to and such complexity requirements are a major determinant of data structure choice. Generic programming similarly has been applied in other domains, e.g. graph algorithms.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10">[10]</a></sup></p>/n<p>Note that although this approach often utilizes language features of <a href="/wiki/Compile-time" class="mw-redirect" title="Compile-time">compile-time</a> genericity/templates, it is in fact independent of particular language-technical details. Generic programming pioneer Alexander Stepanov wrote,</p>/n<blockquote class="templatequote">/n<p>Generic programming is about abstracting and classifying algorithms and data structures. It gets its inspiration from Knuth and not from type theory. Its goal is the incremental construction of systematic catalogs of useful, efficient and abstract algorithms and data structures. Such an undertaking is still a dream.</p>/n<div class="templatequotecite">— <cite>Alexander Stepanov, Short History of STL <sup id="cite_ref-11" class="reference"><a href="#cite_note-11">[11]</a></sup><sup id="cite_ref-stroustrup2007_12-0" class="reference"><a href="#cite_note-stroustrup2007-12">[12]</a></sup></cite></div>/n</blockquote>/n<blockquote class="templatequote">/n<p>I believe that iterator theories are as central to Computer Science as theories of <a href="/wiki/Ring_(mathematics)" title="Ring (mathematics)">rings</a> or <a href="/wiki/Banach_space" title="Banach space">Banach spaces</a> are central to Mathematics.</p>/n<div class="templatequotecite">— <cite>Alexander Stepanov, An Interview with A. Stepanov<sup id="cite_ref-stepanov2011_13-0" class="reference"><a href="#cite_note-stepanov2011-13">[13]</a></sup></cite></div>/n</blockquote>/n<p><a href="/wiki/Bjarne_Stroustrup" title="Bjarne Stroustrup">Bjarne Stroustrup</a> noted,</p>/n<blockquote class="templatequote">/n<p>Following Stepanov, we can define generic programming without mentioning language features: Lift algorithms and data structures from concrete examples to their most general and abstract form.</p>/n<div class="templatequotecite">— <cite>Bjarne Stroustrup, Evolving a language in and for the real world: C++ 1991-2006<sup id="cite_ref-stroustrup2007_12-1" class="reference"><a href="#cite_note-stroustrup2007-12">[12]</a></sup></cite></div>/n</blockquote>/n<p>Other programming paradigms that have been described as generic programming include <i>Datatype generic programming</i> as described in "Generic Programming — an Introduction".<sup id="cite_ref-14" class="reference"><a href="#cite_note-14">[14]</a></sup> The <em>Scrap your <a href="/wiki/Boilerplate_code" title="Boilerplate code">boilerplate</a></em> approach is a lightweight generic programming approach for Haskell.<sup id="cite_ref-15" class="reference"><a href="#cite_note-15">[15]</a></sup></p>/n<p>In this article we distinguish the high-level <a href="/wiki/Programming_paradigm" title="Programming paradigm">programming paradigms</a> of <i>generic programming</i>, above, from the lower-level programming language <i>genericity mechanisms</i> used to implement them (see <a href="#Programming_language_support_for_genericity">Programming language support for genericity</a>). For further discussion and comparison of generic programming paradigms, see.<sup id="cite_ref-16" class="reference"><a href="#cite_note-16">[16]</a></sup></p>/n<h2><span class="mw-headline" id="Programming_language_support_for_genericity">Programming language support for genericity</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=2" title="Edit section: Programming language support for genericity">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<p>Genericity facilities have existed in high-level languages since at least the 1970s in languages such as <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, <a href="/wiki/CLU_programming_language" class="mw-redirect" title="CLU programming language">CLU</a> and <a href="/wiki/Ada_programming_language" class="mw-redirect" title="Ada programming language">Ada</a>, and were subsequently adopted by many <a href="/wiki/Object-based_programming" class="mw-redirect" title="Object-based programming">object-based</a> and <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a> languages, including <a href="/wiki/BETA_programming_language" class="mw-redirect" title="BETA programming language">BETA</a>, <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/D_programming_language" class="mw-redirect" title="D programming language">D</a>, <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, and <a href="/wiki/Digital_Equipment_Corporation" title="Digital Equipment Corporation">DEC</a>'s now defunct <a href="/w/index.php?title=Trellis-Owl&amp;action=edit&amp;redlink=1" class="new" title="Trellis-Owl (page does not exist)">Trellis-Owl</a> language.</p>/n<p>Genericity is implemented and supported differently in various programming languages; the term "generic" has also been used differently in various programming contexts. For example, in <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a> the <a href="/wiki/Compiler" title="Compiler">compiler</a> can execute code while compiling and one can create new <i>compiler keywords</i> and new implementations for those words on the fly. It has few <i>words</i> that expose the compiler behaviour and therefore naturally offers <i>genericity</i> capacities that, however, are not referred to as such in most Forth texts. Similarly, dynamically typed languages, especially interpreted ones, usually offer <i>genericity</i> by default as both passing values to functions and value assignment are type-indifferent and such behavior is often utilized for abstraction or code terseness, however this is not typically labeled <i>genericity</i> as it's a direct consequence of dynamic typing system employed by the language<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (August 2015)">citation needed</span></a></i>]</sup>. The term has been used in <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>, specifically in <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell-like</a> languages, which use a <a href="/wiki/Structural_type_system" title="Structural type system">structural type system</a> where types are always parametric and the actual code on those types is generic. These usages still serve a similar purpose of code-saving and the rendering of an abstraction.</p>/n<p><a href="/wiki/Array_data_type" title="Array data type">Arrays</a> and <a href="/wiki/Struct_(C_programming_language)" title="Struct (C programming language)">structs</a> can be viewed as predefined generic types. Every usage of an array or struct type instantiates a new concrete type, or reuses a previous instantiated type. Array element types and struct element types are parameterized types, which are used to instantiate the corresponding generic type. All this is usually built-in in the <a href="/wiki/Compiler" title="Compiler">compiler</a> and the syntax differs from other generic constructs. Some <a href="/wiki/Extensible_programming" title="Extensible programming">extensible programming languages</a> try to unify built-in and user defined generic types.</p>/n<p>A broad survey of genericity mechanisms in programming languages follows. For a specific survey comparing suitability of mechanisms for generic programming, see.<sup id="cite_ref-17" class="reference"><a href="#cite_note-17">[17]</a></sup></p>/n<h3><span class="mw-headline" id="In_object-oriented_languages">In object-oriented languages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=3" title="Edit section: In object-oriented languages">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<p>When creating container classes in statically typed languages, it is inconvenient to write specific implementations for each datatype contained, especially if the code for each datatype is virtually identical. For example, in C++, this duplication of code can be circumvented by defining a class template:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>/n<span class="k">class</span> <span class="nc">List</span>/n<span class="p">{</span>/n   <span class="cm">/* class contents */</span>/n<span class="p">};</span>/n/n<span class="n">List</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="n">list_of_animals</span><span class="p">;</span>/n<span class="n">List</span><span class="o">&lt;</span><span class="n">Car</span><span class="o">&gt;</span> <span class="n">list_of_cars</span><span class="p">;</span>/n</pre></div>/n<p>Above, <tt>T</tt> is a placeholder for whatever type is specified when the list is created. These "containers-of-type-T", commonly called <a href="/wiki/Template_(programming)" class="mw-redirect" title="Template (programming)">templates</a>, allow a class to be reused with different datatypes as long as certain contracts such as <a href="/wiki/Subtype" class="mw-redirect" title="Subtype">subtypes</a> and <a href="/wiki/Signature_(computer_science)" class="mw-redirect" title="Signature (computer science)">signature</a> are kept. This genericity mechanism should not be confused with <i><a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)">inclusion polymorphism</a></i>, which is the <a href="/wiki/Algorithm" title="Algorithm">algorithmic</a> usage of exchangeable sub-classes: for instance, a list of objects of type <tt>Moving_Object</tt> containing objects of type <tt>Animal</tt> and <tt>Car</tt>. Templates can also be used for type-independent functions as in the <tt>Swap</tt> example below:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>/n<span class="kt">void</span> <span class="n">Swap</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="c1">//"&amp;" passes parameters by reference</span>/n<span class="p">{</span>/n   <span class="n">T</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>/n   <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>/n   <span class="n">a</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>/n<span class="p">}</span>/n/n<span class="n">string</span> <span class="n">hello</span> <span class="o">=</span> <span class="s">"world!"</span><span class="p">,</span> <span class="n">world</span> <span class="o">=</span> <span class="s">"Hello, "</span><span class="p">;</span>/n<span class="n">Swap</span><span class="p">(</span> <span class="n">world</span><span class="p">,</span> <span class="n">hello</span> <span class="p">);</span>/n<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="n">world</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">//Output is "Hello, World!"</span>/n</pre></div>/n<p>The C++ <tt>template</tt> construct used above is widely cited<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (May 2010)">citation needed</span></a></i>]</sup> as the genericity construct that popularized the notion among programmers and language designers and supports many generic programming idioms. The D programming language also offers fully generic-capable templates based on the C++ precedent but with a simplified syntax. The Java programming language has provided genericity facilities syntactically based on C++'s since the introduction of <a href="/wiki/Java_Platform,_Standard_Edition" title="Java Platform, Standard Edition">J2SE</a> 5.0.</p>/n<p><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> 2.0, <a href="/wiki/Chrome_programming_language" class="mw-redirect" title="Chrome programming language">Oxygene 1.5</a> (also known as Chrome) and <a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET 2005</a> have constructs that take advantage of the support for generics present in the <a href="/wiki/.NET_Framework" title=".NET Framework">Microsoft .NET Framework</a> since version 2.0.</p>/n<h4><span class="mw-headline" id="Generics_in_Ada">Generics in Ada</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=4" title="Edit section: Generics in Ada">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> has had generics since it was first designed in 1977–1980. The standard library uses generics to provide many services. Ada 2005 adds a comprehensive generic container library to the standard library, which was inspired by C++'s <a href="/wiki/Standard_template_library" class="mw-redirect" title="Standard template library">standard template library</a>.</p>/n<p>A <i>generic unit</i> is a package or a subprogram that takes one or more <i>generic formal parameters</i>.</p>/n<p>A <i>generic formal parameter</i> is a value, a variable, a constant, a type, a subprogram, or even an instance of another, designated, generic unit. For generic formal types, the syntax distinguishes between discrete, floating-point, fixed-point, access (pointer) types, etc. Some formal parameters can have default values.</p>/n<p>To <i>instantiate</i> a generic unit, the programmer passes <i>actual</i> parameters for each formal. The generic instance then behaves just like any other unit. It is possible to instantiate generic units at <a href="/wiki/Run_time_(program_lifecycle_phase)" title="Run time (program lifecycle phase)">run-time</a>, for example inside a loop.</p>/n<h5><span class="mw-headline" id="Example">Example</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=5" title="Edit section: Example">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>The specification of a generic package:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n <span class="kd">generic</span>/n    <span class="n">Max_Size</span> <span class="p">:</span> <span class="kt">Natural</span><span class="p">;</span> <span class="c1">-- a generic formal value</span>/n    <span class="kd">type</span> <span class="kt">Element_Type</span> <span class="kr">is</span> <span class="kd">private</span><span class="p">;</span> <span class="c1">-- a generic formal type; accepts any nonlimited type</span>/n <span class="kd">package</span> <span class="nc">Stacks</span> <span class="kr">is</span>/n    <span class="kd">type</span> <span class="kt">Size_Type</span> <span class="kr">is</span> <span class="kr">range</span> <span class="mi">0</span> <span class="p">..</span> <span class="n">Max_Size</span><span class="p">;</span>/n    <span class="kd">type</span> <span class="kt">Stack</span> <span class="kr">is</span> <span class="kr">limited</span> <span class="kd">private</span><span class="p">;</span>/n    <span class="kd">procedure</span> <span class="nf">Create</span> <span class="p">(</span><span class="nv">S</span> <span class="p">: </span><span class="nv">out</span> <span class="nv">Stack</span><span class="p">;</span>/n                      <span class="nv">Initial_Size</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Size_Type</span> <span class="p">:=</span> <span class="nv">Max_Size</span><span class="p">);</span>/n    <span class="kd">procedure</span> <span class="nf">Push</span> <span class="p">(</span><span class="nv">Into</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">out</span> <span class="nv">Stack</span><span class="p">;</span> <span class="nv">Element</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Element_Type</span><span class="p">);</span>/n    <span class="kd">procedure</span> <span class="nf">Pop</span> <span class="p">(</span><span class="nv">From</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">out</span> <span class="nv">Stack</span><span class="p">;</span> <span class="nv">Element</span> <span class="p">: </span><span class="nv">out</span> <span class="nv">Element_Type</span><span class="p">);</span>/n    <span class="n">Overflow</span> <span class="p">:</span> <span class="kr">exception</span><span class="p">;</span>/n    <span class="n">Underflow</span> <span class="p">:</span> <span class="kr">exception</span><span class="p">;</span>/n <span class="kd">private</span>/n    <span class="kd">subtype</span> <span class="kt">Index_Type</span> <span class="kr">is</span> <span class="n">Size_Type</span> <span class="kr">range</span> <span class="mi">1</span> <span class="p">..</span> <span class="n">Max_Size</span><span class="p">;</span>/n    <span class="kd">type</span> <span class="kt">Vector</span> <span class="kr">is</span> <span class="kr">array</span> <span class="p">(</span><span class="kt">Index_Type</span> <span class="kr">range</span> <span class="p">&lt;&gt;)</span> <span class="kr">of</span> <span class="n">Element_Type</span><span class="p">;</span>/n    <span class="kd">type</span> <span class="kt">Stack</span> <span class="p">(</span><span class="nv">Allocated_Size</span> <span class="p">: </span><span class="nv">Size_Type</span> <span class="p">:=</span> <span class="nv">0</span><span class="p">)</span> <span class="kr">is</span> <span class="kr">record</span>/n       <span class="n">Top</span> <span class="p">:</span> <span class="n">Index_Type</span><span class="p">;</span>/n       <span class="n">Storage</span> <span class="p">:</span> <span class="n">Vector</span> <span class="p">(</span><span class="mi">1</span> <span class="p">..</span> <span class="n">Allocated_Size</span><span class="p">);</span>/n    <span class="kr">end record</span><span class="p">;</span>/n <span class="kr">end</span> <span class="nf">Stacks</span><span class="p">;</span>/n</pre></div>/n<p>Instantiating the generic package:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n <span class="kd">type</span> <span class="kt">Bookmark_Type</span> <span class="kr">is</span> <span class="kr">new</span> <span class="kt">Natural</span><span class="p">;</span>/n <span class="c1">-- records a location in the text document we are editing</span>/n/n <span class="kd">package</span> <span class="nc">Bookmark_Stacks</span> <span class="kr">is new</span> <span class="nc">Stacks</span> <span class="p">(</span><span class="nv">Max_Size</span> <span class="p">=&gt;</span> 20<span class="p">,</span>/n                                        <span class="nv">Element_Type</span> <span class="p">=&gt;</span> Bookmark_Type<span class="p">);</span>/n <span class="c1">-- Allows the user to jump between recorded locations in a document</span>/n</pre></div>/n<p>Using an instance of a generic package:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n <span class="kd">type</span> <span class="kt">Document_Type</span> <span class="kr">is</span> <span class="kr">record</span>/n    <span class="n">Contents</span> <span class="p">:</span> <span class="n">Ada</span><span class="p">.</span><span class="n">Strings</span><span class="p">.</span><span class="n">Unbounded</span><span class="p">.</span><span class="n">Unbounded_String</span><span class="p">;</span>/n    <span class="n">Bookmarks</span> <span class="p">:</span> <span class="n">Bookmark_Stacks</span><span class="p">.</span><span class="n">Stack</span><span class="p">;</span>/n <span class="kr">end record</span><span class="p">;</span>/n/n <span class="kd">procedure</span> <span class="nf">Edit</span> <span class="p">(</span><span class="nv">Document_Name</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">String</span><span class="p">)</span> <span class="kr">is</span>/n   <span class="n">Document</span> <span class="p">:</span> <span class="n">Document_Type</span><span class="p">;</span>/n <span class="kr">begin</span>/n   <span class="c1">-- Initialise the stack of bookmarks:</span>/n   <span class="n">Bookmark_Stacks</span><span class="p">.</span><span class="n">Create</span> <span class="p">(</span><span class="n">S</span> <span class="p">=&gt;</span> <span class="n">Document</span><span class="p">.</span><span class="n">Bookmarks</span><span class="p">,</span> <span class="n">Initial_Size</span> <span class="p">=&gt;</span> <span class="mi">10</span><span class="p">);</span>/n   <span class="c1">-- Now, open the file Document_Name and read it in...</span>/n <span class="kr">end</span> <span class="nf">Edit</span><span class="p">;</span>/n</pre></div>/n<h5><span class="mw-headline" id="Advantages_and_limitations">Advantages and limitations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=6" title="Edit section: Advantages and limitations">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>The language syntax allows precise specification of constraints on generic formal parameters. For example, it is possible to specify that a generic formal type will only accept a modular type as the actual. It is also possible to express constraints <i>between</i> generic formal parameters; for example:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n <span class="kd">generic</span>/n    <span class="kd">type</span> <span class="kt">Index_Type</span> <span class="kr">is</span> <span class="p">(&lt;&gt;);</span> <span class="c1">-- must be a discrete type</span>/n    <span class="kd">type</span> <span class="kt">Element_Type</span> <span class="kr">is</span> <span class="kd">private</span><span class="p">;</span> <span class="c1">-- can be any nonlimited type</span>/n    <span class="kd">type</span> <span class="kt">Array_Type</span> <span class="kr">is</span> <span class="kr">array</span> <span class="p">(</span><span class="kt">Index_Type</span> <span class="kr">range</span> <span class="p">&lt;&gt;)</span> <span class="kr">of</span> <span class="n">Element_Type</span><span class="p">;</span>/n</pre></div>/n<p>In this example, Array_Type is constrained by both Index_Type and Element_Type. When instantiating the unit, the programmer must pass an actual array type that satisfies these constraints.</p>/n<p>The disadvantage of this fine-grained control is a complicated syntax, but, because all generic formal parameters are completely defined in the specification, the <a href="/wiki/Compiler" title="Compiler">compiler</a> can instantiate generics without looking at the body of the generic.</p>/n<p>Unlike C++, Ada does not allow specialised generic instances, and requires that all generics be instantiated explicitly. These rules have several consequences:</p>/n<ul>/n<li>the compiler can implement <i>shared generics</i>: the object code for a generic unit can be shared between all instances (unless the programmer requests inlining of subprograms, of course). As further consequences:/n<ul>/n<li>there is no possibility of code bloat (code bloat is common in C++ and requires special care, as explained below).</li>/n<li>it is possible to instantiate generics at run-time, as well as at compile time, since no new object code is required for a new instance.</li>/n<li>actual objects corresponding to a generic formal object are always considered to be nonstatic inside the generic; see <a href="https://en.wikibooks.org/wiki/Ada_Programming/Generics#Generic_formal_objects" class="extiw" title="wikibooks:Ada Programming/Generics">Generic formal objects</a> in the Wikibook for details and consequences.</li>/n</ul>/n</li>/n<li>all instances of a generic being exactly the same, it is easier to review and understand programs written by others; there are no "special cases" to take into account.</li>/n<li>all instantiations being explicit, there are no hidden instantiations that might make it difficult to understand the program.</li>/n<li>Ada does not permit "template metaprogramming", because it does not allow specialisations.</li>/n</ul>/n<h4><span id="Templates_in_C++"></span><span class="mw-headline" id="Templates_in_C.2B.2B">Templates in C++</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=7" title="Edit section: Templates in C++">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<div role="note" class="hatnote navigation-not-searchable">Main article: <a href="/wiki/Template_(C%2B%2B)" title="Template (C++)">Template (C++)</a></div>/n<p>C++ uses templates to enable generic programming techniques. The C++ Standard Library includes the <a href="/wiki/Standard_Template_Library" title="Standard Template Library">Standard Template Library</a> or STL that provides a framework of templates for common data structures and algorithms. Templates in C++ may also be used for <a href="/wiki/Template_metaprogramming" title="Template metaprogramming">template metaprogramming</a>, which is a way of pre-evaluating some of the code at compile-time rather than <a href="/wiki/Run_time_(program_lifecycle_phase)" title="Run time (program lifecycle phase)">run-time</a>. Using template specialization, C++ Templates are considered <a href="/wiki/Turing_complete" class="mw-redirect" title="Turing complete">Turing complete</a>.</p>/n<h5><span class="mw-headline" id="Technical_overview">Technical overview</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=8" title="Edit section: Technical overview">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>There are two kinds of templates: function templates and class templates. A <i>function template</i> is a pattern for creating ordinary functions based upon the parameterizing types supplied when instantiated. For example, the C++ Standard Template Library contains the function template <tt>max(x, y)</tt> that creates functions that return either <i>x</i> or <i>y,</i> whichever is larger. <tt>max()</tt> could be defined like this:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>/n<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span>/n<span class="p">{</span>/n    <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">?</span> <span class="nl">y</span> <span class="p">:</span> <span class="n">x</span><span class="p">;</span>/n<span class="p">}</span>/n</pre></div>/n<p><i>Specializations</i> of this function template, instantiations with specific types, can be called just like an ordinary function:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>   <span class="c1">// outputs 7</span>/n</pre></div>/n<p>The compiler examines the arguments used to call <tt>max</tt> and determines that this is a call to <tt>max(int, int)</tt>. It then instantiates a version of the function where the parameterizing type <tt>T</tt> is <tt>int</tt>, making the equivalent of the following function:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>/n<span class="p">{</span>/n    <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">?</span> <span class="nl">y</span> <span class="p">:</span> <span class="n">x</span><span class="p">;</span>/n<span class="p">}</span>/n</pre></div>/n<p>This works whether the arguments <tt>x</tt> and <tt>y</tt> are integers, strings, or any other type for which the expression <tt>x &lt; y</tt> is sensible, or more specifically, for any type for which <tt>operator&lt;</tt> is defined. Common inheritance is not needed for the set of types that can be used, and so it is very similar to <a href="/wiki/Duck_typing#Templates_or_generic_types" title="Duck typing">duck typing</a>. A program defining a custom data type can use operator overloading to define the meaning of <tt>&lt;</tt> for that type, thus allowing its use with the <tt>max()</tt> function template. While this may seem a minor benefit in this isolated example, in the context of a comprehensive library like the STL it allows the programmer to get extensive functionality for a new data type, just by defining a few operators for it. Merely defining <tt>&lt;</tt> allows a type to be used with the standard <tt>sort()</tt>, <tt>stable_sort()</tt>, and <tt>binary_search()</tt> algorithms or to be put inside data structures such as <tt>set</tt>s, heaps, and associative arrays.</p>/n<p>C++ templates are completely <a href="/wiki/Type_safety" title="Type safety">type safe</a> at compile time. As a demonstration, the standard type <tt>complex</tt> does not define the <tt>&lt;</tt> operator, because there is no strict order on <a href="/wiki/Complex_number" title="Complex number">complex numbers</a>. Therefore, <tt>max(x, y)</tt> will fail with a compile error, if <i>x</i> and <i>y</i> are <tt>complex</tt> values. Likewise, other templates that rely on <tt>&lt;</tt> cannot be applied to <tt>complex</tt> data unless a comparison (in the form of a functor or function) is provided. E.g.: A <tt>complex</tt> cannot be used as key for a <tt>map</tt> unless a comparison is provided. Unfortunately, compilers historically generate somewhat esoteric, long, and unhelpful error messages for this sort of error. Ensuring that a certain object adheres to a <a href="/wiki/Protocol_(computer_science)" class="mw-redirect" title="Protocol (computer science)">method protocol</a> can alleviate this issue. Languages which use <tt>compare</tt> instead of <tt>&lt;</tt> can also use <tt>complex</tt> values as keys.</p>/n<p>The second kind of template, a <i>class template,</i> extends the same concept to classes. A class template specialization is a class. Class templates are often used to make generic containers. For example, the STL has a <a href="/wiki/Linked_list" title="Linked list">linked list</a> container. To make a linked list of integers, one writes <tt>list&lt;int&gt;</tt>. A list of strings is denoted <tt>list&lt;string&gt;</tt>. A <tt>list</tt> has a set of standard functions associated with it, that work for any compatible parameterizing types.</p>/n<h5><span class="mw-headline" id="Template_specialization">Template specialization</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=9" title="Edit section: Template specialization">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>A powerful feature of C++'s templates is <i>template specialization</i>. This allows alternative implementations to be provided based on certain characteristics of the parameterized type that is being instantiated. Template specialization has two purposes: to allow certain forms of optimization, and to reduce code bloat.</p>/n<p>For example, consider a <tt>sort()</tt> template function. One of the primary activities that such a function does is to swap or exchange the values in two of the container's positions. If the values are large (in terms of the number of bytes it takes to store each of them), then it is often quicker to first build a separate list of pointers to the objects, sort those pointers, and then build the final sorted sequence. If the values are quite small however it is usually fastest to just swap the values in-place as needed. Furthermore, if the parameterized type is already of some pointer-type, then there is no need to build a separate pointer array. Template specialization allows the template creator to write different implementations and to specify the characteristics that the parameterized type(s) must have for each implementation to be used.</p>/n<p>Unlike function templates, class templates can be <a href="/wiki/Partial_template_specialization" title="Partial template specialization">partially specialized</a>. That means that an alternate version of the class template code can be provided when some of the template parameters are known, while leaving other template parameters generic. This can be used, for example, to create a default implementation (the <i>primary specialization</i>) that assumes that copying a parameterizing type is expensive and then create partial specializations for types that are cheap to copy, thus increasing overall efficiency. Clients of such a class template just use specializations of it without needing to know whether the compiler used the primary specialization or some partial specialization in each case. Class templates can also be <i>fully specialized,</i> which means that an alternate implementation can be provided when all of the parameterizing types are known.</p>/n<h5><span class="mw-headline" id="Advantages_and_disadvantages">Advantages and disadvantages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=10" title="Edit section: Advantages and disadvantages">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>Some uses of templates, such as the <tt>max()</tt> function, were previously filled by function-like <a href="/wiki/Preprocessor" title="Preprocessor">preprocessor</a> <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macros</a> (a legacy of the <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a>). For example, here is a possible <tt>max()</tt> macro:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="cp">#define max(a,b) ((a) &lt; (b) ? (b) : (a))</span>/n</pre></div>/n<p>Macros are expanded by <a href="/wiki/Preprocessor" title="Preprocessor">preprocessor</a>, before compilation proper; templates are expanded at compile time. Macros are always expanded inline; templates can also be expanded as inline functions when the compiler deems it appropriate. Thus both function-like macros and function templates have no run-time overhead.</p>/n<p>However, templates are generally considered an improvement over macros for these purposes. Templates are type-safe. Templates avoid some of the common errors found in code that makes heavy use of function-like macros, such as evaluating parameters with side effects twice. Perhaps most importantly, templates were designed to be applicable to much larger problems than macros.</p>/n<p>There are three primary drawbacks to the use of templates: compiler support, poor error messages, and <a href="/wiki/Code_bloat" title="Code bloat">code bloat</a>. Many compilers historically have poor support for templates, thus the use of templates can make code somewhat less portable. Support may also be poor when a C++ compiler is being used with a <a href="/wiki/Linker_(computing)" title="Linker (computing)">linker</a> that is not C++-aware, or when attempting to use templates across <a href="/wiki/Library_(computer_science)#Shared_libraries" class="mw-redirect" title="Library (computer science)">shared library</a> boundaries. Most modern compilers however now have fairly robust and standard template support, and the new C++ standard, <a href="/wiki/C%2B%2B11" title="C++11">C++11</a>, further addresses these issues.</p>/n<p>Almost all compilers produce confusing, long, or sometimes unhelpful error messages when errors are detected in code that uses templates.<sup id="cite_ref-18" class="reference"><a href="#cite_note-18">[18]</a></sup> This can make templates difficult to develop.</p>/n<p>Finally, the use of templates requires the compiler to generate a separate <i>instance</i> of the templated class or function for every <a href="/wiki/Permutation" title="Permutation">permutation</a> of type parameters used with it. (This is necessary because types in C++ are not all the same size, and the sizes of data fields are important to how classes work.) So the indiscriminate use of templates can lead to <a href="/wiki/Code_bloat" title="Code bloat">code bloat</a>, resulting in excessively large executables. However, judicious use of template specialization and derivation can dramatically reduce such code bloat in some cases:</p>/n<blockquote class="templatequote">/n<p>So, can derivation be used to reduce the problem of code replicated because templates are used? This would involve deriving a template from an ordinary class. This technique proved successful in curbing code bloat in real use. People who do not use a technique like this have found that replicated code can cost megabytes of code space even in moderate size programs.</p>/n<div class="templatequotecite">— <cite><a href="/wiki/Bjarne_Stroustrup" title="Bjarne Stroustrup">Bjarne Stroustrup</a>, The Design and Evolution of C++, 1994<sup id="cite_ref-Stroustrup94Design_19-0" class="reference"><a href="#cite_note-Stroustrup94Design-19">[19]</a></sup></cite></div>/n</blockquote>/n<p>In simple cases templates can be transformed into generics (not causing code bloat) by creating a class getting a parameter derived from a type in compile time and wrapping a template around this class. It is a nice approach for creating generic heap-based containers.</p>/n<p>The extra instantiations generated by templates can also cause debuggers to have difficulty working gracefully with templates. For example, setting a debug breakpoint within a template from a source file may either miss setting the breakpoint in the actual instantiation desired or may set a breakpoint in every place the template is instantiated.</p>/n<p>Also, because the compiler needs to perform macro-like expansions of templates and generate different instances of them at compile time, the implementation source code for the templated class or function must be available (e.g. included in a header) to the code using it. Templated classes or functions, including much of the Standard Template Library (STL), if not included in header files, cannot be compiled. (This is in contrast to non-templated code, which may be compiled to binary, providing only a declarations header file for code using it.) This may be a disadvantage by exposing the implementing code, which removes some abstractions, and could restrict its use in closed-source projects.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (March 2009)">citation needed</span></a></i>]</sup></p>/n<h4><span class="mw-headline" id="Templates_in_D">Templates in D</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=11" title="Edit section: Templates in D">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>The <a href="/wiki/D_programming_language" class="mw-redirect" title="D programming language">D programming language</a> supports templates based in design on C++. Most C++ template idioms will carry over to D without alteration, but D adds some additional functionality:</p>/n<ul>/n<li>Template parameters in D are not restricted to just types and primitive values, but also allow arbitrary compile-time values (such as strings and struct literals), and aliases to arbitrary identifiers, including other templates or template instantiations.</li>/n<li>Template constraints and the <tt>static if</tt> statement provide an alternative to C++'s <a href="/wiki/Substitution_failure_is_not_an_error" title="Substitution failure is not an error">substitution failure is not an error</a> (SFINAE) mechanism, similar to <a href="/wiki/Concepts_(C%2B%2B)" title="Concepts (C++)">C++ concepts</a>.</li>/n<li>The <tt>is(...)</tt> expression allows speculative instantiation to verify an object's traits at compile time.</li>/n<li>The <tt>auto</tt> keyword and the <tt>typeof</tt> expression allow <a href="/wiki/Type_inference" title="Type inference">type inference</a> for variable declarations and function return values, which in turn allows "Voldemort types" (types which do not have a global name).<sup id="cite_ref-20" class="reference"><a href="#cite_note-20">[20]</a></sup></li>/n</ul>/n<p>Templates in D use a different syntax as in C++: whereas in C++ template parameters are wrapped in angular brackets (<tt>Template&lt;param1, param2&gt;</tt>), D uses an exclamation sign and parentheses: <tt>Template!(param1, param2)</tt>. This avoids the <a href="/wiki/Template_(C%2B%2B)#Advantages_and_disadvantages" title="Template (C++)">C++ parsing difficulties</a> due to ambiguity with comparison operators. If there is only one parameter, the parentheses can be omitted.</p>/n<p>Conventionally, D combines the above features to provide <a href="/wiki/Compile-time_polymorphism" class="mw-redirect" title="Compile-time polymorphism">compile-time polymorphism</a> using trait-based generic programming. For example, an input <a href="/wiki/Range_(computer_programming)#Range_as_an_alternative_to_iterator" title="Range (computer programming)">range</a> is defined as any type that satisfies the checks performed by <tt>isInputRange</tt>, which is defined as follows:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">template</span> <span class="n">isInputRange</span><span class="p">(</span><span class="n">R</span><span class="p">)</span>/n<span class="p">{</span>/n    <span class="k">enum</span> <span class="kt">bool</span> <span class="n">isInputRange</span> <span class="p">=</span> <span class="k">is</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span>/n    <span class="p">(</span><span class="k">inout</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>/n    <span class="p">{</span>/n        <span class="n">R</span> <span class="n">r</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">init</span><span class="p">;</span>     <span class="c1">// can define a range object</span>/n        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">empty</span><span class="p">)</span> <span class="p">{}</span>   <span class="c1">// can test for empty</span>/n        <span class="n">r</span><span class="p">.</span><span class="n">popFront</span><span class="p">();</span>     <span class="c1">// can invoke popFront()</span>/n        <span class="k">auto</span> <span class="n">h</span> <span class="p">=</span> <span class="n">r</span><span class="p">.</span><span class="n">front</span><span class="p">;</span> <span class="c1">// can get the front of the range</span>/n    <span class="p">}));</span>/n<span class="p">}</span>/n</pre></div>/n<p>A function that accepts only input ranges can then use the above template in a template constraint:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">auto</span> <span class="n">fun</span><span class="p">(</span><span class="n">Range</span><span class="p">)(</span><span class="n">Range</span> <span class="n">range</span><span class="p">)</span>/n    <span class="k">if</span> <span class="p">(</span><span class="n">isInputRange</span><span class="p">!</span><span class="n">Range</span><span class="p">)</span>/n<span class="p">{</span>/n    <span class="c1">// ...</span>/n<span class="p">}</span>/n</pre></div>/n<h5><span class="mw-headline" id="Code_generation">Code generation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=12" title="Edit section: Code generation">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>In addition to template metaprogramming, D also provides several features to enable compile-time code generation:</p>/n<ul>/n<li>The <tt>import</tt> expression allows reading a file from disk and using its contents as a string expression.</li>/n<li>Compile-time reflection allows enumerating and inspecting declarations and their members during compilation.</li>/n<li>User-defined <a href="/wiki/Attribute_(computing)" title="Attribute (computing)">attributes</a> allow users to attach arbitrary identifiers to declarations, which can then be enumerated using compile-time reflection.</li>/n<li><a href="/wiki/Compile_time_function_execution" title="Compile time function execution">Compile-Time Function Execution</a> (CTFE) allows a subset of D (restricted to safe operations) to be interpreted during compilation.</li>/n<li>String mixins allow evaluating and compiling the contents of a string expression as D code that becomes part of the program.</li>/n</ul>/n<p>Combining the above allows generating code based on existing declarations. For example, D serialization frameworks can enumerate a type's members and generate specialized functions for each serialized type to perform serialization and deserialization. User-defined attributes could further indicate serialization rules.</p>/n<p>The <tt>import</tt> expression and compile-time function execution also allow efficiently implementing <a href="/wiki/Domain-specific_language" title="Domain-specific language">domain-specific languages</a>. For example, given a function that takes a string containing an HTML template and returns equivalent D source code, it is possible to use it in the following way:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="c1">// Import the contents of example.htt as a string manifest constant.</span>/n<span class="k">enum</span> <span class="n">htmlTemplate</span> <span class="p">=</span> <span class="k">import</span><span class="p">(</span><span class="s">"example.htt"</span><span class="p">);</span>/n/n<span class="c1">// Transpile the HTML template to D code.</span>/n<span class="k">enum</span> <span class="n">htmlDCode</span> <span class="p">=</span> <span class="n">htmlTemplateToD</span><span class="p">(</span><span class="n">htmlTemplate</span><span class="p">);</span>/n/n<span class="c1">// Paste the contents of htmlDCode as D code.</span>/n<span class="k">mixin</span><span class="p">(</span><span class="n">htmlDCode</span><span class="p">);</span>/n</pre></div>/n<h4><span class="mw-headline" id="Genericity_in_Eiffel">Genericity in Eiffel</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=13" title="Edit section: Genericity in Eiffel">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>Generic classes have been a part of <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a> since the original method and language design. The foundation publications of Eiffel,<sup id="cite_ref-21" class="reference"><a href="#cite_note-21">[21]</a></sup><sup id="cite_ref-22" class="reference"><a href="#cite_note-22">[22]</a></sup> use the term <i>genericity</i> to describe the creation and use of generic classes.</p>/n<h5><span id="Basic/Unconstrained_genericity"></span><span class="mw-headline" id="Basic.2FUnconstrained_genericity">Basic/Unconstrained genericity</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=14" title="Edit section: Basic/Unconstrained genericity">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>Generic classes are declared with their class name and a list of one or more <i>formal generic parameters</i>. In the following code, class <code lang="Eiffel" xml:lang="Eiffel">LIST</code> has one formal generic parameter <code lang="Eiffel" xml:lang="Eiffel">G</code></p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="kr">class</span>/n    <span class="nc">LIST</span> <span class="o">[</span><span class="nc">G</span><span class="o">]</span>/n            <span class="p">...</span>/n<span class="kr">feature</span>   <span class="c1">-- Access</span>/n    <span class="n">item</span><span class="p">:</span> <span class="nc">G</span>/n            <span class="c1">-- The item currently pointed to by cursor</span>/n            <span class="p">...</span>/n<span class="kr">feature</span>   <span class="c1">-- Element change</span>/n    <span class="n">put</span> <span class="p">(</span><span class="n">new_item</span><span class="p">:</span> <span class="nc">G</span><span class="p">)</span>/n            <span class="c1">-- Add `new_item' at the end of the list</span>/n            <span class="p">...</span>/n</pre></div>/n<p>The formal generic parameters are placeholders for arbitrary class names that will be supplied when a declaration of the generic class is made, as shown in the two <i>generic derivations</i> below, where <code lang="Eiffel" xml:lang="Eiffel">ACCOUNT</code> and <code lang="Eiffel" xml:lang="Eiffel">DEPOSIT</code> are other class names. <code lang="Eiffel" xml:lang="Eiffel">ACCOUNT</code> and <code lang="Eiffel" xml:lang="Eiffel">DEPOSIT</code> are considered <i>actual generic parameters</i> as they provide real class names to substitute for <code lang="Eiffel" xml:lang="Eiffel">G</code> in actual use.</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n    <span class="n">list_of_accounts</span><span class="p">:</span> <span class="nc">LIST</span> <span class="o">[</span><span class="nc">ACCOUNT</span><span class="o">]</span>/n            <span class="c1">-- Account list</span>/n/n    <span class="n">list_of_deposits</span><span class="p">:</span> <span class="nc">LIST</span> <span class="o">[</span><span class="nc">DEPOSIT</span><span class="o">]</span>/n            <span class="c1">-- Deposit list</span>/n</pre></div>/n<p>Within the Eiffel type system, although class <code lang="Eiffel" xml:lang="Eiffel">LIST [G]</code> is considered a class, it is not considered a type. However, a generic derivation of <code lang="Eiffel" xml:lang="Eiffel">LIST [G]</code> such as <code lang="Eiffel" xml:lang="Eiffel">LIST [ACCOUNT]</code> is considered a type.</p>/n<h5><span class="mw-headline" id="Constrained_genericity">Constrained genericity</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=15" title="Edit section: Constrained genericity">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>For the list class shown above, an actual generic parameter substituting for <code lang="Eiffel" xml:lang="Eiffel">G</code> can be any other available class. To constrain the set of classes from which valid actual generic parameters can be chosen, a <i>generic constraint</i> can be specified. In the declaration of class <code lang="Eiffel" xml:lang="Eiffel">SORTED_LIST</code> below, the generic constraint dictates that any valid actual generic parameter will be a class that inherits from class <code lang="Eiffel" xml:lang="Eiffel">COMPARABLE</code>. The generic constraint ensures that elements of a <code lang="Eiffel" xml:lang="Eiffel">SORTED_LIST</code> can in fact be sorted.</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="kr">class</span>/n    <span class="nc">SORTED_LIST</span> <span class="o">[</span><span class="nc">G</span> <span class="o">-&gt;</span> <span class="nc">COMPARABLE</span><span class="o">]</span>/n</pre></div>/n<h4><span class="mw-headline" id="Generics_in_Java">Generics in Java</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=16" title="Edit section: Generics in Java">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<div role="note" class="hatnote navigation-not-searchable">Main article: <a href="/wiki/Generics_in_Java" title="Generics in Java">Generics in Java</a></div>/n<p>Support for the <i>generics</i>, or "containers-of-type-T" was added to the <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java programming language</a> in 2004 as part of J2SE 5.0. In Java, generics are only checked at compile time for type correctness. The generic type information is then removed via a process called <a href="/wiki/Type_erasure" title="Type erasure">type erasure</a>, to maintain compatibility with old JVM implementations, making it unavailable at runtime. For example, a <tt>List&lt;String&gt;</tt> is converted to the raw type <tt>List</tt>. The compiler inserts <a href="/wiki/Type_conversion" title="Type conversion">type casts</a> to convert the elements to the <tt>String</tt> type when they are retrieved from the list, reducing performance compared to other implementations such as C++ templates.</p>/n<h4><span id="Genericity_in_.NET_[C#,_VB.NET]"></span><span class="mw-headline" id="Genericity_in_.NET_.5BC.23.2C_VB.NET.5D">Genericity in .NET [C#, VB.NET]</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=17" title="Edit section: Genericity in .NET [C#, VB.NET]">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>Generics were added as part of <a href="/wiki/.NET_Framework#.NET_Framework_2.0" title=".NET Framework">.NET Framework 2.0</a> in November 2005, based on a research prototype from Microsoft Research started in 1999.<sup id="cite_ref-23" class="reference"><a href="#cite_note-23">[23]</a></sup> Although similar to generics in Java, .NET generics do not apply <a href="/wiki/Type_erasure" title="Type erasure">type erasure</a>, but implement generics as a first class mechanism in the runtime using <a href="/wiki/Reification_(computer_science)" title="Reification (computer science)">reification</a>. This design choice provides additional functionality, such as allowing <a href="/wiki/Reflection_(computer_science)" class="mw-redirect" title="Reflection (computer science)">reflection</a> with preservation of generic types, as well as alleviating some of the limitations of erasure (such as being unable to create generic arrays).<sup id="cite_ref-24" class="reference"><a href="#cite_note-24">[24]</a></sup><sup id="cite_ref-25" class="reference"><a href="#cite_note-25">[25]</a></sup> This also means that there is no performance hit from runtime <a href="/wiki/Type_conversion" title="Type conversion">casts</a> and normally expensive <a href="/wiki/Boxing_(computer_science)" class="mw-redirect" title="Boxing (computer science)">boxing conversions</a>. When primitive and value types are used as generic arguments, they get specialized implementations, allowing for efficient generic <a href="/wiki/Collection_class" class="mw-redirect" title="Collection class">collections</a> and methods. As in C++ and Java, nested generic types such as Dictionary&lt;string, List&lt;int&gt;&gt; are valid types, however are advised against for member signatures in code analysis design rules.<sup id="cite_ref-26" class="reference"><a href="#cite_note-26">[26]</a></sup></p>/n<p>.NET allows six varieties of generic type constraints using the <tt>where</tt> keyword including restricting generic types to be value types, to be classes, to have constructors, and to implement interfaces.<sup id="cite_ref-27" class="reference"><a href="#cite_note-27">[27]</a></sup> Below is an example with an interface constraint:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="lineno"> 1 </span><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>/n<span class="lineno"> 2 </span>/n<span class="lineno"> 3 </span><span class="k">class</span> <span class="nc">Sample</span>/n<span class="lineno"> 4 </span><span class="p">{</span>/n<span class="lineno"> 5 </span>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>/n<span class="lineno"> 6 </span>    <span class="p">{</span>/n<span class="lineno"> 7 </span>        <span class="kt">int</span><span class="p">[]</span> <span class="n">array</span> <span class="p">=</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">};</span>/n<span class="lineno"> 8 </span>        <span class="n">MakeAtLeast</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="n">array</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span> <span class="c1">// Change array to { 2, 2, 2, 3 }</span>/n<span class="lineno"> 9 </span>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span>/n<span class="lineno">10 </span>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="c1">// Print results.</span>/n<span class="lineno">11 </span>        <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>/n<span class="lineno">12 </span>    <span class="p">}</span>/n<span class="lineno">13 </span>/n<span class="lineno">14 </span>    <span class="k">static</span> <span class="k">void</span> <span class="n">MakeAtLeast</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span><span class="p">[]</span> <span class="n">list</span><span class="p">,</span> <span class="n">T</span> <span class="n">lowest</span><span class="p">)</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IComparable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span>/n<span class="lineno">15 </span>    <span class="p">{</span>/n<span class="lineno">16 </span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">list</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>/n<span class="lineno">17 </span>            <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">CompareTo</span><span class="p">(</span><span class="n">lowest</span><span class="p">)</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span>/n<span class="lineno">18 </span>                <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">lowest</span><span class="p">;</span>/n<span class="lineno">19 </span>    <span class="p">}</span>/n<span class="lineno">20 </span><span class="p">}</span>/n</pre></div>/n<p>The <tt>MakeAtLeast()</tt> method allows operation on arrays, with elements of generic type <tt>T</tt>. The method's type constraint indicates that the method is applicable to any type <tt>T</tt> that implements the generic <tt>IComparable&lt;T&gt;</tt> interface. This ensures a <a href="/wiki/Compile_time" title="Compile time">compile time</a> error, if the method is called if the type does not support comparison. The interface provides the generic method <tt>CompareTo(T)</tt>.</p>/n<p>The above method could also be written without generic types, simply using the non-generic <tt>Array</tt> type. However, since arrays are <a href="/wiki/Covariance_and_contravariance_(computer_science)" title="Covariance and contravariance (computer science)">contravariant</a>, the casting would not be <a href="/wiki/Type_safe" class="mw-redirect" title="Type safe">type safe</a>, and compiler may miss errors that would otherwise be caught while making use of the generic types. In addition, the method would need to access the array items as objects instead, and would require <a href="/wiki/Type_conversion" title="Type conversion">casting</a> to compare two elements. (For value types like types such as <tt>int</tt> this requires a <a href="/wiki/Boxing_(computer_science)" class="mw-redirect" title="Boxing (computer science)">boxing</a> conversion, although this can be worked around using the <tt>Comparer&lt;T&gt;</tt> class, as is done in the standard collection classes.)</p>/n<p>A notable behavior of static members in a generic .NET class is static member instantiation per run-time type (see example below).</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n    <span class="c1">//A generic class</span>/n    <span class="k">public</span> <span class="k">class</span> <span class="nc">GenTest</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>/n    <span class="p">{</span>/n        <span class="c1">//A static variable - will be created for each type on refraction</span>/n        <span class="k">static</span> <span class="n">CountedInstances</span> <span class="n">OnePerType</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CountedInstances</span><span class="p">();</span>/n/n        <span class="c1">//a data member</span>/n        <span class="k">private</span> <span class="n">T</span> <span class="n">mT</span><span class="p">;</span>/n/n        <span class="c1">//simple constructor</span>/n        <span class="k">public</span> <span class="nf">GenTest</span><span class="p">(</span><span class="n">T</span> <span class="n">pT</span><span class="p">)</span>/n        <span class="p">{</span>/n            <span class="n">mT</span> <span class="p">=</span> <span class="n">pT</span><span class="p">;</span>/n        <span class="p">}</span>/n    <span class="p">}</span>/n/n    <span class="c1">//a class</span>/n    <span class="k">public</span> <span class="k">class</span> <span class="nc">CountedInstances</span>/n    <span class="p">{</span>/n        <span class="c1">//Static variable - this will be incremented once per instance</span>/n        <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Counter</span><span class="p">;</span>/n/n        <span class="c1">//simple constructor</span>/n        <span class="k">public</span> <span class="nf">CountedInstances</span><span class="p">()</span>/n        <span class="p">{</span>/n            <span class="c1">//increase counter by one during object instantiation</span>/n            <span class="n">CountedInstances</span><span class="p">.</span><span class="n">Counter</span><span class="p">++;</span>/n        <span class="p">}</span>/n    <span class="p">}</span>/n/n  <span class="c1">//main code entry point</span>/n  <span class="c1">//at the end of execution, CountedInstances.Counter = 2</span>/n  <span class="n">GenTest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">g1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GenTest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">1</span><span class="p">);</span>/n  <span class="n">GenTest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">g11</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GenTest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">11</span><span class="p">);</span>/n  <span class="n">GenTest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">g111</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GenTest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">111</span><span class="p">);</span>/n  <span class="n">GenTest</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">g2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">GenTest</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;(</span><span class="m">1.0</span><span class="p">);</span>/n</pre></div>/n<h4><span class="mw-headline" id="Genericity_in_Delphi">Genericity in Delphi</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=18" title="Edit section: Genericity in Delphi">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p><a href="/wiki/Delphi_(programming_language)" title="Delphi (programming language)">Delphi's</a> Object Pascal dialect acquired generics in the Delphi 2007 release, initially only with the (now discontinued) .NET compiler before being added to the native code one in the Delphi 2009 release. The semantics and capabilities of Delphi generics are largely modelled on those had by generics in .NET 2.0, though the implementation is by necessity quite different. Here's a more or less direct translation of the first C# example shown above:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="k">program</span> <span class="n">Sample</span><span class="o">;</span>/n/n<span class="cm">{$APPTYPE CONSOLE}</span>/n/n<span class="k">uses</span>/n  <span class="n">Generics</span><span class="o">.</span><span class="n">Defaults</span><span class="o">;</span> <span class="c1">//for IComparer&lt;&gt;</span>/n/n<span class="k">type</span>/n  <span class="n">TUtils</span> <span class="o">=</span> <span class="k">class</span>/n    <span class="k">class</span> <span class="k">procedure</span> <span class="nf">MakeAtLeast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Arr</span><span class="o">:</span> <span class="n">TArray</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;;</span> <span class="k">const</span> <span class="n">Lowest</span><span class="o">:</span> <span class="n">T</span><span class="o">;</span>/n      <span class="n">Comparer</span><span class="o">:</span> <span class="n">IComparer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span><span class="o">;</span> <span class="n">overload</span><span class="o">;</span>/n    <span class="k">class</span> <span class="k">procedure</span> <span class="nf">MakeAtLeast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Arr</span><span class="o">:</span> <span class="n">TArray</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;;</span> <span class="k">const</span> <span class="n">Lowest</span><span class="o">:</span> <span class="n">T</span><span class="p">)</span><span class="o">;</span> <span class="n">overload</span><span class="o">;</span>/n  <span class="k">end</span><span class="o">;</span>/n/n<span class="k">class</span> <span class="k">procedure</span> <span class="nc">TUtils</span><span class="o">.</span><span class="nf">MakeAtLeast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Arr</span><span class="o">:</span> <span class="n">TArray</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;;</span> <span class="k">const</span> <span class="n">Lowest</span><span class="o">:</span> <span class="n">T</span><span class="o">;</span>/n  <span class="n">Comparer</span><span class="o">:</span> <span class="n">IComparer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span><span class="o">;</span>/n<span class="k">var</span>/n  <span class="n">I</span><span class="o">:</span> <span class="kt">Integer</span><span class="o">;</span>/n<span class="k">begin</span>/n  <span class="k">if</span> <span class="n">Comparer</span> <span class="o">=</span> <span class="k">nil</span> <span class="k">then</span> <span class="n">Comparer</span> <span class="o">:=</span> <span class="n">TComparer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;.</span><span class="kp">Default</span><span class="o">;</span>/n  <span class="k">for</span> <span class="n">I</span> <span class="o">:=</span> <span class="nb">Low</span><span class="p">(</span><span class="n">Arr</span><span class="p">)</span> <span class="k">to</span> <span class="nb">High</span><span class="p">(</span><span class="n">Arr</span><span class="p">)</span> <span class="k">do</span>/n    <span class="k">if</span> <span class="n">Comparer</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">Arr</span><span class="p">[</span><span class="n">I</span><span class="p">]</span><span class="o">,</span> <span class="n">Lowest</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">then</span>/n      <span class="n">Arr</span><span class="p">[</span><span class="n">I</span><span class="p">]</span> <span class="o">:=</span> <span class="n">Lowest</span><span class="o">;</span>/n<span class="k">end</span><span class="o">;</span>/n/n<span class="k">class</span> <span class="k">procedure</span> <span class="nc">TUtils</span><span class="o">.</span><span class="nf">MakeAtLeast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Arr</span><span class="o">:</span> <span class="n">TArray</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;;</span> <span class="k">const</span> <span class="n">Lowest</span><span class="o">:</span> <span class="n">T</span><span class="p">)</span><span class="o">;</span>/n<span class="k">begin</span>/n  <span class="n">MakeAtLeast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Arr</span><span class="o">,</span> <span class="n">Lowest</span><span class="o">,</span> <span class="k">nil</span><span class="p">)</span><span class="o">;</span>/n<span class="k">end</span><span class="o">;</span>/n/n<span class="k">var</span>/n  <span class="n">Ints</span><span class="o">:</span> <span class="n">TArray</span><span class="o">&lt;</span><span class="kt">Integer</span><span class="o">&gt;;</span>/n  <span class="n">Value</span><span class="o">:</span> <span class="kt">Integer</span><span class="o">;</span>/n<span class="k">begin</span>/n  <span class="n">Ints</span> <span class="o">:=</span> <span class="n">TArray</span><span class="o">&lt;</span><span class="kt">Integer</span><span class="o">&gt;.</span><span class="n">Create</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">;</span>/n  <span class="n">TUtils</span><span class="o">.</span><span class="n">MakeAtLeast</span><span class="o">&lt;</span><span class="kt">Integer</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Ints</span><span class="o">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">;</span>/n  <span class="k">for</span> <span class="n">Value</span> <span class="k">in</span> <span class="n">Ints</span> <span class="k">do</span>/n    <span class="nb">WriteLn</span><span class="p">(</span><span class="n">Value</span><span class="p">)</span><span class="o">;</span>/n  <span class="nb">ReadLn</span><span class="o">;</span>/n<span class="k">end</span><span class="o">.</span>/n</pre></div>/n<p>As with C#, methods as well as whole types can have one or more type parameters. In the example, TArray is a generic type (defined by the language) and MakeAtLeast a generic method. The available constraints are very similar to the available constraints in C#: any value type, any class, a specific class or interface, and a class with a parameterless constructor. Multiple constraints act as an additive union.</p>/n<h4><span class="mw-headline" id="Genericity_in_Free_Pascal">Genericity in Free Pascal</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=19" title="Edit section: Genericity in Free Pascal">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p><a href="/wiki/Free_Pascal" title="Free Pascal">Free Pascal</a> implemented generics before Delphi, and with different syntax and semantics. However, work is now underway to implement Delphi generics alongside native FPC ones (see <a rel="nofollow" class="external text" href="http://wiki.lazarus.freepascal.org/User_Changes_2.6.0">Wiki</a>). This allows Free Pascal programmers to use generics in whatever style they prefer.</p>/n<p>Delphi and Free Pascal example:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="c1">// Delphi style</span>/n<span class="k">unit</span> <span class="n">A</span><span class="o">;</span>/n/n<span class="cm">{$ifdef fpc}</span>/n  <span class="cm">{$mode delphi}</span>/n<span class="cm">{$endif}</span>/n/n<span class="k">interface</span>/n/n<span class="k">type</span>/n  <span class="n">TGenericClass</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">class</span>/n    <span class="k">function</span> <span class="nf">Foo</span><span class="p">(</span><span class="k">const</span> <span class="n">AValue</span><span class="o">:</span> <span class="n">T</span><span class="p">)</span><span class="o">:</span> <span class="n">T</span><span class="o">;</span>/n  <span class="k">end</span><span class="o">;</span>/n/n<span class="k">implementation</span>/n/n<span class="k">function</span> <span class="nf">TGenericClass</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;.</span><span class="n">Foo</span><span class="p">(</span><span class="k">const</span> <span class="n">AValue</span><span class="o">:</span> <span class="n">T</span><span class="p">)</span><span class="o">:</span> <span class="n">T</span><span class="o">;</span>/n<span class="k">begin</span>/n  <span class="bp">Result</span> <span class="o">:=</span> <span class="n">AValue</span> <span class="o">+</span> <span class="n">AValue</span><span class="o">;</span>/n<span class="k">end</span><span class="o">;</span>/n/n<span class="k">end</span><span class="o">.</span>/n/n<span class="c1">// Free Pascal's ObjFPC style</span>/n<span class="k">unit</span> <span class="n">B</span><span class="o">;</span>/n/n<span class="cm">{$ifdef fpc}</span>/n  <span class="cm">{$mode objfpc}</span>/n<span class="cm">{$endif}</span>/n/n<span class="k">interface</span>/n/n<span class="k">type</span>/n  <span class="n">generic</span> <span class="n">TGenericClass</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">class</span>/n    <span class="k">function</span> <span class="nf">Foo</span><span class="p">(</span><span class="k">const</span> <span class="n">AValue</span><span class="o">:</span> <span class="n">T</span><span class="p">)</span><span class="o">:</span> <span class="n">T</span><span class="o">;</span>/n  <span class="k">end</span><span class="o">;</span>/n/n<span class="k">implementation</span>/n/n<span class="k">function</span> <span class="nc">TGenericClass</span><span class="o">.</span><span class="nf">Foo</span><span class="p">(</span><span class="k">const</span> <span class="n">AValue</span><span class="o">:</span> <span class="n">T</span><span class="p">)</span><span class="o">:</span> <span class="n">T</span><span class="o">;</span>/n<span class="k">begin</span>/n  <span class="bp">Result</span> <span class="o">:=</span> <span class="n">AValue</span> <span class="o">+</span> <span class="n">AValue</span><span class="o">;</span>/n<span class="k">end</span><span class="o">;</span>/n/n<span class="k">end</span><span class="o">.</span>/n/n<span class="c1">// example usage, Delphi style</span>/n<span class="k">program</span> <span class="n">TestGenDelphi</span><span class="o">;</span>/n/n<span class="cm">{$ifdef fpc}</span>/n  <span class="cm">{$mode delphi}</span>/n<span class="cm">{$endif}</span>/n/n<span class="k">uses</span>/n  <span class="n">A</span><span class="o">,</span><span class="n">B</span><span class="o">;</span>/n/n<span class="k">var</span>/n  <span class="n">GC1</span><span class="o">:</span> <span class="n">A</span><span class="o">.</span><span class="n">TGenericClass</span><span class="o">&lt;</span><span class="kt">Integer</span><span class="o">&gt;;</span>/n  <span class="n">GC2</span><span class="o">:</span> <span class="n">B</span><span class="o">.</span><span class="n">TGenericClass</span><span class="o">&lt;</span><span class="k">String</span><span class="o">&gt;;</span>/n<span class="k">begin</span>/n  <span class="n">GC1</span> <span class="o">:=</span> <span class="n">A</span><span class="o">.</span><span class="n">TGenericClass</span><span class="o">&lt;</span><span class="kt">Integer</span><span class="o">&gt;.</span><span class="n">Create</span><span class="o">;</span>/n  <span class="n">GC2</span> <span class="o">:=</span> <span class="n">B</span><span class="o">.</span><span class="n">TGenericClass</span><span class="o">&lt;</span><span class="k">String</span><span class="o">&gt;.</span><span class="n">Create</span><span class="o">;</span>/n  <span class="nb">WriteLn</span><span class="p">(</span><span class="n">GC1</span><span class="o">.</span><span class="n">Foo</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span><span class="o">;</span> <span class="c1">// 200</span>/n  <span class="nb">WriteLn</span><span class="p">(</span><span class="n">GC2</span><span class="o">.</span><span class="n">Foo</span><span class="p">(</span><span class="s">'hello'</span><span class="p">))</span><span class="o">;</span> <span class="c1">// hellohello</span>/n  <span class="n">GC1</span><span class="o">.</span><span class="n">Free</span><span class="o">;</span>/n  <span class="n">GC2</span><span class="o">.</span><span class="n">Free</span><span class="o">;</span>/n<span class="k">end</span><span class="o">.</span>/n/n<span class="c1">// example usage, ObjFPC style</span>/n<span class="k">program</span> <span class="n">TestGenDelphi</span><span class="o">;</span>/n/n<span class="cm">{$ifdef fpc}</span>/n  <span class="cm">{$mode objfpc}</span>/n<span class="cm">{$endif}</span>/n/n<span class="k">uses</span>/n  <span class="n">A</span><span class="o">,</span><span class="n">B</span><span class="o">;</span>/n/n<span class="c1">// required in ObjFPC</span>/n<span class="k">type</span>/n  <span class="n">TAGenericClassInt</span> <span class="o">=</span> <span class="n">specialize</span> <span class="n">A</span><span class="o">.</span><span class="n">TGenericClass</span><span class="o">&lt;</span><span class="kt">Integer</span><span class="o">&gt;;</span>/n  <span class="n">TBGenericClassString</span> <span class="o">=</span> <span class="n">specialize</span> <span class="n">B</span><span class="o">.</span><span class="n">TGenericClass</span><span class="o">&lt;</span><span class="k">String</span><span class="o">&gt;;</span>/n<span class="k">var</span>/n  <span class="n">GC1</span><span class="o">:</span> <span class="n">TAGenericClassInt</span><span class="o">;</span>/n  <span class="n">GC2</span><span class="o">:</span> <span class="n">TBGenericClassString</span><span class="o">;</span>/n<span class="k">begin</span>/n  <span class="n">GC1</span> <span class="o">:=</span> <span class="n">TAGenericClassInt</span><span class="o">.</span><span class="n">Create</span><span class="o">;</span>/n  <span class="n">GC2</span> <span class="o">:=</span> <span class="n">TBGenericClassString</span><span class="o">.</span><span class="n">Create</span><span class="o">;</span>/n  <span class="nb">WriteLn</span><span class="p">(</span><span class="n">GC1</span><span class="o">.</span><span class="n">Foo</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span><span class="o">;</span> <span class="c1">// 200</span>/n  <span class="nb">WriteLn</span><span class="p">(</span><span class="n">GC2</span><span class="o">.</span><span class="n">Foo</span><span class="p">(</span><span class="s">'hello'</span><span class="p">))</span><span class="o">;</span> <span class="c1">// hellohello</span>/n  <span class="n">GC1</span><span class="o">.</span><span class="n">Free</span><span class="o">;</span>/n  <span class="n">GC2</span><span class="o">.</span><span class="n">Free</span><span class="o">;</span>/n<span class="k">end</span><span class="o">.</span>/n</pre></div>/n<h3><span class="mw-headline" id="Functional_languages">Functional languages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=20" title="Edit section: Functional languages">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<h4><span class="mw-headline" id="Genericity_in_Haskell">Genericity in Haskell</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=21" title="Edit section: Genericity in Haskell">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p>The <a href="/wiki/Type_class" title="Type class">type class</a> mechanism of <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> supports generic programming. Six of the predefined type classes in Haskell (including <tt>Eq</tt>, the types that can be compared for equality, and <tt>Show</tt>, the types whose values can be rendered as strings) have the special property of supporting <i>derived instances.</i> This means that a programmer defining a new type can state that this type is to be an instance of one of these special type classes, without providing implementations of the class methods as is usually necessary when declaring class instances. All the necessary methods will be "derived" – that is, constructed automatically – based on the structure of the type. For instance, the following declaration of a type of <a href="/wiki/Binary_tree" title="Binary tree">binary trees</a> states that it is to be an instance of the classes <tt>Eq</tt> and <tt>Show</tt>:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n<span class="kr">data</span> <span class="kt">BinTree</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Leaf</span> <span class="n">a</span> <span class="o">|</span> <span class="kt">Node</span> <span class="p">(</span><span class="kt">BinTree</span> <span class="n">a</span><span class="p">)</span> <span class="n">a</span> <span class="p">(</span><span class="kt">BinTree</span> <span class="n">a</span><span class="p">)</span>/n      <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>/n</pre></div>/n<p>This results in an equality function (<tt>==</tt>) and a string representation function (<tt>show</tt>) being automatically defined for any type of the form <tt>BinTree T</tt> provided that <tt>T</tt> itself supports those operations.</p>/n<p>The support for derived instances of <tt>Eq</tt> and <tt>Show</tt> makes their methods <tt>==</tt> and <tt>show</tt> generic in a qualitatively different way from parametrically polymorphic functions: these "functions" (more accurately, type-indexed families of functions) can be applied to values of various types, and although they behave differently for every argument type, little work is needed to add support for a new type. Ralf Hinze (2004) has shown that a similar effect can be achieved for user-defined type classes by certain programming techniques. Other researchers have proposed approaches to this and other kinds of genericity in the context of Haskell and extensions to Haskell (discussed below).</p>/n<h5><span class="mw-headline" id="PolyP">PolyP</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=22" title="Edit section: PolyP">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>PolyP was the first generic programming language extension to <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>. In PolyP, generic functions are called <i>polytypic</i>. The language introduces a special construct in which such polytypic functions can be defined via structural induction over the structure of the pattern functor of a regular datatype. Regular datatypes in PolyP are a subset of Haskell datatypes. A regular datatype t must be of <a href="/wiki/Kind_(type_theory)" title="Kind (type theory)">kind</a> <i>* → *</i>, and if <i>a</i> is the formal type argument in the definition, then all recursive calls to <i>t</i> must have the form <i>t a</i>. These restrictions rule out higher-kinded datatypes as well as nested datatypes, where the recursive calls are of a different form. The flatten function in PolyP is here provided as an example:</p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n   <span class="n">flatten</span> <span class="ow">::</span> <span class="kt">Regular</span> <span class="n">d</span> <span class="ow">=&gt;</span> <span class="n">d</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>/n   <span class="n">flatten</span> <span class="ow">=</span> <span class="n">cata</span> <span class="n">fl</span>/n/n   <span class="n">polytypic</span> <span class="n">fl</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>/n     <span class="kr">case</span> <span class="n">f</span> <span class="kr">of</span>/n       <span class="n">g</span><span class="o">+</span><span class="n">h</span> <span class="ow">-&gt;</span> <span class="n">either</span> <span class="n">fl</span> <span class="n">fl</span>/n       <span class="n">g</span><span class="o">*</span><span class="n">h</span> <span class="ow">-&gt;</span> <span class="nf">\</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">fl</span> <span class="n">x</span> <span class="o">++</span> <span class="n">fl</span> <span class="n">y</span>/n       <span class="nb">()</span> <span class="ow">-&gt;</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="kt">[]</span>/n       <span class="kt">Par</span> <span class="ow">-&gt;</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>/n       <span class="kt">Rec</span> <span class="ow">-&gt;</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span>/n       <span class="n">d</span><span class="o">@</span><span class="n">g</span> <span class="ow">-&gt;</span> <span class="n">concat</span> <span class="o">.</span> <span class="n">flatten</span> <span class="o">.</span> <span class="n">pmap</span> <span class="n">fl</span>/n       <span class="kt">Con</span> <span class="n">t</span> <span class="ow">-&gt;</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="kt">[]</span>/n/n   <span class="n">cata</span> <span class="ow">::</span> <span class="kt">Regular</span> <span class="n">d</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="kt">FunctorOf</span> <span class="n">d</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">d</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span>/n</pre></div>/n<h5><span class="mw-headline" id="Generic_Haskell">Generic Haskell</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=23" title="Edit section: Generic Haskell">edit</a><span class="mw-editsection-bracket">]</span></span></h5>/n<p>Generic Haskell is another extension to <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, developed at <a href="/wiki/Utrecht_University" title="Utrecht University">Utrecht University</a> in the <a href="/wiki/Netherlands" title="Netherlands">Netherlands</a>. The extensions it provides are:</p>/n<ul>/n<li><i>Type-indexed values</i> are defined as a value indexed over the various Haskell type constructors (unit, primitive types, sums, products, and user-defined type constructors). In addition, we can also specify the behaviour of a type-indexed values for a specific constructor using <i>constructor cases</i>, and reuse one generic definition in another using <i>default cases</i>.</li>/n</ul>/n<p>The resulting type-indexed value can be specialised to any type.</p>/n<ul>/n<li><i>Kind-indexed types</i> are types indexed over kinds, defined by giving a case for both <i>*</i> and <i>k → k'</i>. Instances are obtained by applying the kind-indexed type to a kind.</li>/n<li>Generic definitions can be used by applying them to a type or kind. This is called <i>generic application</i>. The result is a type or value, depending on which sort of generic definition is applied.</li>/n<li><i>Generic abstraction</i> enables generic definitions be defined by abstracting a type parameter (of a given kind).</li>/n<li><i>Type-indexed types</i> are types that are indexed over the type constructors. These can be used to give types to more involved generic values. The resulting type-indexed types can be specialised to any type.</li>/n</ul>/n<p>As an example, the equality function in Generic Haskell:<sup id="cite_ref-28" class="reference"><a href="#cite_note-28">[28]</a></sup></p>/n<div class="mw-highlight mw-content-ltr" dir="ltr">/n<pre>/n   <span class="kr">type</span> <span class="kt">Eq</span> <span class="p">{[</span> <span class="o">*</span> <span class="p">]}</span> <span class="n">t1</span> <span class="n">t2</span> <span class="ow">=</span> <span class="n">t1</span> <span class="ow">-&gt;</span> <span class="n">t2</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>/n   <span class="kr">type</span> <span class="kt">Eq</span> <span class="p">{[</span> <span class="n">k</span> <span class="ow">-&gt;</span> <span class="n">l</span> <span class="p">]}</span> <span class="n">t1</span> <span class="n">t2</span> <span class="ow">=</span> <span class="n">forall</span> <span class="n">u1</span> <span class="n">u2</span><span class="o">.</span> <span class="kt">Eq</span> <span class="p">{[</span> <span class="n">k</span> <span class="p">]}</span> <span class="n">u1</span> <span class="n">u2</span> <span class="ow">-&gt;</span> <span class="kt">Eq</span> <span class="p">{[</span> <span class="n">l</span> <span class="p">]}</span> <span class="p">(</span><span class="n">t1</span> <span class="n">u1</span><span class="p">)</span> <span class="p">(</span><span class="n">t2</span> <span class="n">u2</span><span class="p">)</span>/n/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="n">t</span> <span class="ow">::</span> <span class="n">k</span> <span class="o">|</span><span class="p">}</span> <span class="ow">::</span> <span class="kt">Eq</span> <span class="p">{[</span> <span class="n">k</span> <span class="p">]}</span> <span class="n">t</span> <span class="n">t</span>/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="kt">Unit</span> <span class="o">|</span><span class="p">}</span> <span class="kr">_</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">True</span>/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="kt">:+:</span> <span class="o">|</span><span class="p">}</span> <span class="n">eqA</span> <span class="n">eqB</span> <span class="p">(</span><span class="kt">Inl</span> <span class="n">a1</span><span class="p">)</span> <span class="p">(</span><span class="kt">Inl</span> <span class="n">a2</span><span class="p">)</span> <span class="ow">=</span> <span class="n">eqA</span> <span class="n">a1</span> <span class="n">a2</span>/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="kt">:+:</span> <span class="o">|</span><span class="p">}</span> <span class="n">eqA</span> <span class="n">eqB</span> <span class="p">(</span><span class="kt">Inr</span> <span class="n">b1</span><span class="p">)</span> <span class="p">(</span><span class="kt">Inr</span> <span class="n">b2</span><span class="p">)</span> <span class="ow">=</span> <span class="n">eqB</span> <span class="n">b1</span> <span class="n">b2</span>/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="kt">:+:</span> <span class="o">|</span><span class="p">}</span> <span class="n">eqA</span> <span class="n">eqB</span> <span class="kr">_</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">False</span>/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="kt">:*:</span> <span class="o">|</span><span class="p">}</span> <span class="n">eqA</span> <span class="n">eqB</span> <span class="p">(</span><span class="n">a1</span> <span class="kt">:*:</span> <span class="n">b1</span><span class="p">)</span> <span class="p">(</span><span class="n">a2</span> <span class="kt">:*:</span> <span class="n">b2</span><span class="p">)</span> <span class="ow">=</span> <span class="n">eqA</span> <span class="n">a1</span> <span class="n">a2</span> <span class="o">&amp;&amp;</span> <span class="n">eqB</span> <span class="n">b1</span> <span class="n">b2</span>/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="kt">Int</span> <span class="o">|</span><span class="p">}</span> <span class="ow">=</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span>/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="kt">Char</span> <span class="o">|</span><span class="p">}</span> <span class="ow">=</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span>/n   <span class="n">eq</span> <span class="p">{</span><span class="o">|</span> <span class="kt">Bool</span> <span class="o">|</span><span class="p">}</span> <span class="ow">=</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span>/n</pre></div>/n<h4><span class="mw-headline" id="Clean">Clean</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=24" title="Edit section: Clean">edit</a><span class="mw-editsection-bracket">]</span></span></h4>/n<p><a href="/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a> offers generic programming based PolyP and the generic Haskell as supported by the GHC&gt;=6.0. It parametrizes by kind as those but offers overloading.</p>/n<h3><span class="mw-headline" id="Other_languages">Other languages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=25" title="Edit section: Other languages">edit</a><span class="mw-editsection-bracket">]</span></span></h3>/n<p>The <a href="/wiki/ML_programming_language" class="mw-redirect" title="ML programming language">ML</a> family of programming languages support generic programming through <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)">parametric polymorphism</a> and generic <a href="/wiki/Module_(programming)" class="mw-redirect" title="Module (programming)">modules</a> called <i>functors.</i> Both <a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a> and <a href="/wiki/OCaml" title="OCaml">OCaml</a> provide functors, which are similar to class templates and to Ada's generic packages. <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> syntactic abstractions also have a connection to genericity – these are in fact a superset of templating à la C++.</p>/n<p>A <a href="/wiki/Verilog" title="Verilog">Verilog</a> module may take one or more parameters, to which their actual values are assigned upon the instantiation of the module. One example is a generic <a href="/wiki/Hardware_register" title="Hardware register">register</a> array where the array width is given via a parameter. Such the array, combined with a generic wire vector, can make a generic buffer or memory module with an arbitrary bit width out of a single module implementation.<sup id="cite_ref-29" class="reference"><a href="#cite_note-29">[29]</a></sup></p>/n<p><a href="/wiki/VHDL" title="VHDL">VHDL</a>, being derived from Ada, also have generic ability.</p>/n<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=26" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<ul>/n<li><a href="/wiki/Concept_(generic_programming)" title="Concept (generic programming)">Concept (generic programming)</a></li>/n<li><a href="/wiki/Partial_evaluation" title="Partial evaluation">Partial evaluation</a></li>/n<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template metaprogramming</a></li>/n<li><a href="/wiki/Type_polymorphism" class="mw-redirect" title="Type polymorphism">Type polymorphism</a></li>/n</ul>/n<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=27" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<div class="reflist" style="list-style-type: decimal;">/n<div class="mw-references-wrap mw-references-columns">/n<ol class="references">/n<li id="cite_note-Lee2008-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-Lee2008_1-0">^</a></b></span> <span class="reference-text"><cite class="citation book">Lee, Kent D. (15 December 2008). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=OuW5dC2O99AC&amp;pg=PA9"><i>Programming Languages: An Active Learning Approach</i></a>. Springer Science &amp; Business Media. pp.&#160;9–10. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-0-387-79422-8" title="Special:BookSources/978-0-387-79422-8">978-0-387-79422-8</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.aufirst=Kent+D.&amp;rft.aulast=Lee&amp;rft.btitle=Programming+Languages%3A+An+Active+Learning+Approach&amp;rft.date=2008-12-15&amp;rft.genre=book&amp;rft.isbn=978-0-387-79422-8&amp;rft.pages=9-10&amp;rft.pub=Springer+Science+%26+Business+Media&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DOuW5dC2O99AC%26pg%3DPA9&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><cite class="citation conference">Milner, R.; Morris, L.; Newey, M. (1975). "A Logic for Computable Functions with Reflexive and Polymorphic Types". <i>Proceedings of the Conference on Proving and Improving Programs</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.atitle=A+Logic+for+Computable+Functions+with+Reflexive+and+Polymorphic+Types&amp;rft.au=Milner%2C+R.&amp;rft.au=Morris%2C+L.&amp;rft.au=Newey%2C+M.&amp;rft.btitle=Proceedings+of+the+Conference+on+Proving+and+Improving+Programs&amp;rft.date=1975&amp;rft.genre=conference&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment"><code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> requires <code style="color:inherit; border:inherit; padding:inherit;">|url=</code> (<a href="/wiki/Help:CS1_errors#accessdate_missing_url" title="Help:CS1 errors">help</a>)</span></span></li>/n<li id="cite_note-GoF-3"><span class="mw-cite-backlink">^ <a href="#cite_ref-GoF_3-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-GoF_3-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite id="CITEREFGammaHelmJohnsonVlissides1994" class="citation book">Gamma, Erich; Helm, Richard; Johnson, Ralph; Vlissides, John (1994). <i>Design Patterns</i>. Addison-Wesley. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-201-63361-2" title="Special:BookSources/0-201-63361-2">0-201-63361-2</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=Helm%2C+Richard&amp;rft.au=Johnson%2C+Ralph&amp;rft.au=Vlissides%2C+John&amp;rft.aufirst=Erich&amp;rft.aulast=Gamma&amp;rft.btitle=Design+Patterns&amp;rft.date=1994&amp;rft.genre=book&amp;rft.isbn=0-201-63361-2&amp;rft.pub=Addison-Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-FOOTNOTEMusserStepanov1989-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-FOOTNOTEMusserStepanov1989_4-0">^</a></b></span> <span class="reference-text"><a href="#CITEREFMusserStepanov1989">Musser &amp; Stepanov 1989</a>.</span></li>/n<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><cite class="citation book">Musser, David R.; Stepanov, Alexander A. <a rel="nofollow" class="external text" href="http://stepanovpapers.com/genprog.pdf"><i>Generic Programming</i></a> <span style="font-size:85%;">(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=Musser%2C+David+R.&amp;rft.au=Stepanov%2C+Alexander+A.&amp;rft.btitle=Generic+Programming&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fstepanovpapers.com%2Fgenprog.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text"><cite class="citation book">Alexander Stepanov; Paul McJones (June 19, 2009). <i>Elements of Programming</i>. Addison-Wesley Professional. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-0-321-63537-2" title="Special:BookSources/978-0-321-63537-2">978-0-321-63537-2</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=Alexander+Stepanov&amp;rft.au=Paul+McJones&amp;rft.btitle=Elements+of+Programming&amp;rft.date=2009-06-19&amp;rft.genre=book&amp;rft.isbn=978-0-321-63537-2&amp;rft.pub=Addison-Wesley+Professional&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><cite class="citation journal">Musser, David R.; Stepanov, Alexander A. <a rel="nofollow" class="external text" href="http://dl.acm.org/citation.cfm?doid=317500.317529">"A library of generic algorithms in Ada"</a>. <i>Proceedings of the 1987 annual ACM SIGAda international conference on Ada</i>: 216–225.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.atitle=A+library+of+generic+algorithms+in+Ada&amp;rft.au=Musser%2C+David+R.&amp;rft.au=Stepanov%2C+Alexander+A.&amp;rft.genre=article&amp;rft.jtitle=Proceedings+of+the+1987+annual+ACM+SIGAda+international+conference+on+Ada&amp;rft.pages=216-225&amp;rft_id=http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fdoid%3D317500.317529&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text">Alexander Stepanov and Meng Lee: The Standard Template Library. HP Laboratories Technical Report 95-11(R.1), 14 November 1995</span></li>/n<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text">Matthew H. Austern: Generic programming and the STL: using and extending the C++ Standard Template Library. Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA 1998</span></li>/n<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text">Jeremy G. Siek, Lie-Quan Lee, Andrew Lumsdaine: The Boost Graph Library: User Guide and Reference Manual. Addison-Wesley 2001</span></li>/n<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><cite class="citation book">Stepanov, Alexander. <a rel="nofollow" class="external text" href="http://stepanovpapers.com/history%20of%20STL.pdf"><i>Short History of STL</i></a> <span style="font-size:85%;">(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=Stepanov%2C+Alexander&amp;rft.btitle=Short+History+of+STL&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fstepanovpapers.com%2Fhistory%2520of%2520STL.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-stroustrup2007-12"><span class="mw-cite-backlink">^ <a href="#cite_ref-stroustrup2007_12-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-stroustrup2007_12-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation book">Stroustrup, Bjarne. <a rel="nofollow" class="external text" href="http://www.stroustrup.com/hopl-almost-final.pdf"><i>Evolving a language in and for the real world: C++ 1991-2006</i></a> <span style="font-size:85%;">(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=Stroustrup%2C+Bjarne&amp;rft.btitle=Evolving+a+language+in+and+for+the+real+world%3A+C%2B%2B+1991-2006&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.stroustrup.com%2Fhopl-almost-final.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-stepanov2011-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-stepanov2011_13-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Lo Russo, Graziano. <a rel="nofollow" class="external text" href="http://www.stlport.org/resources/StepanovUSA.html">"An Interview with A. Stepanov"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.aufirst=Graziano&amp;rft.aulast=Lo+Russo&amp;rft.btitle=An+Interview+with+A.+Stepanov&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.stlport.org%2Fresources%2FStepanovUSA.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><cite class="citation book">Roland Backhouse; Patrik Jansson; Johan Jeuring; Lambert Meertens (1999). <a rel="nofollow" class="external text" href="http://www.cse.chalmers.se/~patrikj/poly/afp98/genprogintro.pdf"><i>"Generic Programming — an Introduction"</i></a> <span style="font-size:85%;">(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=Johan+Jeuring&amp;rft.au=Lambert+Meertens&amp;rft.au=Patrik+Jansson&amp;rft.au=Roland+Backhouse&amp;rft.btitle=%22Generic+Programming+%E2%80%94+an+Introduction%22&amp;rft.date=1999&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.cse.chalmers.se%2F~patrikj%2Fpoly%2Fafp98%2Fgenprogintro.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><cite class="citation web">Lämmel, Ralf; Peyton Jones, Simon. <a rel="nofollow" class="external text" href="https://www.microsoft.com/en-us/research/wp-content/uploads/2003/01/hmap.pdf">"Scrap Your Boilerplate: A Practical Design Pattern for Generic Programming"</a> <span style="font-size:85%;">(PDF)</span>. Microsoft<span class="reference-accessdate">. Retrieved <span class="nowrap">16 October</span> 2016</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=L%C3%A4mmel%2C+Ralf&amp;rft.au=Peyton+Jones%2C+Simon&amp;rft.btitle=Scrap+Your+Boilerplate%3A+A+Practical+Design+Pattern+for+Generic+Programming&amp;rft.genre=unknown&amp;rft.pub=Microsoft&amp;rft_id=https%3A%2F%2Fwww.microsoft.com%2Fen-us%2Fresearch%2Fwp-content%2Fuploads%2F2003%2F01%2Fhmap.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><cite class="citation web">Gabriel Dos Reis; Jaakko Ja ̈rvi (2005). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20051225114849/http://lcsd05.cs.tamu.edu/papers/dos_reis_et_al.pdf">"What is Generic Programming? (preprint LCSD’05)"</a> <span style="font-size:85%;">(PDF)</span>. Archived from <a rel="nofollow" class="external text" href="http://lcsd05.cs.tamu.edu/papers/dos_reis_et_al.pdf">the original</a> <span style="font-size:85%;">(PDF)</span> on 25 December 2005.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=Gabriel+Dos+Reis&amp;rft.au=Jaakko+Ja+%CC%88rvi&amp;rft.btitle=What+is+Generic+Programming%3F+%28preprint+LCSD%E2%80%9905%29&amp;rft.date=2005&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Flcsd05.cs.tamu.edu%2Fpapers%2Fdos_reis_et_al.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-17">^</a></b></span> <span class="reference-text"><cite class="citation web">R. Garcia; J. Ja ̈rvi; A. Lumsdaine; J. Siek; J. Willcock (2005). <a rel="nofollow" class="external text" href="http://www.osl.iu.edu/publications/prints/2005/garcia05:_extended_comparing05.pdf">"An extended comparative study of language support for generic programming (preprint)"</a> <span style="font-size:85%;">(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=A.+Lumsdaine&amp;rft.au=J.+Ja+%CC%88rvi&amp;rft.au=J.+Siek&amp;rft.au=J.+Willcock&amp;rft.au=R.+Garcia&amp;rft.btitle=An+extended+comparative+study+of+language+support+for+generic+programming+%28preprint%29&amp;rft.date=2005&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.osl.iu.edu%2Fpublications%2Fprints%2F2005%2Fgarcia05%3A_extended_comparing05.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-18">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.stroustrup.com/N1522-concept-criteria.pdf">Stroustrup, Dos Reis (2003): Concepts - Design choices for template argument checking</a></span></li>/n<li id="cite_note-Stroustrup94Design-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-Stroustrup94Design_19-0">^</a></b></span> <span class="reference-text"><cite class="citation book"><a href="/wiki/Bjarne_Stroustrup" title="Bjarne Stroustrup">Stroustrup, Bjarne</a> (1994). "15.5 Avoiding Code Replication". <i>The Design and Evolution of C++</i>. Reading, Massachusetts: Addison-Wesley. pp.&#160;346–348. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-81-317-1608-3" title="Special:BookSources/978-81-317-1608-3">978-81-317-1608-3</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.atitle=15.5+Avoiding+Code+Replication&amp;rft.aufirst=Bjarne&amp;rft.aulast=Stroustrup&amp;rft.btitle=The+Design+and+Evolution+of+C%2B%2B&amp;rft.date=1994&amp;rft.genre=bookitem&amp;rft.isbn=978-81-317-1608-3&amp;rft.pages=346-348&amp;rft.place=Reading%2C+Massachusetts&amp;rft.pub=Addison-Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-20">^</a></b></span> <span class="reference-text"><cite class="citation web">Bright, Walter. <a rel="nofollow" class="external text" href="http://www.drdobbs.com/cpp/voldemort-types-in-d/232901591">"Voldemort Types in D"</a>. <i>Dr. Dobbs</i><span class="reference-accessdate">. Retrieved <span class="nowrap">3 June</span> 2015</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.atitle=Voldemort+Types+in+D&amp;rft.aufirst=Walter&amp;rft.aulast=Bright&amp;rft.genre=unknown&amp;rft.jtitle=Dr.+Dobbs&amp;rft_id=http%3A%2F%2Fwww.drdobbs.com%2Fcpp%2Fvoldemort-types-in-d%2F232901591&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>/n<li id="cite_note-21"><span class="mw-cite-backlink"><b><a href="#cite_ref-21">^</a></b></span> <span class="reference-text"><i>Object-Oriented Software Construction,</i> Prentice Hall, 1988, and <i>Object-Oriented Software Construction, second edition,</i> Prentice Hall, 1997.</span></li>/n<li id="cite_note-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-22">^</a></b></span> <span class="reference-text"><i>Eiffel: The Language,</i> Prentice Hall, 1991.</span></li>/n<li id="cite_note-23"><span class="mw-cite-backlink"><b><a href="#cite_ref-23">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://blogs.msdn.com/b/dsyme/archive/2011/03/15/net-c-generics-history-some-photos-from-feb-1999.aspx">.NET/C# Generics History: Some Photos From Feb 1999</a></span></li>/n<li id="cite_note-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-24">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.ondotnet.com/pub/a/dotnet/2005/10/17/interview-with-anders-hejlsberg.html">C#: Yesterday, Today, and Tomorrow: An Interview with Anders Hejlsberg</a></span></li>/n<li id="cite_note-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-25">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.artima.com/intv/generics2.html">Generics in C#, Java, and C++</a></span></li>/n<li id="cite_note-26"><span class="mw-cite-backlink"><b><a href="#cite_ref-26">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/ms182144.aspx">Code Analysis CA1006: Do not nest generic types in member signatures</a></span></li>/n<li id="cite_note-27"><span class="mw-cite-backlink"><b><a href="#cite_ref-27">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://msdn2.microsoft.com/en-us/library/d5x73970.aspx">Constraints on Type Parameters (C# Programming Guide)</a></span></li>/n<li id="cite_note-28"><span class="mw-cite-backlink"><b><a href="#cite_ref-28">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.cs.uu.nl/research/projects/generic-haskell/compiler/diamond/GHUsersGuide.pdf">The Generic Haskell User's Guide</a></span></li>/n<li id="cite_note-29"><span class="mw-cite-backlink"><b><a href="#cite_ref-29">^</a></b></span> <span class="reference-text">Verilog by Example, Section <i>The Rest for Reference</i>. Blaine C. Readler, Full Arc Press, 2011. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-0-9834973-0-1" title="Special:BookSources/978-0-9834973-0-1">978-0-9834973-0-1</a></span></li>/n</ol>/n</div>/n</div>/n<h2><span class="mw-headline" id="Citations">Citations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=28" title="Edit section: Citations">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<div class="refbegin" style="">/n<ul>/n<li><cite id="CITEREFMusserStepanov1989" class="citation book"><a href="/wiki/David_Musser" title="David Musser">Musser, D. R.</a>; <a href="/wiki/Alexander_Stepanov" title="Alexander Stepanov">Stepanov, A. A.</a> (1989). "Generic programming". In P. Gianni. <i>Symbolic and Algebraic Computation: International symposium ISSAC 1988</i>. Lecture Notes in Computer Science. <b>358</b>. pp.&#160;13–25. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-3-540-51084-0" title="Special:BookSources/978-3-540-51084-0">978-3-540-51084-0</a>. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//doi.org/10.1007%2F3-540-51084-2_2">10.1007/3-540-51084-2_2</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.atitle=Generic+programming&amp;rft.au=Stepanov%2C+A.+A.&amp;rft.aufirst=D.+R.&amp;rft.aulast=Musser&amp;rft.btitle=Symbolic+and+Algebraic+Computation%3A+International+symposium+ISSAC+1988&amp;rft.date=1989&amp;rft.genre=bookitem&amp;rft.isbn=978-3-540-51084-0&amp;rft.pages=13-25&amp;rft.series=Lecture+Notes+in+Computer+Science&amp;rft_id=info%3Adoi%2F10.1007%2F3-540-51084-2_2&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n<li><cite class="citation conference"><a href="/wiki/Bjarne_Stroustrup" title="Bjarne Stroustrup">Stroustrup, Bjarne</a> (2007). <a rel="nofollow" class="external text" href="http://www.research.att.com/~bs/hopl-almost-final.pdf"><i>Evolving a language in and for the real world: C++ 1991-2006</i></a> <span style="font-size:85%;">(PDF)</span>. ACM HOPL 2007.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.aufirst=Bjarne&amp;rft.aulast=Stroustrup&amp;rft.btitle=Evolving+a+language+in+and+for+the+real+world%3A+C%2B%2B+1991-2006&amp;rft.date=2007&amp;rft.genre=conference&amp;rft_id=http%3A%2F%2Fwww.research.att.com%2F~bs%2Fhopl-almost-final.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n<li><cite class="citation book">Gamma, Erich; Helm, Richard; Johnson, Ralph; Vlissides, John (1994). <i>Design Patterns: Elements of Reusable Object-Oriented Software</i>. Addison-Wesley. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-201-63361-2" title="Special:BookSources/0-201-63361-2">0-201-63361-2</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.au=Helm%2C+Richard&amp;rft.au=Johnson%2C+Ralph&amp;rft.au=Vlissides%2C+John&amp;rft.aufirst=Erich&amp;rft.aulast=Gamma&amp;rft.btitle=Design+Patterns%3A+Elements+of+Reusable+Object-Oriented+Software&amp;rft.date=1994&amp;rft.genre=book&amp;rft.isbn=0-201-63361-2&amp;rft.pub=Addison-Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n</ul>/n</div>/n<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=29" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<ul>/n<li>Gabriel Dos Reis and Jaakko Järvi, <i><a rel="nofollow" class="external text" href="http://www.elegantcoding.com/2012/04/what-is-generic-programming.html">What is Generic Programming?</a>,</i> <a rel="nofollow" class="external text" href="http://lcsd05.cs.tamu.edu">LCSD 2005</a>.</li>/n<li><cite class="citation conference"><a href="/wiki/Jeremy_Gibbons" title="Jeremy Gibbons">Gibbons, Jeremy</a> (2007). Backhouse, R.; Gibbons, J.; Hinze, R.; Jeuring, J., eds. <i>Datatype-generic programming</i>. Spring School on Datatype-Generic Programming 2006. Lecture Notes in Computer Science. <b>4719</b>. Heidelberg: Springer. pp.&#160;1–71. <a href="/wiki/CiteSeerX" title="CiteSeerX">CiteSeerX</a>&#160;<span class="plainlinks"><a rel="nofollow" class="external text" href="//citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.159.1228">10.1.1.159.1228</a> <img alt="Freely accessible" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png" title="Freely accessible" width="9" height="14" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/14px-Lock-green.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/18px-Lock-green.svg.png 2x" data-file-width="512" data-file-height="813" /></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGeneric+programming&amp;rft.aufirst=Jeremy&amp;rft.aulast=Gibbons&amp;rft.btitle=Datatype-generic+programming&amp;rft.date=2007&amp;rft.genre=conference&amp;rft.pages=1-71&amp;rft.place=Heidelberg&amp;rft.pub=Springer&amp;rft.series=Lecture+Notes+in+Computer+Science&amp;rft_id=%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.159.1228&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>/n<li><a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a>. "<a rel="nofollow" class="external text" href="http://se.ethz.ch/~meyer/publications/acm/geninh.pdf">Genericity vs Inheritance</a>." In <i>OOPSLA (First ACM Conference on Object-Oriented Programming Systems, Languages and Applications),</i> Portland (Oregon), 29 September–2 October 1986, pages 391–405.</li>/n</ul>/n<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=30" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>/n<ul>/n<li><a rel="nofollow" class="external text" href="http://www.generic-programming.org">generic-programming.org</a></li>/n<li>Alexander A. Stepanov, <a rel="nofollow" class="external text" href="http://www.stepanovpapers.com/">Collected Papers of Alexander A. Stepanov</a> (creator of the <a href="/wiki/Standard_Template_Library" title="Standard Template Library">STL</a>)</li>/n</ul>/n<dl>/n<dt>C++/D</dt>/n</dl>/n<ul>/n<li>Walter Bright, <i><a rel="nofollow" class="external text" href="http://www.digitalmars.com/d/templates-revisited.html">Templates Revisited</a>.</i></li>/n<li>David Vandevoorde, Nicolai M Josuttis, <i>C++ Templates: The Complete Guide</i>, 2003 Addison-Wesley. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-201-73484-2" title="Special:BookSources/0-201-73484-2">0-201-73484-2</a></li>/n</ul>/n<dl>/n<dt>C#/.NET</dt>/n</dl>/n<ul>/n<li>Jason Clark, "<a rel="nofollow" class="external text" href="http://msdn.microsoft.com/msdnmag/issues/03/09/NET/">Introducing Generics in the Microsoft CLR</a>," September 2003, <i>MSDN Magazine</i>, Microsoft.</li>/n<li>Jason Clark, "<a rel="nofollow" class="external text" href="http://msdn.microsoft.com/msdnmag/issues/03/10/NET/">More on Generics in the Microsoft CLR</a>," October 2003, <i>MSDN Magazine</i>, Microsoft.</li>/n<li>M. Aamir Maniar, <a rel="nofollow" class="external text" href="http://codeplex.com/Wiki/View.aspx?ProjectName=genericsnet">Generics.Net</a>. An open source generics library for C#.</li>/n</ul>/n<dl>/n<dt>Delphi/Object Pascal</dt>/n</dl>/n<ul>/n<li>Nick Hodges, "<a rel="nofollow" class="external text" href="http://dn.codegear.com/article/38757">Delphi 2009 Reviewers Guide</a>," October 2008, <i>CodeGear Developer Network</i>, CodeGear.</li>/n<li>Craig Stuntz, "<a rel="nofollow" class="external text" href="http://blogs.teamb.com/craigstuntz/2008/08/29/37832/">Delphi 2009 Generics and Type Constraints</a>," October 2008</li>/n<li>Dr. Bob, "<a rel="nofollow" class="external text" href="http://www.drbob42.com/examines/examinA4.htm">Delphi 2009 Generics</a>"</li>/n<li><a href="/wiki/Free_Pascal" title="Free Pascal">Free Pascal</a>: <a rel="nofollow" class="external text" href="http://www.freepascal.org/docs-html/ref/refch8.html">Free Pascal Reference guide Chapter 8: Generics</a>, Michaël Van Canneyt, 2007</li>/n<li><a href="/wiki/CodeGear_Delphi" class="mw-redirect" title="CodeGear Delphi">Delphi</a> for Win32: <a rel="nofollow" class="external text" href="http://sjrd.developpez.com/delphi/tutoriel/generics/">Generics with Delphi 2009 Win32</a>, Sébastien DOERAENE, 2008</li>/n<li>Delphi for .NET: <a rel="nofollow" class="external text" href="http://www.felix-colibri.com/papers/oop_components/delphi_generics_tutorial/delphi_generics_tutorial.html">Delphi Generics</a>, Felix COLIBRI, 2008</li>/n</ul>/n<dl>/n<dt>Eiffel</dt>/n</dl>/n<ul>/n<li><a rel="nofollow" class="external text" href="http://www.ecma-international.org/publications/standards/Ecma-367.htm">Eiffel ISO/ECMA specification document</a></li>/n</ul>/n<dl>/n<dt>Haskell</dt>/n</dl>/n<ul>/n<li>Johan Jeuring, Sean Leather, José Pedro Magalhães, and Alexey Rodriguez Yakushev. <a rel="nofollow" class="external text" href="http://www.cs.uu.nl/wiki/pub/GP/CourseLiterature/afp08.pdf"><i>Libraries for Generic Programming in Haskell</i></a>. Utrecht University.</li>/n<li>Dæv Clarke, Johan Jeuring and Andres Löh, <a rel="nofollow" class="external text" href="http://www.cs.uu.nl/research/projects/generic-haskell/compiler/diamond/GHUsersGuide.pdf">The Generic Haskell user's guide</a></li>/n<li>Ralf Hinze, "<a rel="nofollow" class="external text" href="http://www.cs.ox.ac.uk/ralf.hinze/publications/Masses.pdf">Generics for the Masses</a>," In <i>Proceedings of the <a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> <a href="/wiki/SIGPLAN" title="SIGPLAN">SIGPLAN</a> <a href="/wiki/International_Conference_on_Functional_Programming" title="International Conference on Functional Programming">International Conference on Functional Programming</a> (ICFP),</i> 2004.</li>/n<li><a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon Peyton Jones</a>, editor, <i><a rel="nofollow" class="external text" href="http://haskell.org/onlinereport/index.html">The Haskell 98 Language Report</a>,</i> Revised 2002.</li>/n<li><a href="/w/index.php?title=Ralf_L%C3%A4mmel&amp;action=edit&amp;redlink=1" class="new" title="Ralf Lämmel (page does not exist)">Ralf Lämmel</a> and <a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon Peyton Jones</a>, "Scrap Your Boilerplate: A Practical Design Pattern for Generic Programming," In <i>Proceedings of the <a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> <a href="/wiki/SIGPLAN" title="SIGPLAN">SIGPLAN</a> International Workshop on Types in Language Design and Implementation (TLDI'03),</i> 2003. (Also see the website <a rel="nofollow" class="external text" href="https://web.archive.org/web/20041207211740/http://www.cs.vu.nl/boilerplate/">devoted to this research</a>)</li>/n<li>Andres Löh, <i><a rel="nofollow" class="external text" href="http://www.cs.uu.nl/~andres/ExploringGH.pdf">Exploring Generic Haskell</a>,</i> Ph.D. thesis, 2004 <a href="/wiki/Utrecht_University" title="Utrecht University">Utrecht University</a>. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/90-393-3765-9" title="Special:BookSources/90-393-3765-9">90-393-3765-9</a></li>/n<li><a rel="nofollow" class="external text" href="http://www.generic-haskell.org/">Generic Haskell: a language for generic programming</a></li>/n</ul>/n<dl>/n<dt>Java</dt>/n</dl>/n<ul>/n<li>Gilad Bracha, <i><a rel="nofollow" class="external text" href="http://java.sun.com/j2se/1.5/pdf/generics-tutorial.pdf">Generics in the Java Programming Language</a>,</i> 2004.</li>/n<li>Maurice Naftalin and Philip Wadler, <i>Java Generics and Collections,</i> 2006, O'Reilly Media, Inc. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-596-52775-6" title="Special:BookSources/0-596-52775-6">0-596-52775-6</a></li>/n<li>Peter Sestoft, <i>Java Precisely, Second Edition,</i> 2005 MIT Press. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-262-69325-9" title="Special:BookSources/0-262-69325-9">0-262-69325-9</a></li>/n<li><a rel="nofollow" class="external text" href="//docs.oracle.com/javase/9/docs/">Java SE 9</a>, 2004 Sun Microsystems, Inc.</li>/n<li>Angelika Langer, <a rel="nofollow" class="external text" href="http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html">Java Generics FAQs</a></li>/n</ul>/n<div role="navigation" class="navbox" aria-labelledby="Data_types" style="padding:3px">/n<table class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">/n<tr>/n<th scope="col" class="navbox-title" colspan="2">/n<div class="plainlinks hlist navbar mini">/n<ul>/n<li class="nv-view"><a href="/wiki/Template:Data_types" title="Template:Data types"><abbr title="View this template" style=";;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none;">v</abbr></a></li>/n<li class="nv-talk"><a href="/wiki/Template_talk:Data_types" title="Template talk:Data types"><abbr title="Discuss this template" style=";;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none;">t</abbr></a></li>/n<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Data_types&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none;">e</abbr></a></li>/n</ul>/n</div>/n<div id="Data_types" style="font-size:114%;margin:0 4em"><a href="/wiki/Data_type" title="Data type">Data types</a></div>/n</th>/n</tr>/n<tr>/n<th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Units_of_information" title="Units of information">Uninterpreted</a></th>/n<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Bit" title="Bit">Bit</a></li>/n<li><a href="/wiki/Byte" title="Byte">Byte</a></li>/n<li><a href="/wiki/Ternary_numeral_system" title="Ternary numeral system">Trit</a></li>/n<li><a href="/wiki/Ternary_numeral_system#Tryte" title="Ternary numeral system">Tryte</a></li>/n<li><a href="/wiki/Word_(computer_architecture)" title="Word (computer architecture)">Word</a></li>/n<li><a href="/wiki/Bit_array" title="Bit array">Bit array</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<th scope="row" class="navbox-group" style="width:1%">Numeric</th>/n<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Arbitrary-precision_arithmetic" title="Arbitrary-precision arithmetic">Arbitrary-precision or bignum</a></li>/n<li><a href="/wiki/Complex_data_type" title="Complex data type">Complex</a></li>/n<li><a href="/wiki/Decimal_data_type" title="Decimal data type">Decimal</a></li>/n<li><a href="/wiki/Fixed-point_arithmetic" title="Fixed-point arithmetic">Fixed point</a></li>/n<li><a href="/wiki/Floating_point" class="mw-redirect" title="Floating point">Floating point</a>/n<ul>/n<li><a href="/wiki/Double-precision_floating-point_format" title="Double-precision floating-point format">Double precision</a></li>/n<li><a href="/wiki/Extended_precision" title="Extended precision">Extended precision</a></li>/n<li><a href="/wiki/Half-precision_floating-point_format" title="Half-precision floating-point format">Half precision</a></li>/n<li><a href="/wiki/Long_double" title="Long double">Long double</a></li>/n<li><a href="/wiki/Minifloat" title="Minifloat">Minifloat</a></li>/n<li><a href="/wiki/Octuple-precision_floating-point_format" title="Octuple-precision floating-point format">Octuple precision</a></li>/n<li><a href="/wiki/Quadruple-precision_floating-point_format" title="Quadruple-precision floating-point format">Quadruple precision</a></li>/n<li><a href="/wiki/Single-precision_floating-point_format" title="Single-precision floating-point format">Single precision</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Integer_(computer_science)" title="Integer (computer science)">Integer</a>/n<ul>/n<li><a href="/wiki/Signedness" title="Signedness">signedness</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Interval_arithmetic#Implementations" title="Interval arithmetic">Interval</a></li>/n<li><a href="/wiki/Rational_data_type" title="Rational data type">Rational</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Pointer_(computer_programming)" title="Pointer (computer programming)">Pointer</a></th>/n<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Memory_address" title="Memory address">Address</a>/n<ul>/n<li><a href="/wiki/Physical_address" title="Physical address">physical</a></li>/n<li><a href="/wiki/Virtual_address_space" title="Virtual address space">virtual</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">Reference</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Plain_text" title="Plain text">Text</a></th>/n<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Character_(computing)" title="Character (computing)">Character</a></li>/n<li><a href="/wiki/String_(computer_science)" title="String (computer science)">String</a>/n<ul>/n<li><a href="/wiki/Null-terminated_string" title="Null-terminated string">null-terminated</a></li>/n</ul>/n</li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Composite_data_type" title="Composite data type">Composite</a></th>/n<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Algebraic_data_type" title="Algebraic data type">Algebraic data type</a>/n<ul>/n<li><a href="/wiki/Generalized_algebraic_data_type" title="Generalized algebraic data type">generalized</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Array_data_type" title="Array data type">Array</a></li>/n<li><a href="/wiki/Associative_array" title="Associative array">Associative array</a></li>/n<li><a href="/wiki/Class_(computer_programming)" title="Class (computer programming)">Class</a></li>/n<li><a href="/wiki/Dependent_type" title="Dependent type">Dependent</a></li>/n<li><a href="/wiki/Intuitionistic_type_theory#Equality_type" title="Intuitionistic type theory">Equality</a></li>/n<li><a href="/wiki/Inductive_type" title="Inductive type">Inductive</a></li>/n<li><a href="/wiki/List_(abstract_data_type)" title="List (abstract data type)">List</a></li>/n<li><a href="/wiki/Object_(computer_science)" title="Object (computer science)">Object</a>/n<ul>/n<li><a href="/wiki/Metaobject" title="Metaobject">metaobject</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Option_type" title="Option type">Option type</a></li>/n<li><a href="/wiki/Product_type" title="Product type">Product</a></li>/n<li><a href="/wiki/Record_(computer_science)" title="Record (computer science)">Record</a></li>/n<li><a href="/wiki/Set_(abstract_data_type)" title="Set (abstract data type)">Set</a></li>/n<li><a href="/wiki/Union_type" title="Union type">Union</a>/n<ul>/n<li><a href="/wiki/Tagged_union" title="Tagged union">tagged</a></li>/n</ul>/n</li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<th scope="row" class="navbox-group" style="width:1%">Other</th>/n<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Boolean_data_type" title="Boolean data type">Boolean</a></li>/n<li><a href="/wiki/Bottom_type" title="Bottom type">Bottom type</a></li>/n<li><a href="/wiki/Container_(abstract_data_type)" title="Container (abstract data type)">Collection</a></li>/n<li><a href="/wiki/Enumerated_type" title="Enumerated type">Enumerated type</a></li>/n<li><a href="/wiki/Exception_handling" title="Exception handling">Exception</a></li>/n<li><a href="/wiki/Function_type" title="Function type">Function type</a></li>/n<li><a href="/wiki/Opaque_data_type" title="Opaque data type">Opaque data type</a></li>/n<li><a href="/wiki/Recursive_data_type" title="Recursive data type">Recursive data type</a></li>/n<li><a href="/wiki/Semaphore_(programming)" title="Semaphore (programming)">Semaphore</a></li>/n<li><a href="/wiki/Stream_(computing)" title="Stream (computing)">Stream</a></li>/n<li><a href="/wiki/Top_type" title="Top type">Top type</a></li>/n<li><a href="/wiki/Type_class" title="Type class">Type class</a></li>/n<li><a href="/wiki/Unit_type" title="Unit type">Unit type</a></li>/n<li><a href="/wiki/Void_type" title="Void type">Void</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<th scope="row" class="navbox-group" style="width:1%">Related<br />/ntopics</th>/n<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><a href="/wiki/Abstract_data_type" title="Abstract data type">Abstract data type</a></li>/n<li><a href="/wiki/Data_structure" title="Data structure">Data structure</a></li>/n<li><a class="mw-selflink selflink">Generic</a></li>/n<li><a href="/wiki/Kind_(type_theory)" title="Kind (type theory)">Kind</a>/n<ul>/n<li><a href="/wiki/Metaclass" title="Metaclass">metaclass</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Parametric_polymorphism" title="Parametric polymorphism">Parametric polymorphism</a></li>/n<li><a href="/wiki/Primitive_data_type" title="Primitive data type">Primitive data type</a></li>/n<li><a href="/wiki/Protocol_(object-oriented_programming)" title="Protocol (object-oriented programming)">Protocol</a>/n<ul>/n<li><a href="/wiki/Interface_(computing)#Software_interfaces_in_object-oriented_languages" title="Interface (computing)">interface</a></li>/n</ul>/n</li>/n<li><a href="/wiki/Subtyping" title="Subtyping">Subtyping</a></li>/n<li><a href="/wiki/Type_constructor" title="Type constructor">Type constructor</a></li>/n<li><a href="/wiki/Type_conversion" title="Type conversion">Type conversion</a></li>/n<li><a href="/wiki/Type_system" title="Type system">Type system</a></li>/n</ul>/n</div>/n</td>/n</tr>/n<tr>/n<td class="navbox-abovebelow" colspan="2">/n<div>See also <a href="/wiki/Template:Information_units" title="Template:Information units">platform-dependent and independent units of information</a></div>/n</td>/n</tr>/n</table>/n</div>/n<div role="navigation" class="navbox" aria-label="Navbox" style="padding:3px">/n<table class="nowraplinks hlist navbox-inner" style="border-spacing:0;background:transparent;color:inherit">/n<tr>/n<th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Help:Authority_control" title="Help:Authority control">Authority control</a></th>/n<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">/n<div style="padding:0em 0.25em">/n<ul>/n<li><span class="nowrap"><a href="/wiki/Library_of_Congress_Control_Number" title="Library of Congress Control Number">LCCN</a>: <span class="uid"><a rel="nofollow" class="external text" href="http://id.loc.gov/authorities/subjects/sh00000132">sh00000132</a></span></span></li>/n<li><span class="nowrap"><a href="/wiki/Integrated_Authority_File" title="Integrated Authority File">GND</a>: <span class="uid"><a rel="nofollow" class="external text" href="http://d-nb.info/gnd/4431718-9">4431718-9</a></span></span></li>/n<li><span class="nowrap"><a href="/wiki/Biblioth%C3%A8que_nationale_de_France" title="Bibliothèque nationale de France">BNF</a>: <span class="uid"><a rel="nofollow" class="external text" href="http://catalogue.bnf.fr/ark:/12148/cb15025202q">cb15025202q</a> <a rel="nofollow" class="external text" href="http://data.bnf.fr/ark:/12148/cb15025202q">(data)</a></span></span></li>/n</ul>/n</div>/n</td>/n</tr>/n</table>/n</div>/n/n/n<!-- /nNewPP limit report/nParsed by mw1290/nCached time: 20171027121602/nCache expiry: 1900800/nDynamic content: false/nCPU time usage: 0.416 seconds/nReal time usage: 0.541 seconds/nPreprocessor visited node count: 3605/1000000/nPreprocessor generated node count: 0/1500000/nPost‐expand include size: 80433/2097152 bytes/nTemplate argument size: 6172/2097152 bytes/nHighest expansion depth: 16/40/nExpensive parser function count: 4/500/nLua time usage: 0.172/10.000 seconds/nLua memory usage: 4.88 MB/50 MB/n-->/n<!--/nTransclusion expansion time report (%,ms,calls,template)/n100.00%  430.220      1 -total/n 30.01%  129.120      1 Template:Reflist/n 18.98%   81.668      3 Template:Citation_needed/n 16.10%   69.282      3 Template:Fix/n 14.63%   62.929     10 Template:Cite_book/n 11.24%   48.366      6 Template:Quote/n 10.53%   45.289      6 Template:Category_handler/n  8.93%   38.411      5 Template:ISBN/n  8.91%   38.337      6 Template:Comma_separated_entries/n  6.61%   28.427      1 Template:Programming_paradigms/n-->/n</div>/n<!-- Saved in parser cache with key enwiki:pcache:idhash:105837-0!canonical and timestamp 20171027121602 and revision id 807351467/n -->/n<noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>					<div class="printfooter">/n						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Generic_programming&amp;oldid=807351467">https://en.wikipedia.org/w/index.php?title=Generic_programming&amp;oldid=807351467</a>"					</div>/n				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Generic_programming" title="Category:Generic programming">Generic programming</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:Pages_using_citations_with_accessdate_and_no_URL" title="Category:Pages using citations with accessdate and no URL">Pages using citations with accessdate and no URL</a></li><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_August_2015" title="Category:Articles with unsourced statements from August 2015">Articles with unsourced statements from August 2015</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_May_2010" title="Category:Articles with unsourced statements from May 2010">Articles with unsourced statements from May 2010</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_March_2009" title="Category:Articles with unsourced statements from March 2009">Articles with unsourced statements from March 2009</a></li><li><a href="/wiki/Category:Wikipedia_articles_with_LCCN_identifiers" title="Category:Wikipedia articles with LCCN identifiers">Wikipedia articles with LCCN identifiers</a></li><li><a href="/wiki/Category:Wikipedia_articles_with_GND_identifiers" title="Category:Wikipedia articles with GND identifiers">Wikipedia articles with GND identifiers</a></li><li><a href="/wiki/Category:Wikipedia_articles_with_BNF_identifiers" title="Category:Wikipedia articles with BNF identifiers">Wikipedia articles with BNF identifiers</a></li><li><a href="/wiki/Category:Use_dmy_dates_from_January_2012" title="Category:Use dmy dates from January 2012">Use dmy dates from January 2012</a></li></ul></div></div>				<div class="visualClear"></div>/n							</div>/n		</div>/n		<div id="mw-navigation">/n			<h2>Navigation menu</h2>/n/n			<div id="mw-head">/n									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">/n						<h3 id="p-personal-label">Personal tools</h3>/n						<ul>/n							<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Generic+programming" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Generic+programming" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>						</ul>/n					</div>/n									<div id="left-navigation">/n										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">/n						<h3 id="p-namespaces-label">Namespaces</h3>/n						<ul>/n														<li id="ca-nstab-main" class="selected"><span><a href="/wiki/Generic_programming" title="View the content page [c]" accesskey="c">Article</a></span></li>/n							<li id="ca-talk"><span><a href="/wiki/Talk:Generic_programming" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>/n						</ul>/n					</div>/n										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">/n												<h3 id="p-variants-label">/n							<span>Variants</span>/n						</h3>/n/n						<div class="menu">/n							<ul>/n															</ul>/n						</div>/n					</div>/n									</div>/n				<div id="right-navigation">/n										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">/n						<h3 id="p-views-label">Views</h3>/n						<ul>/n														<li id="ca-view" class="collapsible selected"><span><a href="/wiki/Generic_programming">Read</a></span></li>/n							<li id="ca-edit" class="collapsible"><span><a href="/w/index.php?title=Generic_programming&amp;action=edit" title="Edit this page [e]" accesskey="e">Edit</a></span></li>/n							<li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Generic_programming&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>/n						</ul>/n					</div>/n										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">/n						<h3 id="p-cactions-label"><span>More</span></h3>/n/n						<div class="menu">/n							<ul>/n															</ul>/n						</div>/n					</div>/n										<div id="p-search" role="search">/n						<h3>/n							<label for="searchInput">Search</label>/n						</h3>/n/n						<form action="/w/index.php" id="searchform">/n							<div id="simpleSearch">/n							<input type="search" name="search" placeholder="Search Wikipedia" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>/n						</form>/n					</div>/n									</div>/n			</div>/n			<div id="mw-panel">/n				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>/n						<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>/n			<h3 id='p-navigation-label'>Navigation</h3>/n/n			<div class="body">/n									<ul>/n						<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>/n			<h3 id='p-interaction-label'>Interaction</h3>/n/n			<div class="body">/n									<ul>/n						<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>/n			<h3 id='p-tb-label'>Tools</h3>/n/n			<div class="body">/n									<ul>/n						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Generic_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Generic_programming" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Generic_programming&amp;oldid=807351467" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Generic_programming&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q1051282" title="Link to connected data repository item [g]" accesskey="g">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Generic_programming&amp;id=807351467" title="Information on how to cite this page">Cite this page</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>/n			<h3 id='p-coll-print_export-label'>Print/export</h3>/n/n			<div class="body">/n									<ul>/n						<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Generic+programming">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:ElectronPdf&amp;page=Generic+programming&amp;action=show-download-screen">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Generic_programming&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>					</ul>/n							</div>/n		</div>/n			<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>/n			<h3 id='p-lang-label'>Languages</h3>/n/n			<div class="body">/n									<ul>/n						<li class="interlanguage-link interwiki-be"><a href="https://be.wikipedia.org/wiki/%D0%90%D0%B1%D0%B0%D0%B3%D1%83%D0%BB%D1%8C%D0%BD%D0%B5%D0%BD%D0%B0%D0%B5_%D0%BF%D1%80%D0%B0%D0%B3%D1%80%D0%B0%D0%BC%D0%B0%D0%B2%D0%B0%D0%BD%D0%BD%D0%B5" title="Абагульненае праграмаванне – Belarusian" lang="be" hreflang="be" class="interlanguage-link-target">Беларуская</a></li><li class="interlanguage-link interwiki-bg"><a href="https://bg.wikipedia.org/wiki/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D0%BD%D0%B8_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2%D0%B5" title="Шаблонни типове – Bulgarian" lang="bg" hreflang="bg" class="interlanguage-link-target">Български</a></li><li class="interlanguage-link interwiki-ca"><a href="https://ca.wikipedia.org/wiki/Programaci%C3%B3_gen%C3%A8rica" title="Programació genèrica – Catalan" lang="ca" hreflang="ca" class="interlanguage-link-target">Català</a></li><li class="interlanguage-link interwiki-cs"><a href="https://cs.wikipedia.org/wiki/Generick%C3%A9_programov%C3%A1n%C3%AD" title="Generické programování – Czech" lang="cs" hreflang="cs" class="interlanguage-link-target">Čeština</a></li><li class="interlanguage-link interwiki-de"><a href="https://de.wikipedia.org/wiki/Generische_Programmierung" title="Generische Programmierung – German" lang="de" hreflang="de" class="interlanguage-link-target">Deutsch</a></li><li class="interlanguage-link interwiki-et"><a href="https://et.wikipedia.org/wiki/%C3%9Cldistav_programmeerimine" title="Üldistav programmeerimine – Estonian" lang="et" hreflang="et" class="interlanguage-link-target">Eesti</a></li><li class="interlanguage-link interwiki-es"><a href="https://es.wikipedia.org/wiki/Programaci%C3%B3n_gen%C3%A9rica" title="Programación genérica – Spanish" lang="es" hreflang="es" class="interlanguage-link-target">Español</a></li><li class="interlanguage-link interwiki-fa"><a href="https://fa.wikipedia.org/wiki/%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%E2%80%8C%D9%86%D9%88%DB%8C%D8%B3%DB%8C_%D8%AC%D9%86%D8%B1%DB%8C%DA%A9" title="برنامه‌نویسی جنریک – Persian" lang="fa" hreflang="fa" class="interlanguage-link-target">فارسی</a></li><li class="interlanguage-link interwiki-fr"><a href="https://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9ricit%C3%A9" title="Généricité – French" lang="fr" hreflang="fr" class="interlanguage-link-target">Français</a></li><li class="interlanguage-link interwiki-ko"><a href="https://ko.wikipedia.org/wiki/%EC%A0%9C%EB%84%A4%EB%A6%AD_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D" title="제네릭 프로그래밍 – Korean" lang="ko" hreflang="ko" class="interlanguage-link-target">한국어</a></li><li class="interlanguage-link interwiki-he"><a href="https://he.wikipedia.org/wiki/%D7%AA%D7%9B%D7%A0%D7%95%D7%AA_%D7%92%D7%A0%D7%A8%D7%99" title="תכנות גנרי – Hebrew" lang="he" hreflang="he" class="interlanguage-link-target">עברית</a></li><li class="interlanguage-link interwiki-nl"><a href="https://nl.wikipedia.org/wiki/Genericiteit" title="Genericiteit – Dutch" lang="nl" hreflang="nl" class="interlanguage-link-target">Nederlands</a></li><li class="interlanguage-link interwiki-ja"><a href="https://ja.wikipedia.org/wiki/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0" title="ジェネリックプログラミング – Japanese" lang="ja" hreflang="ja" class="interlanguage-link-target">日本語</a></li><li class="interlanguage-link interwiki-no"><a href="https://no.wikipedia.org/wiki/Generisk_programmering" title="Generisk programmering – Norwegian" lang="no" hreflang="no" class="interlanguage-link-target">Norsk</a></li><li class="interlanguage-link interwiki-pl"><a href="https://pl.wikipedia.org/wiki/Programowanie_uog%C3%B3lnione" title="Programowanie uogólnione – Polish" lang="pl" hreflang="pl" class="interlanguage-link-target">Polski</a></li><li class="interlanguage-link interwiki-pt"><a href="https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_gen%C3%A9rica" title="Programação genérica – Portuguese" lang="pt" hreflang="pt" class="interlanguage-link-target">Português</a></li><li class="interlanguage-link interwiki-ru"><a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D0%BE%D0%B1%D1%89%D1%91%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Обобщённое программирование – Russian" lang="ru" hreflang="ru" class="interlanguage-link-target">Русский</a></li><li class="interlanguage-link interwiki-sl"><a href="https://sl.wikipedia.org/wiki/Generi%C4%8Dno_programiranje" title="Generično programiranje – Slovenian" lang="sl" hreflang="sl" class="interlanguage-link-target">Slovenščina</a></li><li class="interlanguage-link interwiki-sr"><a href="https://sr.wikipedia.org/wiki/Generi%C4%8Dko_programiranje" title="Generičko programiranje – Serbian" lang="sr" hreflang="sr" class="interlanguage-link-target">Српски / srpski</a></li><li class="interlanguage-link interwiki-fi"><a href="https://fi.wikipedia.org/wiki/Geneerinen_ohjelmointi" title="Geneerinen ohjelmointi – Finnish" lang="fi" hreflang="fi" class="interlanguage-link-target">Suomi</a></li><li class="interlanguage-link interwiki-sv"><a href="https://sv.wikipedia.org/wiki/Generisk_programmering" title="Generisk programmering – Swedish" lang="sv" hreflang="sv" class="interlanguage-link-target">Svenska</a></li><li class="interlanguage-link interwiki-uk"><a href="https://uk.wikipedia.org/wiki/%D0%A3%D0%B7%D0%B0%D0%B3%D0%B0%D0%BB%D1%8C%D0%BD%D0%B5%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F" title="Узагальнене програмування – Ukrainian" lang="uk" hreflang="uk" class="interlanguage-link-target">Українська</a></li><li class="interlanguage-link interwiki-vi"><a href="https://vi.wikipedia.org/wiki/L%E1%BA%ADp_tr%C3%ACnh_t%E1%BB%95ng_qu%C3%A1t" title="Lập trình tổng quát – Vietnamese" lang="vi" hreflang="vi" class="interlanguage-link-target">Tiếng Việt</a></li><li class="interlanguage-link interwiki-zh-yue"><a href="https://zh-yue.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E7%B7%A8%E7%A8%8B" title="通用編程 – Cantonese" lang="zh-yue" hreflang="zh-yue" class="interlanguage-link-target">粵語</a></li><li class="interlanguage-link interwiki-zh"><a href="https://zh.wikipedia.org/wiki/%E6%B3%9B%E5%9E%8B" title="泛型 – Chinese" lang="zh" hreflang="zh" class="interlanguage-link-target">中文</a></li>					</ul>/n				<div class="after-portlet after-portlet-lang"><span class="wb-langlinks-edit wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q1051282#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>			</div>/n		</div>/n				</div>/n		</div>/n		<div id="footer" role="contentinfo">/n							<ul id="footer-info">/n											<li id="footer-info-lastmod"> This page was last edited on 27 October 2017, at 12:16.</li>/n											<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;/nadditional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>/n									</ul>/n							<ul id="footer-places">/n											<li id="footer-places-privacy"><a href="https://wikimediafoundation.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li>/n											<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>/n											<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>/n											<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>/n											<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>/n											<li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>/n											<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Generic_programming&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>/n									</ul>/n										<ul id="footer-icons" class="noprint">/n											<li id="footer-copyrightico">/n							<a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"/></a>						</li>/n											<li id="footer-poweredbyico">/n							<a href="//www.mediawiki.org/"><img src="/static/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>						</li>/n									</ul>/n						<div style="clear:both"></div>/n		</div>/n		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.416","walltime":"0.541","ppvisitednodes":{"value":3605,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":80433,"limit":2097152},"templateargumentsize":{"value":6172,"limit":2097152},"expansiondepth":{"value":16,"limit":40},"expensivefunctioncount":{"value":4,"limit":500},"entityaccesscount":{"value":1,"limit":400},"timingprofile":["100.00%  430.220      1 -total"," 30.01%  129.120      1 Template:Reflist"," 18.98%   81.668      3 Template:Citation_needed"," 16.10%   69.282      3 Template:Fix"," 14.63%   62.929     10 Template:Cite_book"," 11.24%   48.366      6 Template:Quote"," 10.53%   45.289      6 Template:Category_handler","  8.93%   38.411      5 Template:ISBN","  8.91%   38.337      6 Template:Comma_separated_entries","  6.61%   28.427      1 Template:Programming_paradigms"]},"scribunto":{"limitreport-timeusage":{"value":"0.172","limit":"10.000"},"limitreport-memusage":{"value":5121654,"limit":52428800}},"cachereport":{"origin":"mw1290","timestamp":"20171027121602","ttl":1900800,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":85,"wgHostname":"mw1328"});});</script>/n	</body>/n</html>/n